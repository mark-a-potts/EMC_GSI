#!/bin/sh
usage="\
Usage:  $0 [options] executable [args]
      where the options are:
      -a account        account (default:none)
      -e envars         copy comm-separated environment variables
      -g group          group name
      -j jobname        specify jobname (default: executable basename)
      -n                write command file to stdout rather than submitting it
      -o output         specify output file (default: jobname.out)
      -p procs[/nodes]    
                        number of MPI tasks and number of nodes
      -q queue          queue name 
      -r nodetype       node type (harp or neha)
      -v                verbose mode
      -t timew          wall time limit in [[hh:]mm:]ss format (default: 900)
      -w when           when to run, in yyyymmddhh[mm], +hh[mm], thh[mm], or
                        Thh[mm] (full, incremental, today or tomorrow) format
                        (default: now)
Function:  This command submits a job to the batch queue."
#=============================================================================
# Updates:
#   Jul 25, 2104, Deyong Xu / RTi @ JCSDA , Created this wrapper to submit 
#       job on badger out of sub_jcsda. Removed lots of useless information 
#       and added description comments.
#
#==============================================================================

#=================================================
# 1. Get list of parameters passed to sub_jcsda
#=================================================
subcmd="$*"

#=================================================
# 2. Initialize all the option 
#    parameters(12 parameters) to empty string
#=================================================
account=""
envars=""
group=$GROUP
jobname=""
output=""
nodes=""
procs="1"
nodetype=""
verbose=""
timew=""
when=""

#=================================================
# 3. Check options and get 
#    value from option passed in.
#=================================================
while getopts a:e:g:j:n:o:p:q:r:t:w:u: opt;do
   case $opt in
      a) account="$OPTARG";;
      e) envars="$OPTARG";;
      g) group="$OPTARG";;
      j) jobname=$OPTARG;;
      n) nosub=YES;;
      o) output=$OPTARG;;
      p) procs=$(echo $OPTARG/|cut -d/ -f1);nodes=$(echo $OPTARG/|cut -d/ -f2);;
      q) queue=$OPTARG;;#not used here but allow for it not to crash
      r) nodetype=$OPTARG;;
      t) timew=$OPTARG;;
      w) when=$OPTARG;;
      u) user=$OPTARG;;#not used here but allow for it not to crash
      v) verbose=$OPTARG;;
      \?) echo $0: invalid option >&2;echo "$usage" >&2;exit 1;;
   esac
done

#=================================================
# 4. Get the name of executable scripts
#=================================================
shift $(($OPTIND-1))
if [[ $# -eq 0 ]];then
   echo $0: missing executable name >&2;echo "$usage" >&2;exit 1
fi

exec=$1

if [[ ! -s $exec ]]&&which $exec >/dev/null 2>&1;then
   exec=$(which $exec)
fi

shift


#=================================================
# 5. Get all the parameters passed 
#    to the executable script above.
#=================================================
args="$*"

bn=$(basename $exec)

#=================================================
# 6. Build jobname and output from script 
#    name in case not being passed in as option
#=================================================
jobname=${jobname:-$bn}
output=${output:-$jobname.out}

#=================================================
# 7. Specify HOME as job card location and 
#    create an empty job card
#=================================================
DATA=~
cfile=$DATA/sub$$
> $cfile

#=================================================
# 8. Start to fill out job card based 
#    on option parameters passed 
#=================================================
# On badger, 
# -pe smp : node number 
# -N : job name
# -V : pass ENV variables
# -o : output file
echo "#!/bin/bash" >>$cfile
echo "#$ -pe smp $procs"  >>$cfile
echo "#$ -N $jobname" >>$cfile
echo "#$ -V" >>$cfile
echo "#$ -o $output"  >>$cfile
echo "source /etc/bashrc"  >>$cfile
echo "ulimit -v unlimited" >>$cfile
echo "$exec $args" >>$cfile

cat $cfile

#=================================================
# 9. Submit job
#=================================================
qsub $cfile

rc=$?
exit $rc
