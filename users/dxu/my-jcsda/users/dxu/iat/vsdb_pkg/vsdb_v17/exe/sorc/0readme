Binbin Zhou's version:  /meso/save/wx20bz/grid2grid/sorc.20070215
--------------------------------------------------------


===========================================================================
10/01/2012 Fanglin Yang
Russ,

--------
Follow-ups to the problem cited below:  
 a) stats on ZEUS have been recomputed locally on Zeus.  
 b) Mark Iredell indicated that the problem lies in the scaling of pi in the ip lib.
 c) solution: in getregion.f use region_latlon(1,n)=int(1000*rlat(n))/1000.0 and 
    region_latlon(2,n)=int(1000*rlon(n))/1000.0 to get accurate lat-lon values.
    This change is made on 23Feb2013.
--------

Thank you for bringing my attention to this discrepancy of GFS PWAT  between CCS and ZEUS.    
It turns out the difference is caused by an inconsistency of the "ip" library between the machines.

The grid-to-grid software uses Subroutine GDSWIZ included in the "ip" library to define lat-lon values of verifying grids.   
Most of the latitudinal  values obtained on CCS differ from those obtained on ZEUS.   For instance, on ZEUS lat=-20.000000 
comes out as -20.00000381.   I have tried double precision on CCS and still got this inaccurate value.    

As a result, the intended verification area of the tropics (20S, 20N) is missing all points at the 20S latitudinal 
circle on CCS.  It is likely that any program that uses the IP library to define latitudes will give different results 
between the CSS and Zeus/WCOSS.

The "ip" librarr I referred to is /nwprod/lib/sorc/ip on CCS and 
/scratch2/portfolios/NCEPDEV/global/save/Shrinivas.Moorthi/para/lib/sorc/ip on ZEUS.   
The source codes are actually identical.


For GFS parallel and ops verification, all VSDB verifying stats over the tropics have been 
erroneously computed on CCS over the 17.5S-20N belt instead of the intended 20S-20N belt.  
The difference is not negligible.  We need to have further discussion within the GFS group 
to decide 1) how to reconcile this   difference when forecast stats are compared across 
different platforms, and 2) how to correct the problem.  To the moment,  any users who 
compares GFS parallels or ops between CCS and ZEUS need to disregard all stats in the tropics. 


Regards,
Fanglin

-----------------------------------------------------------------
09/2011 George Gayno

The numbers did not look right.  For example, the global value of soil moisture is around .096 (unscaled).  That is very dry.  So I spent some time looking at how this field is calculated.  I found a couple of bugs in the grid2grid program.  The first is in routine readcntl.f when setting up the continue_mrk flag.  That flag is used later in routine sl1l2.f to ignore undefined points (ocean points, for example) during various calculations.  The problem is with this statement:

if(k5(n).eq.114.and.k6(n).eq.112) continue_mrk(n)=9  !Soil Moisture

For soil moisture, k5 is 144, not 114.  As a result, continue_mrk is not set properly.  So, later in routine sl1l2.f, undefined soil moisture points are used in calculations.

Correcting the 'if' statement, however, does not completely fix things.  Soil moisture is not only undefined at non-land points, but at land points that are permanently ice covered as well (Greenland, Antarctica).  At these permanent ice points, the soil moisture is really a flag value of '1'.  These points need to be screened as well.  So I created a special continue_mrk just for soil moisture.  Then in routine sl1l2.f, I added new 'if' statements to ignore these points during calculations.  

I ran some tests using prd12q3j files.  As you might expect, the soil moisture numbers are quite different. 

The modified routines - readcntl.f and sl1l2.f - are on stratus in /global/noscrub/wx20gg/soilm_fix.


-------------------------------------------

04/06/2007

1. Tests show weighting give smaller RMS than without weighting 
2. Changed weighting coefficient in grid2grid.f from cos(latitude)/max[cos(latitudes)] to cos(latitude), 
   add an array "weigh" to accumulte area_factor(i)=cos(latitude) in sal1l2.f, sl1l2.f, vl1l2.f, val1l2.f, fho.f and afho.f.  
3. in original grid2grid.f, area_factor(i) was wrong, missing pi=4.*datan(1.0d0)
4. In sl1l2.f, exclude bad and undefined values for partial sums. (for example, soil moisture is not defined over ocean)
5. In readcntl.f set mask to exclude undefined Soil values (0.0) over ocean points
        do n = 1, numvarbl
         if(k5(n).eq.11.and.k6(n).eq.112) continue_mrk(n)=9   !Soil Temperature
         if(k5(n).eq.114.and.k6(n).eq.112) continue_mrk(n)=9  !Soil Moisture
        enddo
    In sl1l2.f, continue_mrk(n)=9 is used to exclude ocean points 


----------------------------------------
01/31/2007

Fanglin,
 
     I just modified g2g sorc code including weighting for grid mesh 
for high latitude grids.This is particularly important for GFS.

 The method is multiplying a cosin weighting factor to each grid's 
contribution when accumulating the partial sum.  The weighting factor 
is computed as

      cos(latitude)/max[cos(latitudes)],

where max[cos(latitudes)] is the greatest value searched from whole 
domain grids.
 For global model, it is 1.0 ( latitude=0.0 at the equator)

The new code is in /meso/save/wx20bz/grid2grid/sorc.20070126

To run the new code, a new shell parameter "lat_weight" should be 
explored in top script and print it at the end of user control file as 
well. the lat_weight can be 
open and close if you want. For example,

explore lat_weight="yes"  # weighting
explore lat_weight="no"   # no weighting

Because I don't run GFS, please test the new code in your global 
verification. Thanks.
