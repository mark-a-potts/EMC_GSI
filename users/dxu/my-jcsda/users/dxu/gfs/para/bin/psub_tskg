#!/bin/sh
################################################################################
# This script submits parallel jobs.
# Usage: psub config cdate cdump cstep
# Imported variables:
#   CONFIG
#   CDATE
#   CDUMP
#   CSTEP
# Configuration variables:
#   PSLOT
#   USER
#   CUE2RUN
#   CUE2RUN1
#   CUE2RUN2
#   CUE2RUNO
#   CUE2RUNL
#   CUE_POST
#   CUE_AVRG
#   NUMPROCPREP
#   NUMPROCANAL
#   NUMPROCANGU
#   MANALhhddd (hh=00,06,12,18;ddd=gdas,gfs)
#   MFCSThhddd (hh=00,06,12,18;ddd=gdas,gfs)
#   CYINC
#   LEVSFCSThhddd
#   NUMPROCFCSThhddd
#   NUMPROCPOSThhddd
#   ckshSH (cksh=dump,etc)
#   RLIST
#   COMDMP
#   COMROT
#   NDATE
#   SUB
#   RUNLOG
#   PLOG
#   PCNE
#
#
# 2006-08-08  S. Bender - changed start time for gdas 00z from 0610Z to 0550Z and
#                         for gdas 12z from 2010Z to 1750Z to bring start times
#                         in line with current gdas dump times.
################################################################################
set -ux


################################################################################
# Validate arguments

export CDATE=${2:-${CDATE:?}}
export CDUMP=${3:-${CDUMP:?}}
export CONFIG=${1:-${CONFIG:?}}
export ACCOUNT=${ACCOUNT:-GFS-MTN}
[[ $(dirname $CONFIG) = . ]]&&CONFIG=$(pwd)/$CONFIG
if [[ ! -r $CONFIG ]];then
  echo $0: inaccessible configuration file $CONFIG >&2
  exit 4
fi
export CSTEP=${4:-${CSTEP:?}}
export CKSH=$(echo $CSTEP|cut -c-4)
export CKND=$(echo $CSTEP|cut -c5-)

set -a;. $CONFIG;set +a

NDATE=${NDATE:-/nwprod/util/exec/ndate}
if [[ $($NDATE 0 $CDATE) != $CDATE ]];then
  echo $0: invalid current date $CDATE >&2
  exit 4
fi

#export CDUMP=${3:-${CDUMP:?}}
if [[ $CDUMP != gdas && $CDUMP != gdas && $CDUMP != gfs ]];then
  echo $0: invalid current dump $CDUMP >&2
  exit 4
fi

################################################################################
# Set other variables

export SUB=${SUB:-/u/wx23sm/bin/sub}
export JOBSDIR=${JOBSDIR:-$SHDIR}
#export LLQU=${LLQU:-/u/wx20mi/bin/llqu}
export LLQU=${LLQU:-/u/wx23sm/bin/llqu}
export CCPOST=${CCPOST:-NO}
export USER=${USER:-$LOGNAME}
export GROUP=${GROUP:-"devonprod"}
export CUE2RUN=${CUE2RUN:-"dev"}
export CUE2RUN1=${CUE2RUN1:-"1/R"}
export CUE2RUN2=${CUE2RUN2:-$CUE2RUN}
export CUE2RUNO=${CUE2RUNO:-$CUE2RUN}
export CUE2RUNL=${CUE2RUNL:-$CUE2RUN2}
export CYINC=${CYINC:-06}
export PLOG=${PLOG:-$SHDIR/plog}
export PCNE=${PCNE:-$SHDIR/pcne}
export PMKR=${PMKR:-$SHDIR/pmkr}
export task_geometry=${task_geometry:-$SHDIR/task_geometry}
export GDATE=$($NDATE -$CYINC $CDATE)
export CDFNL=${CDFNL:-gdas}
export GDUMP=${GDUMP:-$CDFNL}
COMDMPTMP=${COMDMPTMP:-${COMDMP:-""}}
COMCOPTMP=${COMCOPTMP:-${COMCOP:-$COMDMPTMP}}
COMROTTMP=${COMROTTMP:-${COMROT:-""}}
COMDAYTMP=${COMDAYTMP:-${COMDAY:-$COMROTTMP}}
eval export COMDMP=$COMDMPTMP
eval export COMCOP=$COMCOPTMP
eval export COMROT=$COMROTTMP
eval export COMDAY=$COMDAYTMP
#
#[[ -n ${COMDMPTMP:-""} ]]&&eval export COMDMP=$COMDMPTMP
#[[ -n ${COMROTTMP:-""} ]]&&eval export COMROT=$COMROTTMP
#eval export COMDMP=$COMDMP
#eval export COMROT=$COMROT
#eval export COMCOP=$COMCOP
#export COMDAY=${COMDAY:-$COMROT}
#
cycle=$(echo $CDATE|cut -c9-10)
cdump=$(echo $CDUMP|tr '[a-z]' '[A-Z]')
eval manal=\${MANAL$cycle$cdump:-1}
eval mfcst=\${MFCST$cycle$cdump:-1}
eval moanl=\${MOANL$cycle$cdump:-1}
eval mlanl=\${MLANL$cycle$cdump:-0}
eval mavrg=\${MAVRG$cycle$cdump:-0}

memory_node=${memory_node:-105000}

################################################################################
# Set prerequisites and submit parameters based on script name

# [[ -s $RLIST ]]||$PMKR >$RLIST
#if [[ ! -s $RLIST ]] ; then
# $PMKR >$RLIST
##if [[ $ARCHIVE = YES ]] ; then cat $SHDIR/append.rlist >> $RLIST ; fi
# if [[ $ARCHIVE = YES ]] ; then cat $SHDIR/append.rlist_new >> $RLIST ; fi
#fi

string="#"

case $CKSH in

copy)
  [[ -s $RLIST ]]||$PMKR >$RLIST
  if [[ -z $CKND ]];then CKND=fcst1;CSTEP=$CKSH$CKND;fi
  prereqs="true"
  cue2run=$CUE2RUN
  numproc="1/1/N"
  re="1600/32"
  np=$numproc
  timelim=1:00:00
  whenrun=+0000
;;

dump)
  prereqs="true"
  cue2run=$CUE2RUN1
  numproc="1/1"
  re="1600/1"
  np=$numproc
  timelim=4:00:00
  case $CDUMP in
  gfs)
    case $(echo $CDATE|cut -c9-10) in
      00) whenrun=$(echo $CDATE|cut -c1-8)0250;;
      06) whenrun=$(echo $CDATE|cut -c1-8)0850;;
      12) whenrun=$(echo $CDATE|cut -c1-8)1450;;
      18) whenrun=$(echo $CDATE|cut -c1-8)2050;;
    esac
  ;;
  $CDFNL)
    case $(echo $CDATE|cut -c9-10) in
      00)whenrun=$(echo $CDATE|cut -c1-8)0550;;
      06)whenrun=$(echo $CDATE|cut -c1-8)1150;;
      12)whenrun=$(echo $CDATE|cut -c1-8)1750;;
      18)whenrun=$(echo $CDATE|cut -c1-8)2350;;
    esac
  ;;
  esac
;;

dcop)
  prereqs="[[ $CDATE = ????????00 ]]"
  cue2run=$CUE2RUN1
  numproc="1/1"
  re="1600/1"
  np=$numproc
  timelim=4:00:00
  whenrun=+0000
;;

prep)
  npe_node=${npe_node_pr:-32}
  prereqs="[[ $manal -gt 0  ]]"
  cue2run=$CUE2RUN
  nthreads=${NTHRPREP:-2}
  numproc=${NUMPROCPREP:-$((npe_node/nthreads))}
# nthreads=${NTHRPREP:-2}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  np="$numproc/$nodes/N"
  re="$((memory_node*nthreads/npe_node))/$nthreads"
  timelim=${TIMELIMPREP:-1:00:00}
  whenrun=+0000
;;

anal)
  npe_node=${npe_node_a:-16}
  prereqs="[[ $manal -gt 0 ]]"
  cue2run=$CUE2RUN
# numproc=${NUMPROCANAL:-"$(($JCAP/2+3))"}
  numproc=$(eval echo \${NUMPROCANAL$cdump:-${NUMPROCANAL:-"$(($JCAP/2+3))"}})
  nthreads=${NTHREADS_GSI:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  np="$numproc/$nodes/N"
  re="$((memory_node*nthreads/npe_node))/$nthreads"
  timelim=${TIMELIMANAL:-1:00:00}
  whenrun=+0000
  string="#@ parallel_threads = $nthreads"
;;

angu)
  npe_node=${npe_node_ang:-32}
  prereqs="[[ $manal -gt 0 ]]"
  cue2run=$CUE2RUN
  numproc=$(eval echo \${NUMPROCANGU$cdump:-${NUMPROCANGU:-64}})
  nthreads=${NTHREADS_ANG:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  np="$numproc/$nodes/N"
  re="$((memory_node*nthreads/npe_node))/$nthreads"
  timelim=${TIMELIMANGU:-1:00:00}
  whenrun=+0000
;;

oanl)
  npe_node=${npe_node_o:-32}
  prereqs="[[ $moanl -gt 0 ]]"
  cue2run=$CUE2RUNO
  numproc=$(eval echo \${NUMPROCOANL$cdump:-${NUMPROCOANL:-$npe_node}})
  nthreads=${NTHROANL:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  np="$numproc/$nodes/N"
  re="$((memory_node*nthreads/npe_node))/$nthreads"
  timelim=${TIMELIMANAL:-1:00:00}
  whenrun=+0000
;;

lanl)
  npe_node=${npe_node_l:-16}
  prereqs="[[ $mlanl -gt 0 ]]"
  cue2run=$CUE2RUNL
  numproc=$(eval echo \${NUMPROCLANL$cdump:-${NUMPROCLANL:-16}})
  numproc=1
  nthreads=${NTHRLANL:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  np="$numproc/$nodes/N"
  re="$((memory_node*nthreads/npe_node))/$nthreads"
  timelim=${TIMELIMANAL:-1:30:00}
  whenrun=+0000
;;

fcst)
  npe_node=${npe_node_f:-32}
  npe_node_om=${npe_node_om:-$npe_node}
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
# cue2run=$CUE2RUN
  cue2run=$(eval echo \${Q2RUNFCST$cycle$cdump:-$CUE2RUN}|cut -f$nknd -d,)
  numproc=$(eval echo \${NUMPROCFCST$cycle$cdump:-$((JCAP/2))}|cut -f$nknd -d,)
  numproc=${numproc:-$((JCAP/2))}
  nthreads=$(eval echo \${NTHRFCST$cycle$cdump:-$nth_f1}|cut -f$nknd -d,)
  if [ $COUP_FCST = YES ] ; then
    numproco=$(eval echo \${NPROCOFCST$cycle$cdump:-62}|cut -f$nknd -d,)
    numproco=$((numproco+1))         # one pe for the coupler
    if [ $nthreads -gt 2 ] ; then TASK_GEO=YES ; fi
  else
    numproco=0
  fi
  pefac=$((npe_node/npe_node_om))
  if [ $liope = .true. ] ; then
    nodes=$((((1+numproco)*pefac+(numproc-numproco-1)*nthreads)/npe_node))
#   if [ $numproc -gt $(((1+numproco)*pefac+(nodes*npe_node-(numproco+1)*pefac)/nthreads)) ] ; then
#    export nodes=$((nodes+1))
#   fi
  else
    nodes=$(((numproco*pefac+(numproc-numproco)*nthreads)/npe_node))
#   nodes=$(((numproco*2+(numproc-numproco)*nthreads)/npe_node))
#   if [ $numproc -gt $((numproco+(nodes*npe_node-numproco*2)/nthreads)) ] ; then
#    export nodes=$((nodes+1))
#   fi
  fi
  np="$numproc/$nodes/N"
  if [ $TASK_GEO = YES ] ; then np=${np}TgtUsr ; fi
  re="$((memory_node*nthreads/npe_node))/$nthreads"
  timelim=$(eval echo \${TIMELIMFCST$cycle$cdump:-3:00:00}|cut -f$nknd -d,)
  timelim=${timelim:-4:00:00}
# whenrun=+0000
  whenrun=+$(eval echo \${fcst_delay_$nknd:-0000})
;;

post)
  npe_node=${npe_node_po:-32}
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=${CUE_POST:-${CUE2RUN2:-1}}
  numproc=$(eval echo \${NUMPROCPOST$cycle$cdump:-16}|cut -f$nknd -d,)
# numproc=$(eval echo \${NUMPROCPOST$cycle$cdump:-8}|cut -f$nknd -d,)
# numproc=$(eval echo \${NUMPROCPOST$cycle$cdump:-4}|cut -f$nknd -d,)
  numproc=${numproc:-32}
  nthreads=${NTHRPOST:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-105000}
  if [ ${POST_SHARED:-YES} = YES ] ; then
    np="$numproc/1"
    re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads"
  else
    np="$numproc/$nodes/N"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
  fi
  timelim=$(eval echo \${TIMELIMPOST$cycle$cdump:-2:30:00}|cut -f$nknd -d,)
  timelim=${timelim:-4:00:00}
  if [[ $CCPOST = YES ]];then
    whenrun=+$(eval echo \${post_delay_$nknd:-0000})
  else
    whenrun=+0000
  fi
;;

chkp)
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
# prereqs="true"
  cue2run=$CUE2RUN1
  numproc="1/1"
  re="1000/1"
  np=$numproc
  timelim=48:00:00
  whenrun=+0000
;;

vrfy)
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
# prereqs="true"
  cue2run=$CUE2RUN1
  numproc="1/1"
  re="20000/1"
  np=$numproc
  timelim=3:00:00
  whenrun=+$(eval echo \${vrfy_delay_$nknd:-0000})
;;

arch)
  prereqs="true"
  cue2run=$CUE2RUN1
  numproc="1/1"
  re="1000/1"
  np=$numproc
  timelim=4:00:00
  whenrun=+0000
;;

avrg)
  npe_node=${npe_node_av:-32}
  prereqs="[[ $mavrg -gt 0 ]]"
  cue2run=${CUE_AVRG:-${CUE2RUN:-1}}
  numproc=$(eval echo \${NUMPROCAVRG$cdump:-${NUMPROCAVRG:-32}})
  nthreads=${NTHRAVRG:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-105000}
  if [ ${AVRG_SHARED:-YES} = YES ] ; then
    np="$numproc/1"
    re="${AVRG_MEMORY:-$((memory_node/npe_node))}/$nthreads"
  else
    np="$numproc/$nodes/N"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
  fi
  timelim=${TIMELIMAVRG:-3:00:00}
  whenrun=+0000
;;

d3dp)
  npe_node=${npe_node_po:-32}
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=${CUE_POST:-${CUE2RUN2:-1}}
  numproc=$(eval echo \${NUMPROCPOST$cycle$cdump:-16}|cut -f$nknd -d,)
  numproc=${numproc:-32}
  nthreads=${NTHRPOST:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-105000}
  if [ ${POST_SHARED:-YES} = YES ] ; then
    np="$numproc/1"
    re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads"
  else
    np="$numproc/$nodes/N"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
  fi
  timelim=$(eval echo \${TIMELIMPOST$cycle$cdump:-3:00:00}|cut -f$nknd -d,)
  timelim=${timelim:-3:00:00}
  whenrun=+0000
;;

##GOCART#####################################
g3dp)
  npe_node=${npe_node_po:-32}
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=${CUE_POST:-${CUE2RUN2:-1}}
  numproc=$(eval echo \${NUMPROCPOST$cycle$cdump:-16}|cut -f$nknd -d,)
  numproc=${numproc:-32}
  nthreads=${NTHRPOST:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-105000}
  if [ ${POST_SHARED:-YES} = YES ] ; then
    np="$numproc/1"
    re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads"
  else
    np="$numproc/$nodes/N"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
  fi
  timelim=$(eval echo \${TIMELIMPOST$cycle$cdump:-3:00:00}|cut -f$nknd -d,)
  timelim=${timelim:-3:00:00}
  whenrun=+0000
;;

#######################################
ocnp)
  npe_node=${npe_node_ocnp:-16}
  prereqs="true"
  nknd=${CKND:-1}
  cue2run=$CUE2RUN1
  numproc=$(eval echo \${NUMPROCOCNP$cdump:-${NUMPROCOCNP:-16}})
  nthreads=${NTHROCNP:-1}
  nodes=$((numproc*nthreads/npe_node))
  if [ $numproc -gt $((nodes*npe_node/nthreads)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-10500}
  if [ ${OCNP_SHARED:-YES} = YES ] ; then
    np="$numproc/1"
    re="${OCNP_MEMORY:-$((memory_node/npe_node))}/$nthreads"
  else
    np="$numproc/$nodes/N"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
  fi
  timelim=$(eval echo \${TIMELIMPOST$cycle$cdump:-3:00:00}|cut -f$nknd -d,)
  timelim=${timelim:-3:00:00}
  if [[ $CCPOST = YES ]];then
    whenrun=+$(eval echo \${ocnp_delay_$nknd:-0000})
  else
    whenrun=+0000
  fi
;;

esac

################################################################################
# Check prerequisites
#
# Note about prerequisites check for the CSTEP/CKSH=dump step (10/26/06 SMB):
#
#   Although prereqs is set to true above for the dump step, the dump
#   step actually requires no prerequisites.  It is the first step to run in
#   the system.  The reason that prereqs="true" for the dump step is to avoid
#   exiting this psub script with the following lines:
#
#       else
#         echo $0: IN prerequisites not satisfied for step $CSTEP >&2
#         exit 1
#       fi
#
#    which appear several lines past this long-winded comment.
#
#    In more detail, the $PCNE script will run for the dump step and check for
#    "prerequisite files."  In other words, the $PCNE script will check for
#    files listed on the RHS of each line in the dump*.rlist files where the
#    LHS includes "DMRI" or "ROTI."  However, since there are no DMRI or ROTI
#    occurrences in the dump*.rlist files, there are no files that are really
#    considered prerquisites for the dump step, despite the fact that prereqs
#    is set to true for the dump step.  The $PCNE script will actually not
#    perform any "test -r" commands on any files that are considered
#    "prerequisites" because it only runs "test -r" on files that are
#    referenced by "DMRI" or "ROTI" on the LHS of the line in dump*.rlist.  The
#    $PCNE script will still send back a return code of zero after checking for#    "prerequisite" files for the dump step because no "test -r" commands are
#    executed.  A non-zero return code will be returned by $PCNE only if any
#    files that DO have "DMRI" or "ROTI" listed on the LHS are not readable
#    ("test -r" fails on those files).  Alternatively, $PCNE will send back a
#    non-zero return code if actual, true prerequisite files are missing for a
#    step other than CSTEP/CKSH-dump.
# -----------------------------------------------------------------------------

if [[ $CDATE -gt $EDATE || $CDATE$CDUMP$CSTEP = $EDATE$EDUMP$ESTEP ]];then
  echo $0: end of experiment reached >&2
  exit 1
elif eval $prereqs;then
  $PCNE $CDATE/$CDUMP/$CSTEP/DMRI $COMDMP <$RLIST
  rc=$?
# $PCNE $CDATE/$CDUMP/$CSTEP/ROTI $COMROT <$RLIST
  ((rc+=$?))
  if [[ $rc -eq 0 ]];then
    echo $0: all prerequisites satisfied for step $CSTEP >&2
  else
    echo $0: RS prerequisites not satisfied for step $CSTEP >&2
    exit 1
  fi
else
  echo $0: IN prerequisites not satisfied for step $CSTEP >&2
  exit 1
fi

################################################################################
# Submit job

en=CONFIG,CDATE,CDUMP,CSTEP
jn=$PSLOT$CDATE$CDUMP$CSTEP
df=$COMDAY/$jn.dayfile
NEW_DAYFILE=${NEW_DAYFILE:-NO}
if [ $NEW_DAYFILE = YES ] ; then
####GOCART#### if [ $CKSH = fcst -o $CKSH = post -o $CKSH = ocnp -o $CKSH = d3dp ] ; then
  if [ $CKSH = fcst -o $CKSH = post -o $CKSH = ocnp -o  $CKSH = d3dp -o $CKSH = g3dp ] ; then
  ls -l $COMDAY/${jn}*.dayfile > $COMDAY/tem
  nn=`cat $COMDAY/tem | wc -l`
  ((nn+=0))
# nn=$nn
  while [ -s $COMDAY/${jn}_$nn.dayfile ] ; do nn=$((nn+1)) ; done
  echo $nn
  rm $COMDAY/tem
  df=$COMDAY/${jn}_$nn.dayfile
 fi
fi
qn=$cue2run
gr=$GROUP
#np=$numproc
tl=$timelim
us=$USER
wr=$whenrun
ac=$ACCOUNT
if [ $qn = res ] ; then
 string="$string \n#@ preferences = (Feature == \"prodnode\")"
fi
eval job=\${$(echo $CKSH|tr '[a-z]' '[A-Z]')SH:-$JOBSDIR/$CKSH.sh}
#if $LLQU $us|grep $jn;then
if $LLQU $us|grep -v RP|grep $jn;then
  $PLOG "$RUNLOG" NOTE "$jn already queued or running"
else
  if [ ${TASK_GEO:-NO} = NO ] ; then
    echo $string | $SUB -i -a $ac -e $en -g $gr -j $jn -o $df -p $np -q $qn -r $re -t $tl -u $us -w $wr $job
  else
    echo $string | $SUB -i -a $ac -e $en -g $gr -j $jn -o $df -p $np -q $qn -r $re -t $tl -u $us -w $wr $job < $task_geometry
  fi
  if [[ $? -ne 0 ]];then
    $PLOG "$RUNLOG"  NOTE "$jn submit failure"
    sleep 60
    if $LLQU $us|grep $jn;then
      $PLOG "$RUNLOG" NOTE "$jn already queued"
    else
      if [ ${TASK_GEO:-NO} = NO ] ; then
        echo $string | $SUB -i -a $ac -e $en -g $gr -j $jn -o $df -p $np -q $qn -r $re -t $tl -u $us -w $wr $job
      else
        echo $string | $SUB -i -a $ac -e $en -g $gr -j $jn -o $df -p $np -q $qn -r $re -t $tl -u $us -w $wr $job < $task_geometry
      fi
      if [[ $? -ne 0 ]];then
        $PLOG "$RUNLOG" ERROR "$jn submit failure"
        exit 8
      fi
      $PLOG "$RUNLOG" OK "$jn submitted"
    fi
  else
    $PLOG "$RUNLOG" OK "$jn submitted"
  fi
fi
exit
