This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by libpng configure 1.2.34, which was
generated by GNU Autoconf 2.62.  Invocation command line was

  $ ./configure --disable-shared

## --------- ##
## Platform. ##
## --------- ##

hostname = c2n6.ncep.noaa.gov
uname -m = 00C885E24C00
uname -r = 3
uname -s = AIX
uname -v = 5

/usr/bin/uname -p = powerpc
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = 5.3.0.0
/bin/universe          = unknown

PATH: /usr/bin
PATH: /etc
PATH: /usr/sbin
PATH: /usr/vac/bin
PATH: /usr/ucb
PATH: /home/nwprod/bin
PATH: /usr/bin/X11
PATH: /sbin
PATH: /usr/lpp/LoadL/full/bin
PATH: .
PATH: /gpfs/b/nco/dbnet/bin
PATH: /usrx/local/hpss/non-dce/utilities/bin
PATH: /usrx/local/hpss/bin
PATH: /usr/vacpp/bin
PATH: /usr/vac/bin
PATH: /usr/vacpp/bin
PATH: /home/nwprod
PATH: /home/nwprod/compiler
PATH: /usrx/local/svn/bin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2091: checking for a BSD-compatible install
configure:2159: result: ./install-sh -c
configure:2170: checking whether build environment is sane
configure:2213: result: yes
configure:2238: checking for a thread-safe mkdir -p
configure:2277: result: ./install-sh -c -d
configure:2290: checking for gawk
configure:2306: found /usr/bin/gawk
configure:2317: result: gawk
configure:2328: checking whether make sets $(MAKE)
configure:2350: result: yes
configure:2538: checking whether to enable maintainer-specific portions of Makefiles
configure:2547: result: no
configure:2620: checking for gcc
configure:2647: result: /usr/vacpp/bin/xlC_r
configure:2885: checking for C compiler version
configure:2893: /usr/vacpp/bin/xlC_r --version >&5
/usr/vacpp/bin/xlC_r: 1501-216 (W) command option --version is not recognized - passed to ld



  xlc(1)                     IBM (2008)                      xlc(1)



  NAME
         xlc, xlc++, xlC, cc, c89, c99, xlCcore, xlc++core and
         related commands - invoke the IBM XL C/C++ compiler.


  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...


  DESCRIPTION
         The invocation commands compile C and C++ source files.
         The commands and their recommended uses are described
         below.

         Invocations                   Usage (supported standards)
         _________________________________________________________

         xlc, xlc_r, xlc_r4,           Compile C source files.
         xlc_r7, xlc128, xlc128_r,     (ANSI C89, ISO C99,
         xlc128_r4, xlc128_r7          IBM language extensions)

         xlc++, xlc++_r, xlc++_r4,     Compile C++ source files.
         xlc++_r7, xlc++128,
         xlc++128_r, xlc++128_r4,
         xlc++128_r7, xlC, xlC_r,
         xlC_r4, xlC_r7, xlC128,
         xlC128_r, xlC128_r4,
         xlC128_r7

         cc, cc_r, cc_r4, cc_r7,       Compile legacy code that
         cc128, cc128_r, cc128_r4,     does not conform to Standard
         cc128_r7                      C. (pre-ANSI C)

         c89, c89_r, c89_r4,           Compile C source files with
         c89_r7, c89_128, c89_128_r,   strict conformance to the
         c89_128_r4, c89_128_r7        C89 standard. (ANSI C89)

         c99, c99_r, c99_r4,           Compile C source files with
         c99_r7, c99_128, c99_128_r,   strict conformance to the
         c99_128_r4, c99_128_r7        C99 standard. (ISO 99)

         xlc++core, xlc++core_r,       Compile C++ source files
         xlc++core_r7, xlc++core128,   but the compiler will
         xlc++core128_r,               link only to the core of
         xlc++core128_r7, xlCcore,     the runtime library.
         xlCcore_r, xlCcore_r7,
         xlC128core, xlC128core_r,
         xlC128core_r7

         gxlc                          Accepts GNU C options, maps
                                       them to their equivalent XL
                                       C option, then invokes xlc.

         gxlc++, gxlC                  Accepts GNU C/C++ options, maps
                                       them to their equivalent XL
                                       C++ option,then invokes xlc++.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/vac.cfg.XX, where XX represents
         the AIX version).
         See the Compiler Reference for more information on these
         invocation commands.

         All invocations with a suffix of _r allow for thread-safe
         compilation. Use these commands to create threaded
         applications or to link programs that use multi-threading.

         These commands also process assembler source files and
         object files. The compiler calls the link editor to
         produce a single executable or shared library, unless you
         specify the compiler options that prevent object files
         from being linked.

         The input file may have any of the following suffixes:

          .C, .cpp, .cxx,    C++ source file
          .cc, .cp, .c++

          .c                 C source file

          .i                 Preprocessed C or C++ source file

          .a                 Archive file

          .o                 Object file for ld command

          .s                 Assembler source file

          .S                 Assembler source file that
                             needs preprocessing

          .so                Shared object file


  OPTIONS
         Compiler options are categorized by their functions and
         may be used to set the compiler behavior. Options can be
         flag options or keyword options.

         Keyword options are specified in one of the following
         ways:
         -q<option>
         -q<option>=<suboption>
         -q<option>=<suboption>:<suboption>

         Keyword options with no suboptions represent switches that
         may be either on or off. -qx turns the switch on, and
         -qnox turns the switch off. For example, -qsource tells
         the compiler to produce a source listing and -qnosource
         tells the compiler not to produce a source listing.

  Output control options
         -c     Instructs the compiler to pass source files to the
                compiler only. The compiled source files are not
                sent to the linker. This option produces an object
                file, file_name.o, for each valid source file.

         -C | -C!
                Preserves or removes comments in preprocessed
                output.
                When -C is used with the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.
                When -C! is in effect, comments are removed.

         -E     Instructs the compiler to preprocess the source
                files named in the compiler invocation and creates
                an output preprocessed source file.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file.
                Specifying -qmakedep without 'gcc' is equivalent to
                specifying -M.

         -MF<path>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <path> can be a
                full directory path or file name. Note that "-MF
                <path>" (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         (C)-qmkshrobj, (C++)-qmkshrobj[=<priority>]
                Creates a shared object from the generated object
                files.
                The optional number specifies the priority level
                for initialization of all static objects in the
                file. <priority> may be any number from -214782623
                (highest priority-initialized first) to 214783647
                (lowest priority-initialized last). If no priority
                is specified, the default priority of 0 is used.
                The priority is not used when linking shared
                objects (using the xlc command) written in C.
                Specifying -qmkshrobj implies -qpic.
                See related options, -e <name> and -o <path>.

         -o <path>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <path> can be the name of
                either a file or a directory.

                Default: -o a.out

         -P     Preprocesses the C or C++ source files named in the
                compiler invocation and creates an output
                preprocessed source file for each input source
                file. The preprocessed output file has the same
                name as the output file, with a .i suffix.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -qshowmacros[=<suboptions_list>] | -qnoshowmacros
                Emits macro definitions to preprocessed output.

                This option has no effect unless preprocessed
                output is generated.  If a macro is defined and
                subsequently undefined before compilation ends,
                this macro will not be included in the preprocessed
                output.

                Default: -qnoshowmacros

                <suboptions_list> is a colon-separated list of one
                or more of the following:

                all
                     -qshowmacros=all appends all macro definitions
                     to preprocessed output.  This is the same as
                     specifying -qshowmacros.
                pre | nopre
                     -qshowmacros=pre appends only predefined macro
                     definitions to preprocessed output.
                     -qshowmacros=nopre suppresses appending these
                     definitions.
                     Only macros defined internally by the
                     preprocessor are considered predefined; all
                     other macros are considered as user-defined.

         -qtimestamps | -qnotimestamps
                Controls whether or not implicit time stamps are
                inserted into an object file.

                This option does not affect time stamps inserted by
                pragmas and other explicit mechanisms.
                Default: -qtimestamps

  Input control options
         -+     (C++) Compiles any file, <file_name.nnn>, as a C++
                language file, where <nnn> is any suffix other than
                .a, .so, .o, .s, or .S.  This option is equivalent
                to the -qsourcetype=c++ option and should not be
                used together with the -qsourcetype option.

         -qcinc=<directory_path> | -qnocinc
                (C++) Instructs the compiler to place an extern "C"
                { } wrapper around the contents of an include file,
                where <directory_path> is the location of that
                include file.

                Default: -qnocinc

         -I<directory_path>
                Specifies an additional search path for include
                file names that do not specify an absolute path.

                Default:
                     The following directories are searched, in the
                     following order, after any paths that are
                     specified by the -I option:
                     1) The current directory.
                     2) The directory where the source file is
                     located.
                     3) /usr/include.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<file_name>" directive. Use
                -qidirfirst with the -I option. If -qidirfirst is
                specified, the directories specified by the
                -I<directory_path> option are searched before the
                directory in which the current file resides.

                Default: -qnoidirfirst

         -qinclude=<file_path>
                Specifies additional header files that are included
                before the first line of a source file in a
                compilation unit and ahead of any headers which may
                be specified by an #include statement on the first
                line of the source file.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of file name suffix), or
                whether to use the file name suffix to determine
                the programming language.
                Note that the option only affects files that are
                specified on the command line following the option,
                but not those that precede the option. The
                -qsourcetype option should not be used together
                with the -+ option. The suboptions are:

                default
                     The compiler assumes that the programming
                     language of a source  file will be implied by
                     its file name suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are assembler
                     language source files that need preprocessing.

                Default: -qsourcetype=default

         -qstdinc | -qnostdinc
                Specifies whether the standard directories are
                searched for files included by the #include
                <file_name> and #include "file_name" directives.
                The -qnostdinc option excludes the standard include
                directories from the search path.

                Default: -qstdinc

  Language element control options
         -qaltivec | -qnoaltivec
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by the -qarch option supports vector
                instructions and -qenablevmx is enabled.

                Default: -qnoaltivec

         -qasm[=<sub>] | -qnoasm[=<sub>]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.
                In (C), <sub> can only be 'gcc'.
                In (C++), <sub> can be:
                gcc
                     Interprets asm statements using GCC syntax.
                stdcpp
                     Interprets asm statements using stdcpp syntax.

                Default:
                     (C++) -qnoasm=stdcpp in compat366 or strict98
                     modes, and -qasm=gcc otherwise.
                     (C) -qasm=gcc

         -qcpluscmt | -qnocpluscmt
                (C) Permits the usage of "//" to introduce a
                comment that lasts until the end of the current
                source line, as in C++.

                Default:
                     o -qcpluscmt when you invoke the compiler with
                     xlc, xlc_r, cc, or cc_r, or when -qlanglvl is
                     set to stdc99 or extc99
                     o -qnocpluscmt otherwise

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying -D<name>= (with no <def>) is
                equivalent to #define <name>; specifying
                -D<name> is equivalent to #define <name> 1.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.

                Default: -qnodbcs

         -qdfp | -qnodfp
                Enables compiler support for decimal floating-point
                types and literals.

                Default: -qnodpf

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.

                Default:
                     (C) -qdigraph when -qlanglvl is extc89,
                     extended, extc99 or stdc99, and -qnodigraph
                     otherwise.
                     (C++) -qdigraph

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both enabled, the dollar symbol
                is treated as an extended character.

                Default: -qnodollar

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements. The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated_call
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     (C) Ignores all #pragma ibm snapshot
                     directives and all IBM SMP directives in the
                     source file.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.
                By default, all the built-in keywords defined in
                the C and C++ language standards are reserved as
                keywords. You cannot add keywords to the language
                with this option. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

                (C) This option can also be used with the following
                C keywords: restrict, typeof, asm and inline.
                (C++) This option can be used with all C++ built-in
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.

                (C) For C language programs, <suboptions_list> is
                {classic|extended|saa|saa12|stdc89|stdc99|extc89|extc99}:
                {ucs|noucs}.

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA C CPI
                     language definition. This is currently SAA C
                     Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This suboption controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.
                     Default:
                       o -qlanglvl=ucs under language levels stdc99
                       and extc99.
                       o -qlanglvl=noucs for all other language
                       levels.

                (C++) The suboptions for C++ language programs are:
                compat366
                     Compilation conforms to some, but not all, IBM
                     C and C++ Compilers V3.6 features.
                extended
                     Compilation is based on strict98, with some
                     differences to accommodate extended language
                     features.
                extended0x
                     Compilation is based on the IBM implementation
                     of the draft C++0x standard.  Currently this
                     includes new integer promotion rules for
                     arithmetic conversions with "long long" data
                     types and enhanced C++ preprocessor support
                     for C99 features.  See the "XL C/C++ Language
                     Reference" and "Getting Started with XL C/C++"
                     for more information.

                     Note that the C++0x standard is temporary and
                     has not been officially adopted in its
                     entirety. It is subject to change.
                strict98
                     Compilation conforms to the ISO C++ standard
                     for C++ programs.
                anonstruct | noanonstruct
                     This suboption controls whether anonymous
                     structs and anonymous classes are allowed in
                     your C++ source. By default, the compiler
                     allows anonymous structs.
                anonunion | noanonunion
                     This suboption controls what members are
                     allowed in anonymous unions. When this
                     suboption is set to anonunion, anonymous
                     unions can have members of all types that
                     standard C++ allows in non-anonymous unions.
                ansifor | noansifor
                     This suboption controls whether scope rules
                     defined in the C++ standard apply to names
                     declared in for-init statements. By default,
                     standard C++ rules are used.
                ansisinit | noansisinit
                     This suboption can be used to select between
                     old (v3.6 or earlier) and current (v5.0 or
                     later) compiler object compatibility.
                c99__func__ | noc99__func__
                     This suboption instructs the compiler to
                     recognize the C99 __func__ identifier.
                     The c99__func__ suboption is enabled by
                     default when -qlanglvl=extended is enabled. It
                     can be enabled for any language level by
                     specifying -qlanglvl=c99__func__, or disabled
                     by specifying -qlanglvl=noc99__func__.
                c99complex | noc99complex
                     This suboption instructs the compiler to
                     recognize C99 complex data types and related
                     keywords. It is set by default for
                     -qlanglvl=extended.
                c99complexheader | noc99complexheader
                     This suboption instructs the compiler to use
                     the C99 complex.h header file.
                c99compoundliteral | noc99compoundliteral
                     This suboption instructs the compiler to
                     support the C99 compound literal feature. It
                     is set by default for -qlanglvl=extended.
                c99hexfloat | noc99hexfloat
                     This suboption enables support for C99-style
                     hexadecimal floating constants in C++
                     applications. It is on by default for
                     -qlanglvl=extended.
                c99vla | noc99vla
                     When c99vla is enabled, the compiler will
                     support the use of C99-type variable length
                     arrays in your C++ applications. It is set by
                     default for -qlanglvl=extended.
                compatzea | nocompatzea
                     The -qlanglvl=compatzea option is a
                     compatibility option that lets you continue to
                     use a zero extent array with dimension of 1.
                     Default: -qlanglvl=nocompatzea
                     Specifying -qlanglvl=compatzea has effect only
                     if -qlanglvl=zeroextarray is also enabled.
                dependentbaselookup | nodependentbaselookup
                     Provides the ability to specify compilation in
                     conformance with issue 213 of TC1 of the C++
                     standard.
                     Default: -qlanglvl=dependentbaselookup
                gnu_assert | nognu_assert
                     Enables or disables support for the following
                     GNU C system identification assertions:
                     '#assert', '#unassert', '#cpu', '#machine',
                     '#system'.
                gnu_complex | nognu_complex
                     This suboption instructs the compiler to
                     recognize GNU complex data types and related
                     keywords.
                gnu_computedgoto | nognu_computedgoto
                     Enables support for computed gotos. This
                     suboption is enabled for -qlanglvl=extended.
                gnu_explicitregvar | nognu_explicitregvar
                     (C) Allows you to control whether the compiler
                     accepts and ignores the specification of
                     explicit registers for variables.
                gnu_externtemplate | nognu_externtemplate
                     This suboption enables or disables extern
                     template instantiations.
                     Default:
                       gnu_externtemplate is enabled by default
                       when compiling to the extended language
                       level.
                gnu_include_next | nognu_include_next
                     Enables or disables support for the GNU C
                     #include_next preprocessor directive.
                     Default:
                       gnu_include_next is enabled by default for
                       -qlanglvl=extended.
                gnu_labelvalue | nognu_labelvalue
                     Enables or disables support for labels as
                     values.
                     Default:
                       gnu_labelvalue is enabled by default for
                       -qlanglvl=extended.
                gnu_locallabel | nognu_locallabel
                     Enables or disables support for locally-
                     declared labels.
                gnu_membernamereuse | nognu_membernamereuse
                     Enables or disables reusing a template name in
                     a member list as a typedef.
                gnu_suffixij | nognu_suffixij
                     Enables or disables support for GCC style
                     complex numbers. If gnu_suffixij is specified,
                     a complex number can be ended with suffix i/I
                     or j/J.
                     Default:
                       gnu_suffixij is enabled by default for
                       -qlanglvl=extended.
                gnu_varargmacros | nognu_varargmacros
                     This option is similar to
                     -qlanglvl=varargmacros. For the list of the
                     main differences, refer to the Compiler
                     Reference.
                     Default:
                       gnu_varargmacros is set by default for
                       -qlanglvl=extended.
                gnu_warning | nognu_warning
                     Enables or disables support for the GNU C
                     #warning preprocessor directive.
                illptom | noillptom
                     This suboption controls what expressions can
                     be used to form pointers to members. C/C++ can
                     accept some forms that are in common use, but
                     do not conform to the C++ standard. The
                     compiler allows these forms by default.
                implicitint | noimplicitint
                     This suboption controls whether the compiler
                     will accept missing or partially specified
                     types as implicitly specifying 'int'. This is
                     no longer accepted in the standard but may
                     exist in legacy code.
                     With the suboption set to noimplicitint, all
                     types must be fully specified.
                     With the suboption set to implicitint, a
                     function declaration at namespace scope or in
                     a member list will implicitly be declared to
                     return int.
                newexcp | nonewexcp
                     This suboption determines whether or not the
                     C++ new operator throws an exception. If the
                     -qlanglvl=newexcp option is specified, the
                     standard exception std::bad_alloc is thrown
                     when the requested memory allocation fails.
                     This option does not apply to the nothrow
                     versions of the new operator.
                     The standard implementation of the new
                     operators fully support exceptions. For
                     compatibility with previous versions of
                     VisualAge C++, these operators return 0 by
                     default.
                offsetnonpod | nooffsetnonpod
                     This suboption controls whether the offsetof
                     macro can be applied to classes that are not
                     data-only.
                     By default, the compiler allows offsetof to be
                     used with non-POD classes.
                olddigraph | noolddigraph
                     This option controls whether old-style
                     digraphs are allowed in your C++ source. It
                     applies only when -qdigraph is also set.
                     By default, the compiler supports only the
                     digraphs specified in the C++ standard.
                oldfriend | nooldfriend
                     This option controls whether friend
                     declarations that name classes without
                     elaborated class names are treated as C++
                     errors.
                     By default, the compiler lets you declare a
                     friend class without elaborating the name of
                     the class with the keyword class.
                oldmath | nooldmath
                     This suboption controls which versions of math
                     function declarations in <math.h> are included
                     when you specify math.h as an included or
                     primary source file.
                     By default, the new standard math functions
                     are used. Build with -qlanglvl=nooldmath for
                     strict compliance with the C++ standard. For
                     compatibility with modules that were built
                     with earlier versions of VisualAge C++ and
                     predecessor products, you may need to build
                     with -qlanglvl=oldmath.
                oldtempacc | nooldtempacc
                     This suboption controls whether access to a
                     copy constructor to create a temporary object
                     is always checked, even if creation of the
                     temporary object is avoided.
                     By default, the compiler suppresses the access
                     checking.
                oldtmplalign | nooldtmplalign
                     Controls whether alignment rules specified for
                     nested templates are ignored.
                     When the default, -qlanglvl=nooldtmplalign, is
                     in effect, these alignment rules are not
                     ignored.
                     Specify -qlanglvl=oldtmplalign for
                     compatibility with VisualAge C++ 4.0 and
                     predecessor products.
                oldtmplspec | nooldtmplspec
                     This suboption controls whether template
                     specializations that do not conform to the C++
                     standard are allowed.
                     By default, the compiler allows these old
                     specializations (-qlanglvl=nooldtmplspec).
                redefmac | noredefmac
                     Specifies whether a macro can be redefined
                     without a prior #undef or undefine()
                     statement.
                trailenum | notrailenum
                     This suboption controls whether trailing
                     commas are allowed in enum declarations.
                     By default, the compiler allows one or more
                     trailing commas at the end of the enumerator
                     list.
                typedefclass | notypedefclass
                     This suboption provides backwards
                     compatibility with previous versions of
                     VisualAge C++ and predecessor products.
                ucs | noucs
                     This suboption controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in C++
                     sources.
                     Default: -qlanglvl=noucs
                varargmacros | novarargmacros
                     This C99 feature allows the use of a variable
                     argument list in function-like macros in your
                     C++ applications.
                zeroextarray | nozeroextarray
                     This suboption controls whether zero-extent
                     arrays are allowed as the last non-static data
                     member in a class definition.
                     By default, the compiler allows arrays with
                     zero elements.

                The default depends on the invocation command used:

                Command                       Default
                _____________________________________________

                xlC/xlc++                     extended
                xlc                           extc99
                cc                            extended
                c89                           stdc89
                c99                           stdc99

         -qlonglong | -qnolonglong
                Allows IBM-style long long integers. This option
                cannot be used with -qlanglvl=stdc99 or
                -qlanglvl=extc99.

                Default:
                     o -qlonglong when compiling with xlc, xlc++,
                     xlC or cc
                     o -qnolonglong when compiling with c89 or c99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.

                Default: -qnomacpstr

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters.  This is equivalent
                to -qdbcs.

                Default: -qnombcs

         -qstaticinline | -qnostaticinline
                (C++) Controls whether inline functions are treated
                as static or extern. Specifying -qnostaticinline
                means the inline functions are treated as having
                extern linkage.

                Default: -qnostaticinline

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.

                Default: -qtabsize=8

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.

                Default: -qtrigraph

                However, if -qlanglvl=classic is enabled or
                implied, the trigraphs are not recognized by
                default.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.

                Default:
                     o (C) -qnoutf
                     o (C++) -qutf for all language levels except
                     -qlanglvl=strict98
                     o (C++) -qnoutf when -qlanglvl=strict98 is in
                     effect

  Template control options (C++ only)
         -qtempinc[=<directory_path>] | -qnotempinc
                (C++) Generates separate template include files for
                template functions and class declarations, and
                places these files in a directory which can be
                optionally specified.

                Default: -qnotempinc

         -qtemplatedepth=<number>
                (C++) Specifies the maximum number of recursively
                instantiated template specializations that will be
                processed by the compiler. <number> can be a value
                between 1 and INT_MAX.

                Default: -qtemplatedepth=300

         -qtemplaterecompile | -qnotemplaterecompile
                (C++) Helps manage dependencies between compilation
                units that have been compiled using the
                -qtemplateregistry compiler option.

                Default: -qnotemplaterecompile

         -qtemplateregistry[=<filename>] | -qnotemplateregistry
                (C++) Maintains records of all templates as they
                are encountered in the source and ensures that only
                one instantiation of each template is made.

                Default: -qnotemplateregistry

         -qtempmax=<number>
                (C++) Specifies the maximum number of template
                include files to be generated by the -qtempinc
                option for each header file.

                Default: -qtempmax=1

         -qtmplinst=<suboption>
                (C++) Allows you to manage implicit template
                instantiations. <suboption> is one of the
                following:

                none
                     Instantiates only the inline functions. If
                     this is specified, -qtempinc and
                     -qtemplateregistry are ignored.
                noinline
                     Suppresses all implicit instantiations.
                auto
                     Handles the implicit instantiations according
                     to the -qtempinc and -qtemplateregistry
                     options. If both options are off, then
                     implicit instantiations are always performed.
                always
                     Always perform implicit instantiations. This
                     will ignore the -qtempinc and
                     -qtemplateregistry options.

                Default: -qtmplinst=auto

         -qtmplparse=<option>
                (C++) Controls whether parsing and semantic
                checking are applied to template definition
                implementations or only to template instantiations.
                The compiler has the option to produce warning or
                error messages. The suboptions are:

                no
                     Does not parse, to reduce the number of errors
                     issued in code written for previous versions
                     of the compiler.
                warn
                     Parses template definitions and issues warning
                     messages for semantic errors.
                error
                     Treats problems in template definitions as
                     errors, even if the template is not
                     instantiated.

                Default: -qtmplparse=no

  Floating-point and integer control options
         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.

                Default: -qbitfields=unsigned

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.

                Default: -qchars=unsigned

         -qenum=<suboption>
                Specifies the amount of storage occupied by
                enumerations, where <suboption> can be:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration. Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

                Default: -qenum=intlong

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                dfpemulate | nodfpemulate
                     Specifies whether decimal floating-point
                     computations are implemented in hardware
                     instructions or emulated in software by calls
                     to library functions.
                     -qdfp must be enabled for either suboption to
                     have any effect. nodfpemulate is only valid on
                     a system that supports decimal floating-point
                     instructions; that is, on AIX 5.3 and higher,
                     and with -qarch=pwr6 in effect. dfpemulate is
                     required for all other -qarch values.
                     Default: dfpemulate
                fenv | nofenv
                     Specifies whether the code depends on the
                     hardware environment and whether to suppress
                     optimizations that could cause unexpected
                     results due to this dependency.
                     When nofenv is in effect, the compiler assumes
                     that the program does not depend on the
                     hardware environment, and that aggressive
                     compiler optimizations that change the
                     sequence of floating-point operationsare
                     allowed to be performed. When fenv is in
                     effect, such optimizations are suppressed.
                     Default: nofenv
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. -qfloat=nofltint
                     checks floating-point-to-integer conversions
                     for out-of-range values.
                     Default:
                       o nofltint at -O2 optimization.
                       o fltint when -qnostrict or -O3 or higher
                       optimization level is in effect.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                     Default: fold
                hscmplx | nohscmplx
                     Speeds up operations involving complex
                     division and complex absolute value. This
                     suboption, which provides a subset of the
                     optimizations of the hsflt suboption, is
                     preferred for complex calculations.
                     Default: nohscmplx
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                     Default: nohsflt
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                     Default: nohssngl
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                     Default: maf
                nans | nonans
                     Generates extra instructions to detect
                     signaling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                     Default: nonans
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right. Specifying -qstrict=noieeefp also
                     relaxes IEEE conformance.
                     Default: norelax
                rndsngl | norndsngl
                     Specifies that the result of each single-precision (float)
                     operation is to be rounded to single precision.
                     -qfloat=norndsngl specifies that rounding to
                     single-precision happens only after full expressions have
                     been evaluated.
                     Default: rndsngl
                rngchk | norngchk
                     Specifying norngchk instructs the compiler to
                     skip range checking, allowing for increased
                     performance where division and sqrt operations
                     are performed repeatedly within a loop.
                     When rngchk is specified, range checking is
                     performed for input arguments for software
                     divide and inlined sqrt operations.
                     When -qstrict, -qstrict=infinities,
                     -qstrict=operationprecision, or
                     -qstrict=exceptions is active, the setting of
                     this option is forced to -qfloat=rngchk. When
                     -qnostrict is active, the setting of this
                     option is -qfloat=norngchk unless the
                     -qfloat=rngchk option is explicitly set by the
                     user.
                     Default: rngchk
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                     Default: norrm
                rsqrt | norsqrt
                     Specifies whether a sequence of code that
                     involves division by the result of a square
                     root can be replaced by calculating the
                     reciprocal of the square root and multiplying.
                     Allowing this replacement produces code that
                     runs faster. -qfloat=rsqrt has no effect
                     unless -qignerrno is also specified.
                     Default:
                       o norsqrt at -O2 optimization
                       o rsqrt when when -qnostrict or -O3 or
                       higher optimization level is in effect
                single | nosingle
                     Allows single-precision arithmetic
                     instructions to be generated for single-
                     precision floating-point values. All PowerPC
                     processors support single-precision
                     instructions; however, if you wish to preserve
                     the behavior of applications compiled for
                     earlier architectures, in which all floating-
                     point arithmetic was performed in double-
                     precision and then truncated to single-
                     precision, you can use
                     -qfloat=nosingle:norndsngl. This suboption
                     provides computation precision results
                     compatible with those provided by the
                     deprecated options
                     -qarch=com|pwr|pwrx|pwr2|p2sc|601|602|603.
                     Default: single
                spnans | nospnans
                     Detects signaling NaN on conversion from
                     single-precision to double-precision.
                     Default: nospnans

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits.
                This is equivalent to -qlongdouble.

                Default: -qnoldbl128

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits.
                This is equivalent to -qldbl128.

                Default: -qnolongdouble

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.

                Default: -qnolonglit

         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions.

                For binary floating-point types, <rounding_mode> is
                one of the following:
                m = round towards minus infinity
                n = round to the nearest representable number, ties
                to even
                p = round towards plus infinity
                z = round towards zero

                Default: -yn

                For decimal floating-point types, <rounding_mode>
                is one of the following:
                di = round towards infinities (away from zero)
                dm = round towards minus infinity
                dn = round to the nearest representable number, ties to
                even
                dna = round to the nearest representable number, ties away
                      from zero
                dnz = round to the nearest representable number, ties toward
                      zero
                dp = round towards plus infinity
                dz = round towards zero

                Default: -ydn

  Object code control options
         -q32, -q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used.

                Default: -q32

         -qalloca
                (C) Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -ma    (C) Substitutes inline code for calls to function
                alloca.

         -qeh[={v5|v6}] | -qnoeh
                (C++) Controls whether exception handling is
                enabled in the module being compiled.

                v5
                     Instructs the compiler to generate exception-
                     handling code that is compatible with
                     VisualAge C++ V5.0.
                v6
                     Instructs the compiler to generate new
                     exception-handling code, compatible with
                     VisualAge C++ V6.0, that correctly handles
                     try-catch blocks nested within other catch
                     blocks.

                Default: -qeh=v6

         -qexpfile=<file_name>
                Saves the exported symbols in the specified file
                and is only used together with the -qmkshrobj
                compiler option.
                Refer to the -qmkshrobj option for more
                information.

         -qfuncsect[=[no]implicitstaticref] | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect. -qfuncsect
                can take the following suboption:

                implicitstaticref | noimplicitstaticref
                     Specifies whether the compiler generates dummy
                     references to the static area. Specifying
                     -qfuncsect with no suboption implies
                     implicitstaticref. Specifying
                     noimplicitstaticref removes unnecessary
                     references to the static data area.

                Default: -qnofuncsect

         -qinlglue | -qnoinlglue
                This option inlines glue code that optimizes
                external function calls when compiling at -q64 and
                -O2 and higher.

                Default: -qnoinlglue

         -qkeepinlines | -qnokeepinlines
                (C++) Instructs the compiler to keep or discard
                definitions for unreferenced extern inline
                functions. Discarding these definitions can reduce
                the size of the object files. The -qkeepinlines
                setting keeps the definitions of unreferenced
                extern inline functions.

                Default: -qnokeepinlines

         -qpic[={small|large}] | -qnopic
                Generates position-independent code (pic). Specify
                -qpic=small if the Global Offset Table in 32-bit
                mode or Table of Contents in 64-bit mode must be 64
                Kb or smaller, or -qpic=large if it can be larger
                than 64 Kb.

                Default: -qpic=small

         -qppline | -qnoppline
                When used in conjunction with the -E or -P options,
                enables or disables the generation of #line
                directives in the preprocessed output.

                Default:
                     o -qnoppline with -P
                     o -qppline with -E

         -qpriority=<num>
                (C++) Specifies the priority level for the
                initialization of static objects, where <num> is
                the initialization priority level assigned to the
                static objects within a file, or the priority level
                of a shared or non-shared file or library.
                You can specify a priority level from -(2147483647
                + 1) (highest priority) to +2147483647 (lowest
                priority).

                Default: -qpriority=0

         -qproto | -qnoproto
                (C) Assumes that all functions are prototyped.
                Asserts that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.

                Default: -qnoproto

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a  different fixed
                role. <registers_list> is a colon-separated list of
                registers.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.

                Default:
                     o -qnoro with cc and its derivatives
                     o -qro otherwise

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.

                Default:
                     o -qroconst with xlc, xlc++, xlC, c89 and c99
                     invocations commands
                     o -qnoroconst with cc.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers.

                Default: -qnoroptr

         -qrtti=<option> | -qnortti
                (C++) Generates runtime type identification (RTTI)
                information for the typeid and dynamic_cast
                operators.  The suboptions are:

                all
                     Generates the information needed for the RTTI
                     typeid and dynamic_cast operators.
                type | typeinfo
                     Generates the information needed for the RTTI
                     typeid operator only.
                dyna | dynamiccast
                     Generates the information needed for the RTTI
                     dynamic_cast operator only.

                Default: -qnortti

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, the version and level of each compiler
                component invoked during compilation, and other
                information to the corresponding object file.
                This option must be used with the -c option.

                Default: -qnosaveopt

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list
                (the symbol table of objects).

                Default: -qnostatsym

         -qtbtable=<suboption>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  Suboptions
                include:

                none
                     No traceback table is generated.
                small
                     A traceback table is generated with no name or
                     parameter information. This is the default
                     with optimization if -g is not specified.
                full
                     A full traceback table is generated. This is
                     the default with -qnoopt or -g specified.

                Default:
                     o -qtbtable=full when compiling non-optimized
                     (without -O) or for debugging (with -g)
                     o -qtbtable=small otherwise

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.

                Default:
                     o -qthreaded when compiling invocation
                     commands ending in "_r" or "_r7".
                     o -qnothreaded otherwise.

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                     This model is the most general, and can be
                     used for all thread-local variables.
                local-dynamic
                     This model provides better performance than
                     the global-dynamic model, and can be used for
                     thread-local variables defined in
                     dynamically-loaded modules.
                initial-exec
                     This model provides better performance than
                     the global-dynamic or local-dynamic models,
                     and can be used for thread-local variables
                     defined in dynamically-loaded modules,
                     provided that those modules are loaded at the
                     same time as the executable.
                local-exec
                     This model provides the best performance of
                     all of the models, but can only be used when
                     all thread-local variables are defined and
                     referenced by the main executable.

                Default:
                     o -qtls=unsupported
                     o -qtls=initial_exec if the -qnopic compiler
                     option is enabled.
                     o -qtls=global_dynamic if the -qpic compiler
                     option is enabled.

         -qunique | -qnounique
                (C++) Generates unique names for static
                constructor/destructor file compilation units.
                (C) Generates unique names for the sinit and sterm
                functions which are used by #pragma init and
                #pragma fini, respectively.

                Default: -qnounique

         -qweakexp | -qnoweakexp
                When used with the -qmkshrobj or -G options,
                includes or excludes global symbols marked as weak
                from the export list generated when you create a
                shared object.

                Default: -qweakexp

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.

                Default: -qweaksymbol

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.

                Default: -qnoxcall

  Error checking and debugging options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process.  <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                all
                     Enables all suboptions.
                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.

                Specifying -qcheck with no suboptions is equivalent
                to -qcheck=all.

                Default: -qnocheck

         -qdbxextra | -qnodbxextra
                (C) Specifies that all typedef declarations,
                struct, union, and enum type definitions are
                included for debugging. Use this option with the -g
                option to produce additional debugging information
                for use with a debugger.

                Default: -qnodbxextra

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.

                Default: -qnodpcl

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.

                Default: -qnoextchk

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                enable
                     Enables trapping of the specified exceptions.
                imprecise
                     Only checks for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detects floating-point inexact exceptions.
                invalid
                     Detects floating-point invalid operation
                     exceptions.
                nanq
                     Generates code to detect and trap NaNQ (Quiet
                     Not-a-Number) exceptions handled or generated
                     by floating-point operations.
                overflow
                     Detects floating-point overflow.
                underflow
                     Detects floating-point underflow.
                zerodivide
                     Detects floating-point division by zero.

                Default: -qnoflttrap

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                Default:
                     o -qnoformat, which is equivalent to
                     -qformat=noall.
                     o -qformat=all if -qformat is specified
                     without any suboptions.

         -qfullpath | -qnofullpath
                Records the full or absolute path names of source
                and include files in object files compiled with
                debugging information (when you use the -g option).

                Default: -qnofullpath

         -g     Generates debug information for debugging tools.
                -g implies the -Q! option.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>. The severity levels in
                increasing order of severity are:

                i = informational messages
                w = warning messages
                e = error messages (C only)
                s = severe error messages

                Default: -qhalt=s

         -qhaltonmsg=<msgnum_list>
                (C++) Stops the compiler after the compilation
                phase where it encounters the specified message
                number(s), where <msgnum_list> is a comma-separated
                list of message numbers.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.

                Default: -qnoheapdebug

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces or suppresses informational messages.
                <groups_list> is a colon-separated list. If a
                <groups_list> is specified along with a
                <suboption>, a colon must separate them. The
                suboptions are:

                all
                     Enables all diagnostic messages for all
                     groups.
                noall
                     Disables all diagnostic messages for all
                     groups.
                als
                     Enables reporting of possible violations of
                     the ANSI aliasing rule in effect.
                noals
                     Disables reporting of possible ANSI aliasing-
                     rule violations.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                <groups_list> turns on or off specific groups of
                messages and is a colon-separated list of one or
                more of the following:

                c99 | noc99
                     (C) C code that might behave differently
                     between C89 and C99 language levels
                cls | nocls
                     C++ classes
                cmp | nocmp
                     Possible redundancies in unsigned comparisons
                cnd | nocnd
                     Possible redundancies or problems in
                     conditional expressions
                cns | nocns
                     Operations involving constants
                cnv | nocnv
                     Conversions
                dcl | nodcl
                     Consistency of declarations
                eff | noeff
                     Statements and pragmas with no effect
                enu | noenu
                     Consistency of enum variables
                ext | noext
                     Unused external definitions
                gen | nogen
                     General diagnostic messages
                gnr | nognr
                     Generation of temporary variables
                got | nogot
                     Use of goto statements
                ini | noini
                     Possible problems with initialization
                lan | nolan
                     Language level effects
                obs | noobs
                     Obsolete features
                ord | noord
                     Unspecified order of evaluation
                par | nopar
                     Unused parameters
                por | nopor
                     Non-portable language constructs
                ppc | noppc
                     Possible problems with using the preprocessor
                ppt | noppt
                     Trace of preprocessor actions
                pro | nopro
                     Missing function prototypes
                rea | norea
                     Code that cannot be reached
                ret | noret
                     Consistency of return statements
                trd | notrd
                     Possible truncation or loss of data or
                     precision
                tru | notru
                     Variable names truncated by the compiler
                trx | notrx
                     Rounding of hexadecimal floating-point
                     constants
                uni | nouni
                     Uninitialized variables
                upg | noupg
                     Upgrade issues from one release to the next
                     release
                use | nouse
                     (C++) Unused auto and static variables
                vft | novft
                     (C++) Generation of virtual function tables in
                     C++ programs
                zea | nozea
                     Zero-extent arrays

                Default:
                     (C) -qnoinfo
                     (C++) -qinfo=lan:trx
                If -qinfo is specified without a suboption, the
                default is -qinfo=all for C and -qinfo=all:noppt
                for C++.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes each byte or word of storage for
                automatic variables to the specified hexadecimal
                value <hex_value>. This generates extra code and
                should only be used for error determination.

                Default: -qnoinitauto

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized. As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers.

                Default: -qnokeepparm

         -qlinedebug | -qnolinedebug
                Generates only abbreviated line number and source
                file name information for the debugger.

                Default: -qnolinedebug

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached. <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error (C only)
                s = severe error

                Default: -qnomaxerr

         -qoptdebug | -qnooptdebug
                When used with high levels of optimization,
                -qoptdebug produces source files containing
                optimized pseudocode that can be read by a
                debugger.
                An output file with a .optdbg extension is created
                for each input file compiled with -qoptdebug. You
                can use the information contained in this file to
                help you understand how your code actually behaves
                under optimization.

                Default: -qnooptdebug

         -qsymtab={unref|static}
                (C) Determines what types of information appear in
                the symbol table. The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                Default:
                     The default is to not add static variables to
                     the symbol table.

         -qsyntaxonly
                (C) Performs syntax checking without generating an
                object file.

                Default:
                     By default, source files are compiled and
                     linked to generate an executable file.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.

                Default: -qnowarn64

  Listing and messages options
         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.

                Default: -qnoattr

         -qdump_class_hierarchy
                (C++) For each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal. The message severity levels are:

                i = informational messages
                w = warning messages
                e = error, severe error and unrecoverable error
                messages (C only)
                s = severe error and unrecoverable error messages
                (C)
                s = severe error messages (C++)

                Default: -qflag=i:i

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.

                offset | nooffset
                     Changes the offset of the PDEF header from
                     00000 to the offset of the start of the text
                     area.

                Specifying -qlist without the suboption is
                equivalent to list=nooffset.

                Default: -qnolist

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.

                Default: -qnolistopt

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output. The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.

                Default: -qnophsinfo

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.

                Default: -qprint

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are optimized.
                The compiler also reports the number of streams
                created for a given loop.  The transformation
                reports are included as part of the compiler
                listing. This option requires -qhot or -qsmp in
                order to have effect.
                When used with -qipa=clonearch, -qreport produces
                transformation reports on the procedures that are
                cloned for the architectures specified by the
                option.

                Default: -qnoreport

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files.
                sys | nosys
                     Specifies whether to show system include
                     files.
                all
                     Shows both user and system include files.

                Default: -qnoshowinc

         -qsource | -qnosource
                Produces a compiler listing that includes source
                code.

                Default: -qnosource

         -qsrcmsg | -qnosrcmsg
                (C) Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.

                Default: -qnosrcmsg

         -qsuppress=<msg_id> | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where <msg_id>
                is a colon-separated list of message numbers that
                will not be displayed.

                Default: -qnosuppress

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -qversion[=verbose]
                Displays the official compiler product name and the
                compiler version found on the system.

                verbose
                     Additionally displays information about the
                     version, release, and level of each compiler
                     component installed.


         -w     Suppresses informational, language-level and
                warning messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e in C or -qflag=s:s in C++.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers.
                Specifying -qxref will report only identifiers that
                are used, -qxref=full reports all identifiers in
                the program, and -qnoxref does not report any
                identifiers in the program. The -qnoprint option
                overrides this option.

                Default: -qnoxref

  Optimization and tuning options
         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.

                overlap | nooverlap
                     Enables or disables optimizations for
                     structure and union assignments. nooverlap
                     assumes that the source and destination for
                     structure and union assignments do not
                     overlap, allowing the compiler to generate
                     faster code. overlap inhibits these
                     optimizations.

                Default: -qaggrcopy=nooverlap

         -qalias=<suboptions_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <suboptions_list> is a
                colon-separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     Pointers are never aliased if allptrs is
                     specified, but may be aliased if noallptrs is
                     specified. -qalias=allptrs implies
                     -qalias=typeptr.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. This option has no effect unless
                     you also specify the -O option.
                     Specifying -qalias=noansi turns off type-based
                     aliasing completely.
                global | noglobal
                     When global is in effect, type-based aliasing
                     rules are enabled during IPA link-time
                     optimization across compilation units. Both
                     -qipa and -qalias=ansi must be enabled for
                     -qalias=global to have an effect.
                     Specifying noglobal disables type-based
                     aliasing rules across compilation units.
                restrict | norestrict
                     When restrict is in effect, optimizations for
                     pointers qualified with the restrict keyword
                     are enabled. Specifying norestrict disables
                     optimizations for restrict-qualified pointers.
                     -qalias=restrict is independent from other
                     -qalias suboptions.
                typeptr | notypeptr
                     Pointers to different types are never aliased
                     if typeptr is specified, but may be aliased if
                     notypeptr is specified.

                Default:
                     (C++) -qalias=noaddrtaken:noallptrs:ansi:global:
                     restrict:notypeptr
                     (C) -qalias=noaddrtaken:noallptrs:ansi:global:
                     restrict:notypeptr for all invocation commands
                     except cc.
                     -qalias=noaddrtaken:noallptrs:noansi:global:
                     restrict:notypeptr for the cc invocation command.

         -qarch=<suboption>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation.  For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                403
                     Produces object code containing instructions
                     that will run on the PowerPC 403 hardware
                     platform.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 hardware platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on the POWER5+ hardware platforms.
                pwr6
                     Produces object code containing instructions
                     that will run on the POWER6 hardware platforms
                     running in POWER6 architected mode.  If you
                     would like support for decimal floating-point
                     instructions, be sure to specify this
                     suboption during compilation.
                pwr6e
                     Produces object code containing instructions
                     that will run on the POWER6 hardware platforms
                     running in POWER6 raw mode.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms.  Using -q64 with ppc upgrades the
                     architecture to ppc64.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.
                     In 64-bit mode, produces object code
                     containing optional graphics instructions that
                     will run on 64-bit PowerPC platforms, but not
                     on 32-bit-only platforms. Using -q64 with
                     ppcgr upgrades the architecture to ppc64gr.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                ppc64v
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional vector instructions, such as a
                     PowerPC 970.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.

                Default: -qarch=ppc

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0         Direct-mapped cache
                          1         Fully associative cache
                          (n > 1)   n-way set associative cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies which level of cache is affected,
                     where level is one of the following:
                          1     Basic cache
                          2     Level-2 cache
                          3     Table Lookaside Buffer (TLB)
                     If a machine has more than one level of cache,
                     use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                          c = Combined data and instruction cache
                          d = Data cache
                          i = Instruction cache

                Default:
                     The -qtune setting determines the optimal
                     default -qcache settings for most typical
                     compilations. -O4, -O5, or -qipa must be
                     specified with the -qcache option.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.

                Default: -qnocompact

         -qdataimported[=<variable_names>]
                Specifies variables that the compiler can assume
                are imported. <variable_names> is a colon-separated
                list of variables. Specifying -qdataimported
                without <variable_names> instructs the compiler to
                assume that all variables are imported. This is
                equivalent to specifying -qnotocdata.
                (C++) Variable names must be specified using their
                mangled names.

         -qdatalocal[=<variable_names>]
                Specifies variables that the compiler can assume
                are local.  <variable_names> is a colon-separated
                list of variables.
                Specifying -qdatalocal with no variables instructs
                the compiler to assume that all variables are
                local. This is equivalent to specifying -qtocdata.
                (C++) Variable names must be specified using their
                mangled names.

         -qtocdata | -qnotocdata
                Marks all data as local.

                Default: -qnotocdata (marks all data as imported)

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.

                Default: -qnodirectstorage

         -qenablevmx | -qnoenablevmx
                Enables the generation of vector instructions for
                processors that support them. These instructions
                can offer higher performance when used with
                algorithmic-intensive tasks such as multimedia
                applications.
                For -qenablevmx to have effect, the architecture
                specified by the -qarch option must support vector
                instructions.
                If -qnoenablevmx is in effect, -qaltivec,
                -qvecnvol, and -qhot=simd cannot be used.

                Default: -qnoenablevmx

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the IBM Feedback Directed Program Restructuring
                (FDPR) performance-tuning utility.

                Default: -qnofdpr

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<number>] | noarraypad
                     When <number> is specified, the compiler will
                     pad every array in the code. The pad amount
                     must be a positive integer value. Otherwise,
                     the compiler will pad any arrays where it
                     infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     0
                          The compiler performs a subset of the
                          high-order transformations. Some of these
                          include early distribution, loop
                          interchange, and loop tiling, as
                          examples. Optimization level -O3 implies
                          -qhot=level=0.
                     1
                          At level=1, full high-order
                          transformation is performed.
                          -qhot=level=1 is equivalent to -qhot and
                          the compiler options that imply -qhot
                          also imply -qhot=level=1, unless
                          -qhot=level=0 is explicitly specified.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a vector instruction.  This call calculates
                     several results at one time, which is faster
                     than calculating each result sequentially. If
                     you specify -qhot=nosimd, the compiler
                     performs optimizations on loops and arrays,
                     but avoids replacing certain code with vector
                     instructions.  To enable -qhot=simd, you must
                     specify an architecture that supports vector
                     instructions.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher
                     (otherwise -qhot=vector has no effect), the
                     compiler converts certain operations in a loop
                     that apply to successive elements of an array
                     into a call to a routine in the Mathematical
                     Acceleration Subsystem (MASS) library, part of
                     the libxlopt.a library.
                     If you specify -qhot=novector, the compiler
                     performs optimizations on loops and arrays,
                     but avoids replacing certain code with calls
                     to vector library routines.

                Specifying -qhot without suboptions is equivalent
                to -qhot=noarraypad:level=1:nosimd:vector. If you
                specify -qhot without suboptions with -qenablevmx
                and a -qarch value that supports vector processing,
                -qhot=simd is enabled by default.

                Default:
                     o -qnohot
                     o -qhot=noarraypad:level=0:nosimd:novector
                     when -O3 is in effect.
                     o -qhot=noarraypad:level=1:nosimd:vector when
                     -qsmp, -O4 or -O5 is in effect.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.

                Default: -qnoignerrno

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).
                <suboptions_list> is a colon-separated list of the
                following suboptions:

                clonearch=<arch_names> | noclonearch
                     Specifies the architectures for which multiple
                     versions of the same instruction set are
                     produced, where <arch_names> is a comma-
                     separated list of architecture names. Use this
                     suboption if you require optimal performance
                     on multiple differing machines running the
                     same copy of your application.
                cloneproc=<function_names> |
                nocloneproc=<function_names>
                     Specifies the name of the functions to clone
                     for the architectures specified by the
                     clonearch suboption, where <function_names> is
                     a comma-separated list of function names.
                exits=<function_names>
                     Specifies names of functions which represent
                     program exits.  <function_names> is a comma-
                     separated list of function names.
                infrequentlabel=<function_names>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate functions will be
                     inlined. <suboption> can be one of the
                     following:
                     auto|noauto
                          Enables or disables automatic function
                          inlining by the high-level optimizer.
                          When -qipa=inline=auto is in effect, the
                          compiler considers all functions that are
                          under the maximum size limit (see below)
                          for inlining. When -qipa=inline=noauto is
                          in effect, only functions listed in the
                          <functions> suboption are considered for
                          inlining.
                     <functions>
                          Specifies a comma-separated list of
                          functions to attempt to inline.
                     limit=<num>
                          Specifies a limit on the size of a
                          calling function after inlining. This
                          only takes effect when inline=auto is on.
                          If you do not specify a value for <num>,
                          <num> is 8192 by default.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on. If you do
                          not specify a value for <num>, <num> is
                          1024 by default.
                     Default: auto
                noinline[=<functions>]
                     Specifies a comma-separated list of functions
                     which are not to be inlined. Specifying
                     noinline without <functions> asserts that no
                     functions are to be inlined.
                isolated=<functions>
                     Specifies a comma-separated list of functions
                     that are not compiled with -qipa and do not
                     directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs only minimal interprocedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     Default: 1
                list[={<file_name>|short|long}]
                     Specifies an output listing file name during
                     the link phase. The default name is "a.lst".
                     Specifying 'long' or 'short' can be used to
                     request more or less information in the
                     listing file to determine which listing
                     sections will be included.
                     Default: short
                lowfreq=<functions>
                     Specifies a comma-separated list of functions
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Informs the compiler that the dynamic memory
                     allocation routines will return 16-byte
                     aligned memory addresses. The compiler can
                     then optimize the code based on that
                     assertion.
                     Default: malloc16
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for functions
                     not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                     Default: missing=unknown
                object | noobject
                     Specifies whether to include standard object
                     code in the object files. Specifying
                     'noobject' can substantially reduce overall
                     compile time by not generating object code
                     during the first IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                     Default: partition=medium
                pure=<functions>
                     Specifies a comma-separated list of functions
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<functions>
                     Specifies a comma-separated list of functions
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<suboption>] | nothreads
                     Runs portions of the IPA optimization process
                     during pass 2 in parallel threads, which can
                     speed up the linking process on multi-
                     processor systems. <suboption> can be one of
                     the following:
                     auto | noauto
                          When auto is in effect, the compiler
                          selects a number of threads heuristically
                          based on machine load. When noauto is in
                          effect, the compiler spawns one thread
                          per machine processor.
                     <number>
                          Instructs the compiler to use a specific
                          number of threads. <number> can be any
                          integer value in the range of 1 to 32767.
                          However, <number> is effectively limited
                          to the number of processors available on
                          your system.
                     Specifying threads with no suboptions implies
                     threads=auto.
                     Default: -qipa=threads
                unknown=<functions>
                     Specifies a comma-separated list of functions
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <file_name>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                Regular expressions are supported when specifying
                function names for these suboptions:
                cloneproc, nocloneproc, exits, inline, noinline,
                isolated, lowfreq, pure, safe, unknown.
                (C++) Function names must be specified using their
                mangled names.

                Default:
                     o -qnoipa
                     o -qipa=inline=auto:level=1:missing=unknown:
                     partition=medium:threads=auto when -O4 is in
                     effect.
                     o -qipa=inline=auto:level=2:missing=unknown:
                     partition=medium:threads=auto when -O5 is in
                     effect.
                     o -qipa=inline=auto:level=0:missing=unknown:
                     partition=medium:threads=auto when -qpdf1 or
                     -qpdf2 is in effect.

         -qisolated_call=<procedures>
                Informs the compiler that specific functions do not
                have or rely on side effects, other than those
                implied by their parameters. <procedures> is a
                colon-separated list of function names.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large pages provided on certain Power systems.

                Default: -qnolargepage

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are, in fact, the
                library functions.

                Default: -qnolibansi

         -qmaxmem=<size>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <size> kilobytes.
                When <size> is -1, the optimizer will use as much
                memory as needed.

                Default:
                     o -qmaxmem=8192 when -O2 level optimization is
                     set.
                     o -qmaxmem=-1 when -O3 level or greater
                     optimization is set.

         -qminimaltoc | -qnominimaltoc
                Avoids Table of Contents (TOC) overflow conditions
                by placing TOC entries into a separate data section
                for each object file. By default, the compiler will
                allocate at least one TOC entry for each unique
                non-automatic variable reference in your program.

                Default: -qnominimaltoc

         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2. The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program. The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations.
                     Specifying -O3 implies -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                       o sets the -qarch and -qtune options to the
                       architecture of the compiling machine.
                       o sets the -qcache option most appropriate
                       to the characteristics of the compiling
                       machine.
                       o sets the -qipa option.
                       o sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                Specifying -O with no <level> is equivalent to
                specifying -O2.

                Default: -O0

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.

                Default: -qnooptimize

         -p, -pg, -qprofile={-p|-pg}
                Sets up the object files produced by the compiler
                for profiling.
                -pg is like -p, but it produces more extensive
                statistics.

         -qpdf1[=pdfname=<file_path] | -qnopdf1
                Tunes optimizations through profile-directed
                feedback (PDF), where results from sample program
                execution are used to improve optimization near
                conditional branches and in frequently executed
                code sections.
                Used with a minimum optimization level of -O2,
                -qpdf1 produces an object that is instrumented to
                collect runtime execution information. This is
                phase 1 of the profile-directed feedback
                optimization process.

                pdfname=<file_path>
                     Specifies the location and name of the profile
                     data file containing the PDF profiling
                     information.
                     Default:
                       If you do not specify <file_path>, the
                       default file name is ._pdf and the file is
                       saved in the current working directory, or
                       in the directory named by the PDFDIR
                       environment variable, if it is set.

                Default: -qnopdf1

         -qpdf2[=pdfname=<file_path>] | -qnopdf2
                Tunes optimizations through profile-directed
                feedback (PDF), where results from sample program
                execution are used to improve optimization near
                conditional branches and in frequently executed
                code sections.
                Used with a minimum optimization level of -O2,
                -qpdf2 tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

                pdfname=<file_path>
                     Specifies the location and name of the profile
                     data file containing the PDF profiling
                     information.
                     Default:
                       If you do not specify <file_path>, the
                       default file name is ._pdf and the file is
                       saved in the current working directory, or
                       in the directory named by the PDFDIR
                       environment variable, if it is set.

                Default: -qnopdf2

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.

                Default: -qprefetch

         -qprocimported[=<procedures>] | -qnoprocimported
                Specifies functions that the compiler can assume
                are imported. Imported functions are dynamically
                bound with a shared portion of a library. Code
                generated for calls to functions marked as imported
                may be larger, but is faster than the default code
                sequence generated for functions marked as unknown.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -qproclocal[=<procedures>] | -qnoproclocal
                Specifies functions that the compiler can assume
                are local. Local functions are statically bound
                with the functions that call them; smaller, faster
                code is generated for calls to such functions.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -qprocunknown[=<procedures>] | -qnoprocunknown
                Specifies functions that the compiler can assume are
                unknown. Unknown functions are resolved to either
                statically or dynamically bound objects during linking.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -Q[<suboption>]
                (C++) Instructs the compiler to try to inline
                functions. Inlining is performed if possible but,
                depending on which optimizations are performed,
                some functions might not be inlined.

                (C) Specifies which specific functions the compiler
                should attempt to inline. You must specify at least
                an optimization level of -O2 for inlining to take
                effect with -Q. To turn on inline expansion for
                calls to procedures in different scopes, you must
                also use the -qipa=inline.

                (C++) In the C++ language, this option can take the
                form:

                -Q
                     Compiler inlines all functions that it can.
                -Q!
                     Compiler does not inline any functions.

                (C) In the C language, this option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions
                     with 20 executable source statements or fewer,
                     subject to the setting of any of the
                     suboptions to the -Q option. If -Q is
                     specified last, all functions are inlined.
                -Q!
                     Does not inline any functions. If -Q! is
                     specified last, no functions are inlined.
                -Q-<names>
                     Does not inline functions listed in <names>,
                     where <names> is a colon-separated list. All
                     other appropriate functions are inlined. The
                     option implies -Q.
                -Q+<names>
                     Attempts to inline the functions listed in
                     <names>, where <names> is a colon-separated
                     list. All other appropriate functions are
                     inlined.
                -Q=<threshold>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <threshold> for
                     the function to be inlined.

                Default: -Q!

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function.

                (C++) In C++, you cannot specify any suboptions.
                -qinline specifies that all appropriate functions
                should be inlined, and -qnoinline specifies that no
                functions should be inlined.

                (C) In C, this option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline+<procedures>
                     Attempts to inline the functions listed in
                     <procedures> and any other appropriate
                     functions, where <procedures> is a colon-
                     separated list.
                -qinline-<procedures>
                     Specifies that functions listed in
                     <procedures> do not get inlined, where
                     <procedures> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.

                Default:
                     The default is to treat inline specifications
                     as a hint to the compiler, and the result
                     depends on other options that you select. If
                     you specify the -g option (to generate debug
                     information), inlining may be affected.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O2 to add additional call and block count
                profiling information to an executable.

                Default: -qnoshowpdf

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame. This option is
                only valid when used together with IPA (-qipa, -O4,
                -O5 compiler options).

                Default: -qnosmallstack

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with OpenMP directives is
                     optimized.
                     Default: auto
                nested_par | nonested_par
                     If nested_par is specified, prescriptive
                     nested parallel constructs are parallelized by
                     the compiler.
                     Default: nonested_par
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                     Default: noomp
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                     Default: opt
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                     Default: norec_locks
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                       o affinity[=<num>]
                       o dynamic[=<num>]
                       o guided[=<num>]
                       o runtime
                       o static[=<num>],
                     where <num> is the number of loop iterations.
                     Default: schedule=runtime
                stackcheck | nostackcheck
                     Causes the compiler to check for stack
                     overflow by slave threads at run time, and
                     issue a warning if the remaining stack size is
                     less than the number of bytes specified by the
                     stackcheck option of the XLSMPOPTS environment
                     variable. This suboption is intended for
                     debugging purposes, and only takes effect when
                     XLSMPOPTS=stackcheck is also set.
                     Default: nostackcheck
                threshold[=<num>]
                     When -qsmp=auto is in effect, controls the
                     amount of automatic loop parallelization that
                     occurs. The value of <num> represents the
                     lower limit allowed for parallelization of a
                     loop, based on the level of "work" present in
                     a loop.
                     Default:
                       <num> must be a positive integer of 0 or
                       greater. If you specify threshold with no
                       suboption, the program uses a default value
                       of 100.

                Specifying -qsmp without suboptions is equivalent
                to -qsmp=auto:explicit:noomp:opt:norec_locks:
                nonested_par:schedule=runtime:nostackcheck:
                threshold=100.

                Default: -qnosmp

         -qspeculateabsolutes | -qnospeculateabsolutes
                Works with the -qtocmerge -bl:file for non-IPA
                links and with the -bl:file for IPA links to
                disable speculation at absolute addresses.
                The bl:file is necessary for the compiler to know
                which addresses are absolutes.

                Default: -qspeculateabsolutes

         -qstrict[=<suboptions_list>] | -qnostrict
                Ensures that optimizations done by default at
                optimization levels -O3 and higher, and, optionally
                at -O2, do not alter the semantics of a program.

                The -qstrict=all, -qstrict=precision,
                -qstrict=exceptions, -qstrict=ieeefp, and
                -qstrict=order suboptions and their negative forms
                are group suboptions that affect multiple,
                individual suboptions. Group suboptions act as if
                either the positive or the no form of every
                suboption of the group is specified.

                Default:

                     o Always -qstrict or -qstrict=all when the
                     -qnoopt or -O0 optimization level is in effect
                     o -qstrict or -qstrict=all is the default when
                     the -O2 or -O optimization level is in effect
                     o -qnostrict or -qstrict=none is the default
                     when -O3 or a higher optimization level is in
                     effect

                <suboptions_list> is a colon-separated list of one
                or more of the following:

                all | none
                     all disables all semantics-changing
                     transformations, including those controlled by
                     the ieeefp, order, library, precision, and
                     exceptions suboptions.  none enables these
                     transformations.
                precision | noprecision
                     precision disables all transformations that
                     are likely to affect floating-point precision,
                     including those controlled by the subnormals,
                     operationprecision, association,
                     reductionorder, and library suboptions.
                     noprecision enables these transformations.
                exceptions | noexceptions
                     exceptions disables all transformations likely
                     to affect exceptions or be affected by them,
                     including those controlled by the nans,
                     infinities, subnormals, guards, and library
                     suboptions. noexceptions enables these
                     transformations.
                ieeefp | noieeefp
                     ieeefp disables transformations that affect
                     IEEE floating-point compliance, including
                     those controlled by the nans, infinities,
                     subnormals, zerosigns, and operationprecision
                     suboptions. noieeefp enables these
                     transformations.
                nans | nonans
                     nans disables transformations that may produce
                     incorrect results in the presence of, or that
                     may incorrectly produce IEEE floating-point
                     signaling NaN (not-a-number) values. nonans
                     enables these transformations.
                infinities | noinfinities
                     infinities disables transformations that may
                     produce incorrect results in the presence of,
                     or that may incorrectly produce floating-point
                     infinities.  noinfinities enables these
                     transformations.
                subnormals | nosubnormals
                     subnormals disables transformations that may
                     produce incorrect results in the presence of,
                     or that may incorrectly produce IEEE
                     floating-point subnormals (formerly known as
                     denorms). nosubnormals enables these
                     transformations.
                zerosigns | nozerosigns
                     zerosigns disables transformations that may
                     affect or be affected by whether the sign of a
                     floating-point zero is correct. nozerosigns
                     enables these transformations.
                operationprecision | nooperationprecision
                     operationprecision disables transformations
                     that produce approximate results for
                     individual floating-point operations.
                     nooperationprecision enables these
                     transformations.
                order | noorder
                     order disables all code reordering between
                     multiple operations that may affect results or
                     exceptions, including those controlled by the
                     association, reductionorder, and guards
                     suboptions. noorder enables code reordering.
                association | noassociation
                     association disables reordering operations
                     within an expression. noassociation enables
                     reordering operations.
                reductionorder | noreductionorder
                     reductionorder disables parallelizing
                     floating-point reductions. noreductionorder
                     enables these reductions.
                guards | noguards
                     guards disables moving operations past guards
                     or calls which control whether the operation
                     should be executed or not. enables these
                     moving operations.
                library | nolibrary
                     library disables transformations that affect
                     floating-point library functions. nolibrary
                     enables these transformations.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.

                Default:
                     o -qnostrict_induction at -O2 or higher.
                     o -qstrict_induction otherwise.

         -qtocmerge | -qnotocmerge
                Enables TOC merging to reduce TOC pointer loads and
                improves the scheduling of external loads. Reads
                from the file specified in -bImportfile linker
                option and merges the address information to access
                ranges of external addresses using a single table
                of contents entry.

                Default: -qnotocmerge

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.
                <suboption> must be one of the following:

                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                balanced
                     Optimizations are tuned across a selected
                     range of recent hardware.
                ppc970
                     Generates instructions specific to PowerPC 970
                     hardware platforms.
                pwr3
                     Generates object code optimized for the POWER3
                     hardware platforms.
                pwr4
                     Generates object code optimized for the POWER4
                     hardware platforms.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                pwr6
                     Generates object code optimized for the POWER6
                     hardware platforms.
                rs64a
                     Generates object code optimized for the RS64I
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                Default:
                     -qtune=balanced when the default -qarch
                     setting is in effect. Otherwise, the default
                     depends on the effective -qarch setting.

         -qunroll[=<suboption>] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The suboptions are:

                auto
                     Instructs the compiler to perform basic loop
                     unrolling.
                yes
                     Instructs the compiler to search for more
                     opportunities for loop unrolling than that
                     performed with auto. In general, this
                     suboption is more likely to increase compile
                     time or program size than auto processing, but
                     it may also improve your application's
                     performance.
                no
                     Instructs the compiler to not unroll loops.

                Default: -qunroll=auto

                If -qunroll is specified with no suboptions, the
                compiler assumes -qunroll=yes. -qnounroll is
                equivalent to -qunroll=no.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.

                Default: -qunwind

  Linking options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor. The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. In dynamic mode,
                     shared objects are not statically included in
                     the output file. Instead, the shared objects
                     are listed in the loader section of the output
                     file.
                     -bdynamic and -bshared are synonymous.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

                Default: -bshared

         -bmaxdata:<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint. Combined
                data space is slightly less than 256MB, or lower,
                depending onthe limits for the user ID.

                Default: -bmaxdata:0

         -brtl  Controls runtime linking for the output file.

         -qcrt | -qnocrt
                Instructs the linker to use the standard system
                startup files at link time.

                Default: -qcrt

         -e <name>
                Sets the entry name for a shared executable and is
                only used together with -qmkshrobj.

         -f<file_name>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <file_name>
                file should contain only the names of object files.
                There should be one object file per line.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.

                Default:
                     The default is to search only the standard
                     directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking.

                Default:
                     The default is to search only some of the
                     compiler runtime libraries.

         -qlib | -qnolib
                Specifies whether the compiler should use the
                standard system libraries at link time. -qnolib is
                similar to the gcc option nostdlib; the driver will
                not pass the standard system startup files or
                libraries when linking.

                Default: -qlib

         -qtwolink | -qnotwolink
                (C++) Links twice in order to minimize the number
                of static constructors included from libraries and
                object files.

                Default: -qnotwolink

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

  Portability and migration options
         -qalign=<suboption>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment suboptions are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules. This suboption is valid only for 32-bit
                     compilations. It is the same as the twobyte
                     suboption.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules. This suboption is valid only for 32-bit
                     compilations. It is the same as the mac68k
                     suboption.

                Default: -qalign=full

         -qalignrulefor=power=[no]typedefrespectsrule
                (C++) When used with -qalign=power, determines
                whether a 4-byte alignment ceiling is applied to
                non-first members of structures that are of type
                typedef to array of element type that exceeds the
                alignment ceiling.

                typedefrespectsrule | notypedefrespectsrule
                     When typedefrespectsrule is in effect, the
                     member follows the normal alignment rules for
                     -qalign=power. This suboption provides
                     compatibility with code compiled with
                     -qalign=power with XL C++ V6.0 and earlier.
                     When notypedefrespectsrule is in effect, a
                     member that exceeds the alignment ceiling of 4
                     bytes is aligned on 4-byte boundaries. This
                     suboption provides compatibility with code
                     compiled with -qalign=power with XL C++ V7.0
                     and V8.0.

                Default: -qalignrulefor=power=typedefrespectsrule

         -qgenproto[=parmnames] | -qnogenproto
                (C) Generates ANSI prototypes from K&R function
                definitions and displays them on standard output.
                Specifying -qgenproto without '=parmnames' will
                cause prototypes to be generated without parameter
                names.

                Default: -qnogenproto

         -qnamemangling=<scheme>
                (C++) Chooses the name mangling scheme for external
                symbol names generated from C++ source code. The
                <scheme> can be:

                ansi
                     Fully supports the most recent language
                     features of Standard C++.
                v10
                     Compatible with XL C++ V10.1. (This is
                     equivalent to ansi.)
                v9
                     Compatible with XL C++ V9.0.
                v8
                     Compatible with XL C++ V8.0.
                v7
                     Compatible with XL C++ V7.0.
                v6
                     Compatible with VisualAge C++ V6.0.
                v5
                     The scheme for VisualAge C++ V5.0.
                v4
                     The scheme for VisualAge C++ V4.0.
                v3
                     The scheme for VisualAge C++ releases before
                     V4.0.
                compat
                     Same as v3.

                Default: -qnamemangling=ansi

         -qobjmodel={classic|ibm}
                (C++) Specifies the object model.

                classic
                     This object model is compatible with version
                     3.6 of the IBM C and C++ compilers.
                ibm
                     Uses the object model introduced with version
                     5.0 of VisualAge C++ for AIX. Objects compiled
                     with this object model will use less memory
                     and have better performance for deep
                     inheritance with virtual bases.

                Default: -qobjmodel=classic

         -qoldpassbyvalue | -qnooldpassbyvalue
                (C++) Specifies how classes containing const or
                reference members are passed in function arguments.
                All classes in the compilation unit are affected by
                this option. When -qoldpassbyvalue is specified,
                the compiler mimics the IBM C/C++ compilers v3.6
                compiler in that when a class containing a const or
                reference member is passed as a function argument,
                it is not passed by value. All such classes in the
                compilation unit are affected.

                Default: -qnooldpassbyvalue

         -qupconv | -qnoupconv
                (C) Preserves the unsigned specification when
                performing integral promotions.

                Default:
                     o -qupconv when -qlanglvl={extended|classic}
                     o -qnoupconv otherwise

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is enabled, this option is ignored.

                Default: -qnovecnvol

  Compiler customization options
         -qasm_as=<asm_path> [<flags_list>]
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Single quotes (or double
                quotes) are required around the string of arguments
                if any spaces exist.

         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended. When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -qc_stdinc=<paths_list>
                (C) Changes the standard search location for the XL
                C headers. <paths_list> is a colon-separated list
                of paths to search.

         -qcpp_stdinc=<paths_list>
                (C++) Specifies the standard search directories for
                the XL C++ headers, where <paths_list> is a colon-
                separated list of paths.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler. <config_file> is the name of a
                compiler configuration file. <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = C++filt utility
                I = High-level optimizer - compile step
                L = High-level optimizer - link step
                l = Linker
                m = Linkage helper (C++ only)
                p = Preprocessor

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.

                Default: -qspill=512

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (i.e: -tbcI) of one or
                more of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = C++filt utility
                I = High-level optimizer  - compile step
                L = High-level optimizer - link step
                l = Linker
                m = Linkage helper (C++ only)
                p = Preprocessor


         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = c++filt utility
                I = High-level optimizer  - compile step
                L = High-level optimizer - link step
                l = Linker
                m = linkage helper (C++ only)
                p = Preprocessor


  SEE ALSO
         gxlc(1), gxlc++(1), showpdf(1), mergepdf(1), resetpdf(1),
         cleanpdf(1).

         For more information, refer to the following Web sites:
         http://www.ibm.com/software/awdtools/xlcpp/library/
         http://www.ibm.com/software/awdtools/xlcpp/support/


  COPYRIGHT
         Licensed Materials - Property of IBM.

         IBM XL C/C++ for AIX, V10.1

         5724-U81

         Copyright IBM Corp. 1991, 2008. All Rights Reserved.

         AIX, IBM, POWER3, POWER4, POWER5, POWER5+, POWER6,
         PowerPC, PowerPC 604, and SAA are trademarks or registered
         trademarks of International Business Machines Corporation
         in the United States, other countries, or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.













configure:2897: $? = 249
configure:2904: /usr/vacpp/bin/xlC_r -v >&5
exec: export(export,XL_CONFIG=/etc/vac.cfg.53:xlC_r,NULL) 
exec: /usr/bin/pg(/usr/bin/pg,/usr/vacpp/exe/default_msg/vacpp.txt,NULL) 



  xlc(1)                     IBM (2008)                      xlc(1)



  NAME
         xlc, xlc++, xlC, cc, c89, c99, xlCcore, xlc++core and
         related commands - invoke the IBM XL C/C++ compiler.


  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...


  DESCRIPTION
         The invocation commands compile C and C++ source files.
         The commands and their recommended uses are described
         below.

         Invocations                   Usage (supported standards)
         _________________________________________________________

         xlc, xlc_r, xlc_r4,           Compile C source files.
         xlc_r7, xlc128, xlc128_r,     (ANSI C89, ISO C99,
         xlc128_r4, xlc128_r7          IBM language extensions)

         xlc++, xlc++_r, xlc++_r4,     Compile C++ source files.
         xlc++_r7, xlc++128,
         xlc++128_r, xlc++128_r4,
         xlc++128_r7, xlC, xlC_r,
         xlC_r4, xlC_r7, xlC128,
         xlC128_r, xlC128_r4,
         xlC128_r7

         cc, cc_r, cc_r4, cc_r7,       Compile legacy code that
         cc128, cc128_r, cc128_r4,     does not conform to Standard
         cc128_r7                      C. (pre-ANSI C)

         c89, c89_r, c89_r4,           Compile C source files with
         c89_r7, c89_128, c89_128_r,   strict conformance to the
         c89_128_r4, c89_128_r7        C89 standard. (ANSI C89)

         c99, c99_r, c99_r4,           Compile C source files with
         c99_r7, c99_128, c99_128_r,   strict conformance to the
         c99_128_r4, c99_128_r7        C99 standard. (ISO 99)

         xlc++core, xlc++core_r,       Compile C++ source files
         xlc++core_r7, xlc++core128,   but the compiler will
         xlc++core128_r,               link only to the core of
         xlc++core128_r7, xlCcore,     the runtime library.
         xlCcore_r, xlCcore_r7,
         xlC128core, xlC128core_r,
         xlC128core_r7

         gxlc                          Accepts GNU C options, maps
                                       them to their equivalent XL
                                       C option, then invokes xlc.

         gxlc++, gxlC                  Accepts GNU C/C++ options, maps
                                       them to their equivalent XL
                                       C++ option,then invokes xlc++.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/vac.cfg.XX, where XX represents
         the AIX version).
         See the Compiler Reference for more information on these
         invocation commands.

         All invocations with a suffix of _r allow for thread-safe
         compilation. Use these commands to create threaded
         applications or to link programs that use multi-threading.

         These commands also process assembler source files and
         object files. The compiler calls the link editor to
         produce a single executable or shared library, unless you
         specify the compiler options that prevent object files
         from being linked.

         The input file may have any of the following suffixes:

          .C, .cpp, .cxx,    C++ source file
          .cc, .cp, .c++

          .c                 C source file

          .i                 Preprocessed C or C++ source file

          .a                 Archive file

          .o                 Object file for ld command

          .s                 Assembler source file

          .S                 Assembler source file that
                             needs preprocessing

          .so                Shared object file


  OPTIONS
         Compiler options are categorized by their functions and
         may be used to set the compiler behavior. Options can be
         flag options or keyword options.

         Keyword options are specified in one of the following
         ways:
         -q<option>
         -q<option>=<suboption>
         -q<option>=<suboption>:<suboption>

         Keyword options with no suboptions represent switches that
         may be either on or off. -qx turns the switch on, and
         -qnox turns the switch off. For example, -qsource tells
         the compiler to produce a source listing and -qnosource
         tells the compiler not to produce a source listing.

  Output control options
         -c     Instructs the compiler to pass source files to the
                compiler only. The compiled source files are not
                sent to the linker. This option produces an object
                file, file_name.o, for each valid source file.

         -C | -C!
                Preserves or removes comments in preprocessed
                output.
                When -C is used with the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.
                When -C! is in effect, comments are removed.

         -E     Instructs the compiler to preprocess the source
                files named in the compiler invocation and creates
                an output preprocessed source file.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file.
                Specifying -qmakedep without 'gcc' is equivalent to
                specifying -M.

         -MF<path>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <path> can be a
                full directory path or file name. Note that "-MF
                <path>" (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         (C)-qmkshrobj, (C++)-qmkshrobj[=<priority>]
                Creates a shared object from the generated object
                files.
                The optional number specifies the priority level
                for initialization of all static objects in the
                file. <priority> may be any number from -214782623
                (highest priority-initialized first) to 214783647
                (lowest priority-initialized last). If no priority
                is specified, the default priority of 0 is used.
                The priority is not used when linking shared
                objects (using the xlc command) written in C.
                Specifying -qmkshrobj implies -qpic.
                See related options, -e <name> and -o <path>.

         -o <path>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <path> can be the name of
                either a file or a directory.

                Default: -o a.out

         -P     Preprocesses the C or C++ source files named in the
                compiler invocation and creates an output
                preprocessed source file for each input source
                file. The preprocessed output file has the same
                name as the output file, with a .i suffix.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -qshowmacros[=<suboptions_list>] | -qnoshowmacros
                Emits macro definitions to preprocessed output.

                This option has no effect unless preprocessed
                output is generated.  If a macro is defined and
                subsequently undefined before compilation ends,
                this macro will not be included in the preprocessed
                output.

                Default: -qnoshowmacros

                <suboptions_list> is a colon-separated list of one
                or more of the following:

                all
                     -qshowmacros=all appends all macro definitions
                     to preprocessed output.  This is the same as
                     specifying -qshowmacros.
                pre | nopre
                     -qshowmacros=pre appends only predefined macro
                     definitions to preprocessed output.
                     -qshowmacros=nopre suppresses appending these
                     definitions.
                     Only macros defined internally by the
                     preprocessor are considered predefined; all
                     other macros are considered as user-defined.

         -qtimestamps | -qnotimestamps
                Controls whether or not implicit time stamps are
                inserted into an object file.

                This option does not affect time stamps inserted by
                pragmas and other explicit mechanisms.
                Default: -qtimestamps

  Input control options
         -+     (C++) Compiles any file, <file_name.nnn>, as a C++
                language file, where <nnn> is any suffix other than
                .a, .so, .o, .s, or .S.  This option is equivalent
                to the -qsourcetype=c++ option and should not be
                used together with the -qsourcetype option.

         -qcinc=<directory_path> | -qnocinc
                (C++) Instructs the compiler to place an extern "C"
                { } wrapper around the contents of an include file,
                where <directory_path> is the location of that
                include file.

                Default: -qnocinc

         -I<directory_path>
                Specifies an additional search path for include
                file names that do not specify an absolute path.

                Default:
                     The following directories are searched, in the
                     following order, after any paths that are
                     specified by the -I option:
                     1) The current directory.
                     2) The directory where the source file is
                     located.
                     3) /usr/include.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<file_name>" directive. Use
                -qidirfirst with the -I option. If -qidirfirst is
                specified, the directories specified by the
                -I<directory_path> option are searched before the
                directory in which the current file resides.

                Default: -qnoidirfirst

         -qinclude=<file_path>
                Specifies additional header files that are included
                before the first line of a source file in a
                compilation unit and ahead of any headers which may
                be specified by an #include statement on the first
                line of the source file.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of file name suffix), or
                whether to use the file name suffix to determine
                the programming language.
                Note that the option only affects files that are
                specified on the command line following the option,
                but not those that precede the option. The
                -qsourcetype option should not be used together
                with the -+ option. The suboptions are:

                default
                     The compiler assumes that the programming
                     language of a source  file will be implied by
                     its file name suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are assembler
                     language source files that need preprocessing.

                Default: -qsourcetype=default

         -qstdinc | -qnostdinc
                Specifies whether the standard directories are
                searched for files included by the #include
                <file_name> and #include "file_name" directives.
                The -qnostdinc option excludes the standard include
                directories from the search path.

                Default: -qstdinc

  Language element control options
         -qaltivec | -qnoaltivec
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by the -qarch option supports vector
                instructions and -qenablevmx is enabled.

                Default: -qnoaltivec

         -qasm[=<sub>] | -qnoasm[=<sub>]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.
                In (C), <sub> can only be 'gcc'.
                In (C++), <sub> can be:
                gcc
                     Interprets asm statements using GCC syntax.
                stdcpp
                     Interprets asm statements using stdcpp syntax.

                Default:
                     (C++) -qnoasm=stdcpp in compat366 or strict98
                     modes, and -qasm=gcc otherwise.
                     (C) -qasm=gcc

         -qcpluscmt | -qnocpluscmt
                (C) Permits the usage of "//" to introduce a
                comment that lasts until the end of the current
                source line, as in C++.

                Default:
                     o -qcpluscmt when you invoke the compiler with
                     xlc, xlc_r, cc, or cc_r, or when -qlanglvl is
                     set to stdc99 or extc99
                     o -qnocpluscmt otherwise

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying -D<name>= (with no <def>) is
                equivalent to #define <name>; specifying
                -D<name> is equivalent to #define <name> 1.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.

                Default: -qnodbcs

         -qdfp | -qnodfp
                Enables compiler support for decimal floating-point
                types and literals.

                Default: -qnodpf

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.

                Default:
                     (C) -qdigraph when -qlanglvl is extc89,
                     extended, extc99 or stdc99, and -qnodigraph
                     otherwise.
                     (C++) -qdigraph

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both enabled, the dollar symbol
                is treated as an extended character.

                Default: -qnodollar

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements. The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated_call
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     (C) Ignores all #pragma ibm snapshot
                     directives and all IBM SMP directives in the
                     source file.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.
                By default, all the built-in keywords defined in
                the C and C++ language standards are reserved as
                keywords. You cannot add keywords to the language
                with this option. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

                (C) This option can also be used with the following
                C keywords: restrict, typeof, asm and inline.
                (C++) This option can be used with all C++ built-in
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.

                (C) For C language programs, <suboptions_list> is
                {classic|extended|saa|saa12|stdc89|stdc99|extc89|extc99}:
                {ucs|noucs}.

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA C CPI
                     language definition. This is currently SAA C
                     Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This suboption controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.
                     Default:
                       o -qlanglvl=ucs under language levels stdc99
                       and extc99.
                       o -qlanglvl=noucs for all other language
                       levels.

                (C++) The suboptions for C++ language programs are:
                compat366
                     Compilation conforms to some, but not all, IBM
                     C and C++ Compilers V3.6 features.
                extended
                     Compilation is based on strict98, with some
                     differences to accommodate extended language
                     features.
                extended0x
                     Compilation is based on the IBM implementation
                     of the draft C++0x standard.  Currently this
                     includes new integer promotion rules for
                     arithmetic conversions with "long long" data
                     types and enhanced C++ preprocessor support
                     for C99 features.  See the "XL C/C++ Language
                     Reference" and "Getting Started with XL C/C++"
                     for more information.

                     Note that the C++0x standard is temporary and
                     has not been officially adopted in its
                     entirety. It is subject to change.
                strict98
                     Compilation conforms to the ISO C++ standard
                     for C++ programs.
                anonstruct | noanonstruct
                     This suboption controls whether anonymous
                     structs and anonymous classes are allowed in
                     your C++ source. By default, the compiler
                     allows anonymous structs.
                anonunion | noanonunion
                     This suboption controls what members are
                     allowed in anonymous unions. When this
                     suboption is set to anonunion, anonymous
                     unions can have members of all types that
                     standard C++ allows in non-anonymous unions.
                ansifor | noansifor
                     This suboption controls whether scope rules
                     defined in the C++ standard apply to names
                     declared in for-init statements. By default,
                     standard C++ rules are used.
                ansisinit | noansisinit
                     This suboption can be used to select between
                     old (v3.6 or earlier) and current (v5.0 or
                     later) compiler object compatibility.
                c99__func__ | noc99__func__
                     This suboption instructs the compiler to
                     recognize the C99 __func__ identifier.
                     The c99__func__ suboption is enabled by
                     default when -qlanglvl=extended is enabled. It
                     can be enabled for any language level by
                     specifying -qlanglvl=c99__func__, or disabled
                     by specifying -qlanglvl=noc99__func__.
                c99complex | noc99complex
                     This suboption instructs the compiler to
                     recognize C99 complex data types and related
                     keywords. It is set by default for
                     -qlanglvl=extended.
                c99complexheader | noc99complexheader
                     This suboption instructs the compiler to use
                     the C99 complex.h header file.
                c99compoundliteral | noc99compoundliteral
                     This suboption instructs the compiler to
                     support the C99 compound literal feature. It
                     is set by default for -qlanglvl=extended.
                c99hexfloat | noc99hexfloat
                     This suboption enables support for C99-style
                     hexadecimal floating constants in C++
                     applications. It is on by default for
                     -qlanglvl=extended.
                c99vla | noc99vla
                     When c99vla is enabled, the compiler will
                     support the use of C99-type variable length
                     arrays in your C++ applications. It is set by
                     default for -qlanglvl=extended.
                compatzea | nocompatzea
                     The -qlanglvl=compatzea option is a
                     compatibility option that lets you continue to
                     use a zero extent array with dimension of 1.
                     Default: -qlanglvl=nocompatzea
                     Specifying -qlanglvl=compatzea has effect only
                     if -qlanglvl=zeroextarray is also enabled.
                dependentbaselookup | nodependentbaselookup
                     Provides the ability to specify compilation in
                     conformance with issue 213 of TC1 of the C++
                     standard.
                     Default: -qlanglvl=dependentbaselookup
                gnu_assert | nognu_assert
                     Enables or disables support for the following
                     GNU C system identification assertions:
                     '#assert', '#unassert', '#cpu', '#machine',
                     '#system'.
                gnu_complex | nognu_complex
                     This suboption instructs the compiler to
                     recognize GNU complex data types and related
                     keywords.
                gnu_computedgoto | nognu_computedgoto
                     Enables support for computed gotos. This
                     suboption is enabled for -qlanglvl=extended.
                gnu_explicitregvar | nognu_explicitregvar
                     (C) Allows you to control whether the compiler
                     accepts and ignores the specification of
                     explicit registers for variables.
                gnu_externtemplate | nognu_externtemplate
                     This suboption enables or disables extern
                     template instantiations.
                     Default:
                       gnu_externtemplate is enabled by default
                       when compiling to the extended language
                       level.
                gnu_include_next | nognu_include_next
                     Enables or disables support for the GNU C
                     #include_next preprocessor directive.
                     Default:
                       gnu_include_next is enabled by default for
                       -qlanglvl=extended.
                gnu_labelvalue | nognu_labelvalue
                     Enables or disables support for labels as
                     values.
                     Default:
                       gnu_labelvalue is enabled by default for
                       -qlanglvl=extended.
                gnu_locallabel | nognu_locallabel
                     Enables or disables support for locally-
                     declared labels.
                gnu_membernamereuse | nognu_membernamereuse
                     Enables or disables reusing a template name in
                     a member list as a typedef.
                gnu_suffixij | nognu_suffixij
                     Enables or disables support for GCC style
                     complex numbers. If gnu_suffixij is specified,
                     a complex number can be ended with suffix i/I
                     or j/J.
                     Default:
                       gnu_suffixij is enabled by default for
                       -qlanglvl=extended.
                gnu_varargmacros | nognu_varargmacros
                     This option is similar to
                     -qlanglvl=varargmacros. For the list of the
                     main differences, refer to the Compiler
                     Reference.
                     Default:
                       gnu_varargmacros is set by default for
                       -qlanglvl=extended.
                gnu_warning | nognu_warning
                     Enables or disables support for the GNU C
                     #warning preprocessor directive.
                illptom | noillptom
                     This suboption controls what expressions can
                     be used to form pointers to members. C/C++ can
                     accept some forms that are in common use, but
                     do not conform to the C++ standard. The
                     compiler allows these forms by default.
                implicitint | noimplicitint
                     This suboption controls whether the compiler
                     will accept missing or partially specified
                     types as implicitly specifying 'int'. This is
                     no longer accepted in the standard but may
                     exist in legacy code.
                     With the suboption set to noimplicitint, all
                     types must be fully specified.
                     With the suboption set to implicitint, a
                     function declaration at namespace scope or in
                     a member list will implicitly be declared to
                     return int.
                newexcp | nonewexcp
                     This suboption determines whether or not the
                     C++ new operator throws an exception. If the
                     -qlanglvl=newexcp option is specified, the
                     standard exception std::bad_alloc is thrown
                     when the requested memory allocation fails.
                     This option does not apply to the nothrow
                     versions of the new operator.
                     The standard implementation of the new
                     operators fully support exceptions. For
                     compatibility with previous versions of
                     VisualAge C++, these operators return 0 by
                     default.
                offsetnonpod | nooffsetnonpod
                     This suboption controls whether the offsetof
                     macro can be applied to classes that are not
                     data-only.
                     By default, the compiler allows offsetof to be
                     used with non-POD classes.
                olddigraph | noolddigraph
                     This option controls whether old-style
                     digraphs are allowed in your C++ source. It
                     applies only when -qdigraph is also set.
                     By default, the compiler supports only the
                     digraphs specified in the C++ standard.
                oldfriend | nooldfriend
                     This option controls whether friend
                     declarations that name classes without
                     elaborated class names are treated as C++
                     errors.
                     By default, the compiler lets you declare a
                     friend class without elaborating the name of
                     the class with the keyword class.
                oldmath | nooldmath
                     This suboption controls which versions of math
                     function declarations in <math.h> are included
                     when you specify math.h as an included or
                     primary source file.
                     By default, the new standard math functions
                     are used. Build with -qlanglvl=nooldmath for
                     strict compliance with the C++ standard. For
                     compatibility with modules that were built
                     with earlier versions of VisualAge C++ and
                     predecessor products, you may need to build
                     with -qlanglvl=oldmath.
                oldtempacc | nooldtempacc
                     This suboption controls whether access to a
                     copy constructor to create a temporary object
                     is always checked, even if creation of the
                     temporary object is avoided.
                     By default, the compiler suppresses the access
                     checking.
                oldtmplalign | nooldtmplalign
                     Controls whether alignment rules specified for
                     nested templates are ignored.
                     When the default, -qlanglvl=nooldtmplalign, is
                     in effect, these alignment rules are not
                     ignored.
                     Specify -qlanglvl=oldtmplalign for
                     compatibility with VisualAge C++ 4.0 and
                     predecessor products.
                oldtmplspec | nooldtmplspec
                     This suboption controls whether template
                     specializations that do not conform to the C++
                     standard are allowed.
                     By default, the compiler allows these old
                     specializations (-qlanglvl=nooldtmplspec).
                redefmac | noredefmac
                     Specifies whether a macro can be redefined
                     without a prior #undef or undefine()
                     statement.
                trailenum | notrailenum
                     This suboption controls whether trailing
                     commas are allowed in enum declarations.
                     By default, the compiler allows one or more
                     trailing commas at the end of the enumerator
                     list.
                typedefclass | notypedefclass
                     This suboption provides backwards
                     compatibility with previous versions of
                     VisualAge C++ and predecessor products.
                ucs | noucs
                     This suboption controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in C++
                     sources.
                     Default: -qlanglvl=noucs
                varargmacros | novarargmacros
                     This C99 feature allows the use of a variable
                     argument list in function-like macros in your
                     C++ applications.
                zeroextarray | nozeroextarray
                     This suboption controls whether zero-extent
                     arrays are allowed as the last non-static data
                     member in a class definition.
                     By default, the compiler allows arrays with
                     zero elements.

                The default depends on the invocation command used:

                Command                       Default
                _____________________________________________

                xlC/xlc++                     extended
                xlc                           extc99
                cc                            extended
                c89                           stdc89
                c99                           stdc99

         -qlonglong | -qnolonglong
                Allows IBM-style long long integers. This option
                cannot be used with -qlanglvl=stdc99 or
                -qlanglvl=extc99.

                Default:
                     o -qlonglong when compiling with xlc, xlc++,
                     xlC or cc
                     o -qnolonglong when compiling with c89 or c99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.

                Default: -qnomacpstr

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters.  This is equivalent
                to -qdbcs.

                Default: -qnombcs

         -qstaticinline | -qnostaticinline
                (C++) Controls whether inline functions are treated
                as static or extern. Specifying -qnostaticinline
                means the inline functions are treated as having
                extern linkage.

                Default: -qnostaticinline

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.

                Default: -qtabsize=8

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.

                Default: -qtrigraph

                However, if -qlanglvl=classic is enabled or
                implied, the trigraphs are not recognized by
                default.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.

                Default:
                     o (C) -qnoutf
                     o (C++) -qutf for all language levels except
                     -qlanglvl=strict98
                     o (C++) -qnoutf when -qlanglvl=strict98 is in
                     effect

  Template control options (C++ only)
         -qtempinc[=<directory_path>] | -qnotempinc
                (C++) Generates separate template include files for
                template functions and class declarations, and
                places these files in a directory which can be
                optionally specified.

                Default: -qnotempinc

         -qtemplatedepth=<number>
                (C++) Specifies the maximum number of recursively
                instantiated template specializations that will be
                processed by the compiler. <number> can be a value
                between 1 and INT_MAX.

                Default: -qtemplatedepth=300

         -qtemplaterecompile | -qnotemplaterecompile
                (C++) Helps manage dependencies between compilation
                units that have been compiled using the
                -qtemplateregistry compiler option.

                Default: -qnotemplaterecompile

         -qtemplateregistry[=<filename>] | -qnotemplateregistry
                (C++) Maintains records of all templates as they
                are encountered in the source and ensures that only
                one instantiation of each template is made.

                Default: -qnotemplateregistry

         -qtempmax=<number>
                (C++) Specifies the maximum number of template
                include files to be generated by the -qtempinc
                option for each header file.

                Default: -qtempmax=1

         -qtmplinst=<suboption>
                (C++) Allows you to manage implicit template
                instantiations. <suboption> is one of the
                following:

                none
                     Instantiates only the inline functions. If
                     this is specified, -qtempinc and
                     -qtemplateregistry are ignored.
                noinline
                     Suppresses all implicit instantiations.
                auto
                     Handles the implicit instantiations according
                     to the -qtempinc and -qtemplateregistry
                     options. If both options are off, then
                     implicit instantiations are always performed.
                always
                     Always perform implicit instantiations. This
                     will ignore the -qtempinc and
                     -qtemplateregistry options.

                Default: -qtmplinst=auto

         -qtmplparse=<option>
                (C++) Controls whether parsing and semantic
                checking are applied to template definition
                implementations or only to template instantiations.
                The compiler has the option to produce warning or
                error messages. The suboptions are:

                no
                     Does not parse, to reduce the number of errors
                     issued in code written for previous versions
                     of the compiler.
                warn
                     Parses template definitions and issues warning
                     messages for semantic errors.
                error
                     Treats problems in template definitions as
                     errors, even if the template is not
                     instantiated.

                Default: -qtmplparse=no

  Floating-point and integer control options
         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.

                Default: -qbitfields=unsigned

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.

                Default: -qchars=unsigned

         -qenum=<suboption>
                Specifies the amount of storage occupied by
                enumerations, where <suboption> can be:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration. Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

                Default: -qenum=intlong

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                dfpemulate | nodfpemulate
                     Specifies whether decimal floating-point
                     computations are implemented in hardware
                     instructions or emulated in software by calls
                     to library functions.
                     -qdfp must be enabled for either suboption to
                     have any effect. nodfpemulate is only valid on
                     a system that supports decimal floating-point
                     instructions; that is, on AIX 5.3 and higher,
                     and with -qarch=pwr6 in effect. dfpemulate is
                     required for all other -qarch values.
                     Default: dfpemulate
                fenv | nofenv
                     Specifies whether the code depends on the
                     hardware environment and whether to suppress
                     optimizations that could cause unexpected
                     results due to this dependency.
                     When nofenv is in effect, the compiler assumes
                     that the program does not depend on the
                     hardware environment, and that aggressive
                     compiler optimizations that change the
                     sequence of floating-point operationsare
                     allowed to be performed. When fenv is in
                     effect, such optimizations are suppressed.
                     Default: nofenv
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. -qfloat=nofltint
                     checks floating-point-to-integer conversions
                     for out-of-range values.
                     Default:
                       o nofltint at -O2 optimization.
                       o fltint when -qnostrict or -O3 or higher
                       optimization level is in effect.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                     Default: fold
                hscmplx | nohscmplx
                     Speeds up operations involving complex
                     division and complex absolute value. This
                     suboption, which provides a subset of the
                     optimizations of the hsflt suboption, is
                     preferred for complex calculations.
                     Default: nohscmplx
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                     Default: nohsflt
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                     Default: nohssngl
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                     Default: maf
                nans | nonans
                     Generates extra instructions to detect
                     signaling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                     Default: nonans
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right. Specifying -qstrict=noieeefp also
                     relaxes IEEE conformance.
                     Default: norelax
                rndsngl | norndsngl
                     Specifies that the result of each single-precision (float)
                     operation is to be rounded to single precision.
                     -qfloat=norndsngl specifies that rounding to
                     single-precision happens only after full expressions have
                     been evaluated.
                     Default: rndsngl
                rngchk | norngchk
                     Specifying norngchk instructs the compiler to
                     skip range checking, allowing for increased
                     performance where division and sqrt operations
                     are performed repeatedly within a loop.
                     When rngchk is specified, range checking is
                     performed for input arguments for software
                     divide and inlined sqrt operations.
                     When -qstrict, -qstrict=infinities,
                     -qstrict=operationprecision, or
                     -qstrict=exceptions is active, the setting of
                     this option is forced to -qfloat=rngchk. When
                     -qnostrict is active, the setting of this
                     option is -qfloat=norngchk unless the
                     -qfloat=rngchk option is explicitly set by the
                     user.
                     Default: rngchk
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                     Default: norrm
                rsqrt | norsqrt
                     Specifies whether a sequence of code that
                     involves division by the result of a square
                     root can be replaced by calculating the
                     reciprocal of the square root and multiplying.
                     Allowing this replacement produces code that
                     runs faster. -qfloat=rsqrt has no effect
                     unless -qignerrno is also specified.
                     Default:
                       o norsqrt at -O2 optimization
                       o rsqrt when when -qnostrict or -O3 or
                       higher optimization level is in effect
                single | nosingle
                     Allows single-precision arithmetic
                     instructions to be generated for single-
                     precision floating-point values. All PowerPC
                     processors support single-precision
                     instructions; however, if you wish to preserve
                     the behavior of applications compiled for
                     earlier architectures, in which all floating-
                     point arithmetic was performed in double-
                     precision and then truncated to single-
                     precision, you can use
                     -qfloat=nosingle:norndsngl. This suboption
                     provides computation precision results
                     compatible with those provided by the
                     deprecated options
                     -qarch=com|pwr|pwrx|pwr2|p2sc|601|602|603.
                     Default: single
                spnans | nospnans
                     Detects signaling NaN on conversion from
                     single-precision to double-precision.
                     Default: nospnans

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits.
                This is equivalent to -qlongdouble.

                Default: -qnoldbl128

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits.
                This is equivalent to -qldbl128.

                Default: -qnolongdouble

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.

                Default: -qnolonglit

         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions.

                For binary floating-point types, <rounding_mode> is
                one of the following:
                m = round towards minus infinity
                n = round to the nearest representable number, ties
                to even
                p = round towards plus infinity
                z = round towards zero

                Default: -yn

                For decimal floating-point types, <rounding_mode>
                is one of the following:
                di = round towards infinities (away from zero)
                dm = round towards minus infinity
                dn = round to the nearest representable number, ties to
                even
                dna = round to the nearest representable number, ties away
                      from zero
                dnz = round to the nearest representable number, ties toward
                      zero
                dp = round towards plus infinity
                dz = round towards zero

                Default: -ydn

  Object code control options
         -q32, -q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used.

                Default: -q32

         -qalloca
                (C) Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -ma    (C) Substitutes inline code for calls to function
                alloca.

         -qeh[={v5|v6}] | -qnoeh
                (C++) Controls whether exception handling is
                enabled in the module being compiled.

                v5
                     Instructs the compiler to generate exception-
                     handling code that is compatible with
                     VisualAge C++ V5.0.
                v6
                     Instructs the compiler to generate new
                     exception-handling code, compatible with
                     VisualAge C++ V6.0, that correctly handles
                     try-catch blocks nested within other catch
                     blocks.

                Default: -qeh=v6

         -qexpfile=<file_name>
                Saves the exported symbols in the specified file
                and is only used together with the -qmkshrobj
                compiler option.
                Refer to the -qmkshrobj option for more
                information.

         -qfuncsect[=[no]implicitstaticref] | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect. -qfuncsect
                can take the following suboption:

                implicitstaticref | noimplicitstaticref
                     Specifies whether the compiler generates dummy
                     references to the static area. Specifying
                     -qfuncsect with no suboption implies
                     implicitstaticref. Specifying
                     noimplicitstaticref removes unnecessary
                     references to the static data area.

                Default: -qnofuncsect

         -qinlglue | -qnoinlglue
                This option inlines glue code that optimizes
                external function calls when compiling at -q64 and
                -O2 and higher.

                Default: -qnoinlglue

         -qkeepinlines | -qnokeepinlines
                (C++) Instructs the compiler to keep or discard
                definitions for unreferenced extern inline
                functions. Discarding these definitions can reduce
                the size of the object files. The -qkeepinlines
                setting keeps the definitions of unreferenced
                extern inline functions.

                Default: -qnokeepinlines

         -qpic[={small|large}] | -qnopic
                Generates position-independent code (pic). Specify
                -qpic=small if the Global Offset Table in 32-bit
                mode or Table of Contents in 64-bit mode must be 64
                Kb or smaller, or -qpic=large if it can be larger
                than 64 Kb.

                Default: -qpic=small

         -qppline | -qnoppline
                When used in conjunction with the -E or -P options,
                enables or disables the generation of #line
                directives in the preprocessed output.

                Default:
                     o -qnoppline with -P
                     o -qppline with -E

         -qpriority=<num>
                (C++) Specifies the priority level for the
                initialization of static objects, where <num> is
                the initialization priority level assigned to the
                static objects within a file, or the priority level
                of a shared or non-shared file or library.
                You can specify a priority level from -(2147483647
                + 1) (highest priority) to +2147483647 (lowest
                priority).

                Default: -qpriority=0

         -qproto | -qnoproto
                (C) Assumes that all functions are prototyped.
                Asserts that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.

                Default: -qnoproto

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a  different fixed
                role. <registers_list> is a colon-separated list of
                registers.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.

                Default:
                     o -qnoro with cc and its derivatives
                     o -qro otherwise

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.

                Default:
                     o -qroconst with xlc, xlc++, xlC, c89 and c99
                     invocations commands
                     o -qnoroconst with cc.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers.

                Default: -qnoroptr

         -qrtti=<option> | -qnortti
                (C++) Generates runtime type identification (RTTI)
                information for the typeid and dynamic_cast
                operators.  The suboptions are:

                all
                     Generates the information needed for the RTTI
                     typeid and dynamic_cast operators.
                type | typeinfo
                     Generates the information needed for the RTTI
                     typeid operator only.
                dyna | dynamiccast
                     Generates the information needed for the RTTI
                     dynamic_cast operator only.

                Default: -qnortti

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, the version and level of each compiler
                component invoked during compilation, and other
                information to the corresponding object file.
                This option must be used with the -c option.

                Default: -qnosaveopt

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list
                (the symbol table of objects).

                Default: -qnostatsym

         -qtbtable=<suboption>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  Suboptions
                include:

                none
                     No traceback table is generated.
                small
                     A traceback table is generated with no name or
                     parameter information. This is the default
                     with optimization if -g is not specified.
                full
                     A full traceback table is generated. This is
                     the default with -qnoopt or -g specified.

                Default:
                     o -qtbtable=full when compiling non-optimized
                     (without -O) or for debugging (with -g)
                     o -qtbtable=small otherwise

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.

                Default:
                     o -qthreaded when compiling invocation
                     commands ending in "_r" or "_r7".
                     o -qnothreaded otherwise.

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                     This model is the most general, and can be
                     used for all thread-local variables.
                local-dynamic
                     This model provides better performance than
                     the global-dynamic model, and can be used for
                     thread-local variables defined in
                     dynamically-loaded modules.
                initial-exec
                     This model provides better performance than
                     the global-dynamic or local-dynamic models,
                     and can be used for thread-local variables
                     defined in dynamically-loaded modules,
                     provided that those modules are loaded at the
                     same time as the executable.
                local-exec
                     This model provides the best performance of
                     all of the models, but can only be used when
                     all thread-local variables are defined and
                     referenced by the main executable.

                Default:
                     o -qtls=unsupported
                     o -qtls=initial_exec if the -qnopic compiler
                     option is enabled.
                     o -qtls=global_dynamic if the -qpic compiler
                     option is enabled.

         -qunique | -qnounique
                (C++) Generates unique names for static
                constructor/destructor file compilation units.
                (C) Generates unique names for the sinit and sterm
                functions which are used by #pragma init and
                #pragma fini, respectively.

                Default: -qnounique

         -qweakexp | -qnoweakexp
                When used with the -qmkshrobj or -G options,
                includes or excludes global symbols marked as weak
                from the export list generated when you create a
                shared object.

                Default: -qweakexp

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.

                Default: -qweaksymbol

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.

                Default: -qnoxcall

  Error checking and debugging options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process.  <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                all
                     Enables all suboptions.
                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.

                Specifying -qcheck with no suboptions is equivalent
                to -qcheck=all.

                Default: -qnocheck

         -qdbxextra | -qnodbxextra
                (C) Specifies that all typedef declarations,
                struct, union, and enum type definitions are
                included for debugging. Use this option with the -g
                option to produce additional debugging information
                for use with a debugger.

                Default: -qnodbxextra

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.

                Default: -qnodpcl

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.

                Default: -qnoextchk

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                enable
                     Enables trapping of the specified exceptions.
                imprecise
                     Only checks for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detects floating-point inexact exceptions.
                invalid
                     Detects floating-point invalid operation
                     exceptions.
                nanq
                     Generates code to detect and trap NaNQ (Quiet
                     Not-a-Number) exceptions handled or generated
                     by floating-point operations.
                overflow
                     Detects floating-point overflow.
                underflow
                     Detects floating-point underflow.
                zerodivide
                     Detects floating-point division by zero.

                Default: -qnoflttrap

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                Default:
                     o -qnoformat, which is equivalent to
                     -qformat=noall.
                     o -qformat=all if -qformat is specified
                     without any suboptions.

         -qfullpath | -qnofullpath
                Records the full or absolute path names of source
                and include files in object files compiled with
                debugging information (when you use the -g option).

                Default: -qnofullpath

         -g     Generates debug information for debugging tools.
                -g implies the -Q! option.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>. The severity levels in
                increasing order of severity are:

                i = informational messages
                w = warning messages
                e = error messages (C only)
                s = severe error messages

                Default: -qhalt=s

         -qhaltonmsg=<msgnum_list>
                (C++) Stops the compiler after the compilation
                phase where it encounters the specified message
                number(s), where <msgnum_list> is a comma-separated
                list of message numbers.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.

                Default: -qnoheapdebug

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces or suppresses informational messages.
                <groups_list> is a colon-separated list. If a
                <groups_list> is specified along with a
                <suboption>, a colon must separate them. The
                suboptions are:

                all
                     Enables all diagnostic messages for all
                     groups.
                noall
                     Disables all diagnostic messages for all
                     groups.
                als
                     Enables reporting of possible violations of
                     the ANSI aliasing rule in effect.
                noals
                     Disables reporting of possible ANSI aliasing-
                     rule violations.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                <groups_list> turns on or off specific groups of
                messages and is a colon-separated list of one or
                more of the following:

                c99 | noc99
                     (C) C code that might behave differently
                     between C89 and C99 language levels
                cls | nocls
                     C++ classes
                cmp | nocmp
                     Possible redundancies in unsigned comparisons
                cnd | nocnd
                     Possible redundancies or problems in
                     conditional expressions
                cns | nocns
                     Operations involving constants
                cnv | nocnv
                     Conversions
                dcl | nodcl
                     Consistency of declarations
                eff | noeff
                     Statements and pragmas with no effect
                enu | noenu
                     Consistency of enum variables
                ext | noext
                     Unused external definitions
                gen | nogen
                     General diagnostic messages
                gnr | nognr
                     Generation of temporary variables
                got | nogot
                     Use of goto statements
                ini | noini
                     Possible problems with initialization
                lan | nolan
                     Language level effects
                obs | noobs
                     Obsolete features
                ord | noord
                     Unspecified order of evaluation
                par | nopar
                     Unused parameters
                por | nopor
                     Non-portable language constructs
                ppc | noppc
                     Possible problems with using the preprocessor
                ppt | noppt
                     Trace of preprocessor actions
                pro | nopro
                     Missing function prototypes
                rea | norea
                     Code that cannot be reached
                ret | noret
                     Consistency of return statements
                trd | notrd
                     Possible truncation or loss of data or
                     precision
                tru | notru
                     Variable names truncated by the compiler
                trx | notrx
                     Rounding of hexadecimal floating-point
                     constants
                uni | nouni
                     Uninitialized variables
                upg | noupg
                     Upgrade issues from one release to the next
                     release
                use | nouse
                     (C++) Unused auto and static variables
                vft | novft
                     (C++) Generation of virtual function tables in
                     C++ programs
                zea | nozea
                     Zero-extent arrays

                Default:
                     (C) -qnoinfo
                     (C++) -qinfo=lan:trx
                If -qinfo is specified without a suboption, the
                default is -qinfo=all for C and -qinfo=all:noppt
                for C++.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes each byte or word of storage for
                automatic variables to the specified hexadecimal
                value <hex_value>. This generates extra code and
                should only be used for error determination.

                Default: -qnoinitauto

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized. As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers.

                Default: -qnokeepparm

         -qlinedebug | -qnolinedebug
                Generates only abbreviated line number and source
                file name information for the debugger.

                Default: -qnolinedebug

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached. <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error (C only)
                s = severe error

                Default: -qnomaxerr

         -qoptdebug | -qnooptdebug
                When used with high levels of optimization,
                -qoptdebug produces source files containing
                optimized pseudocode that can be read by a
                debugger.
                An output file with a .optdbg extension is created
                for each input file compiled with -qoptdebug. You
                can use the information contained in this file to
                help you understand how your code actually behaves
                under optimization.

                Default: -qnooptdebug

         -qsymtab={unref|static}
                (C) Determines what types of information appear in
                the symbol table. The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                Default:
                     The default is to not add static variables to
                     the symbol table.

         -qsyntaxonly
                (C) Performs syntax checking without generating an
                object file.

                Default:
                     By default, source files are compiled and
                     linked to generate an executable file.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.

                Default: -qnowarn64

  Listing and messages options
         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.

                Default: -qnoattr

         -qdump_class_hierarchy
                (C++) For each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal. The message severity levels are:

                i = informational messages
                w = warning messages
                e = error, severe error and unrecoverable error
                messages (C only)
                s = severe error and unrecoverable error messages
                (C)
                s = severe error messages (C++)

                Default: -qflag=i:i

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.

                offset | nooffset
                     Changes the offset of the PDEF header from
                     00000 to the offset of the start of the text
                     area.

                Specifying -qlist without the suboption is
                equivalent to list=nooffset.

                Default: -qnolist

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.

                Default: -qnolistopt

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output. The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.

                Default: -qnophsinfo

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.

                Default: -qprint

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are optimized.
                The compiler also reports the number of streams
                created for a given loop.  The transformation
                reports are included as part of the compiler
                listing. This option requires -qhot or -qsmp in
                order to have effect.
                When used with -qipa=clonearch, -qreport produces
                transformation reports on the procedures that are
                cloned for the architectures specified by the
                option.

                Default: -qnoreport

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files.
                sys | nosys
                     Specifies whether to show system include
                     files.
                all
                     Shows both user and system include files.

                Default: -qnoshowinc

         -qsource | -qnosource
                Produces a compiler listing that includes source
                code.

                Default: -qnosource

         -qsrcmsg | -qnosrcmsg
                (C) Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.

                Default: -qnosrcmsg

         -qsuppress=<msg_id> | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where <msg_id>
                is a colon-separated list of message numbers that
                will not be displayed.

                Default: -qnosuppress

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -qversion[=verbose]
                Displays the official compiler product name and the
                compiler version found on the system.

                verbose
                     Additionally displays information about the
                     version, release, and level of each compiler
                     component installed.


         -w     Suppresses informational, language-level and
                warning messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e in C or -qflag=s:s in C++.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers.
                Specifying -qxref will report only identifiers that
                are used, -qxref=full reports all identifiers in
                the program, and -qnoxref does not report any
                identifiers in the program. The -qnoprint option
                overrides this option.

                Default: -qnoxref

  Optimization and tuning options
         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.

                overlap | nooverlap
                     Enables or disables optimizations for
                     structure and union assignments. nooverlap
                     assumes that the source and destination for
                     structure and union assignments do not
                     overlap, allowing the compiler to generate
                     faster code. overlap inhibits these
                     optimizations.

                Default: -qaggrcopy=nooverlap

         -qalias=<suboptions_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <suboptions_list> is a
                colon-separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     Pointers are never aliased if allptrs is
                     specified, but may be aliased if noallptrs is
                     specified. -qalias=allptrs implies
                     -qalias=typeptr.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. This option has no effect unless
                     you also specify the -O option.
                     Specifying -qalias=noansi turns off type-based
                     aliasing completely.
                global | noglobal
                     When global is in effect, type-based aliasing
                     rules are enabled during IPA link-time
                     optimization across compilation units. Both
                     -qipa and -qalias=ansi must be enabled for
                     -qalias=global to have an effect.
                     Specifying noglobal disables type-based
                     aliasing rules across compilation units.
                restrict | norestrict
                     When restrict is in effect, optimizations for
                     pointers qualified with the restrict keyword
                     are enabled. Specifying norestrict disables
                     optimizations for restrict-qualified pointers.
                     -qalias=restrict is independent from other
                     -qalias suboptions.
                typeptr | notypeptr
                     Pointers to different types are never aliased
                     if typeptr is specified, but may be aliased if
                     notypeptr is specified.

                Default:
                     (C++) -qalias=noaddrtaken:noallptrs:ansi:global:
                     restrict:notypeptr
                     (C) -qalias=noaddrtaken:noallptrs:ansi:global:
                     restrict:notypeptr for all invocation commands
                     except cc.
                     -qalias=noaddrtaken:noallptrs:noansi:global:
                     restrict:notypeptr for the cc invocation command.

         -qarch=<suboption>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation.  For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                403
                     Produces object code containing instructions
                     that will run on the PowerPC 403 hardware
                     platform.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 hardware platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on the POWER5+ hardware platforms.
                pwr6
                     Produces object code containing instructions
                     that will run on the POWER6 hardware platforms
                     running in POWER6 architected mode.  If you
                     would like support for decimal floating-point
                     instructions, be sure to specify this
                     suboption during compilation.
                pwr6e
                     Produces object code containing instructions
                     that will run on the POWER6 hardware platforms
                     running in POWER6 raw mode.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms.  Using -q64 with ppc upgrades the
                     architecture to ppc64.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.
                     In 64-bit mode, produces object code
                     containing optional graphics instructions that
                     will run on 64-bit PowerPC platforms, but not
                     on 32-bit-only platforms. Using -q64 with
                     ppcgr upgrades the architecture to ppc64gr.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                ppc64v
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional vector instructions, such as a
                     PowerPC 970.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.

                Default: -qarch=ppc

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0         Direct-mapped cache
                          1         Fully associative cache
                          (n > 1)   n-way set associative cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies which level of cache is affected,
                     where level is one of the following:
                          1     Basic cache
                          2     Level-2 cache
                          3     Table Lookaside Buffer (TLB)
                     If a machine has more than one level of cache,
                     use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                          c = Combined data and instruction cache
                          d = Data cache
                          i = Instruction cache

                Default:
                     The -qtune setting determines the optimal
                     default -qcache settings for most typical
                     compilations. -O4, -O5, or -qipa must be
                     specified with the -qcache option.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.

                Default: -qnocompact

         -qdataimported[=<variable_names>]
                Specifies variables that the compiler can assume
                are imported. <variable_names> is a colon-separated
                list of variables. Specifying -qdataimported
                without <variable_names> instructs the compiler to
                assume that all variables are imported. This is
                equivalent to specifying -qnotocdata.
                (C++) Variable names must be specified using their
                mangled names.

         -qdatalocal[=<variable_names>]
                Specifies variables that the compiler can assume
                are local.  <variable_names> is a colon-separated
                list of variables.
                Specifying -qdatalocal with no variables instructs
                the compiler to assume that all variables are
                local. This is equivalent to specifying -qtocdata.
                (C++) Variable names must be specified using their
                mangled names.

         -qtocdata | -qnotocdata
                Marks all data as local.

                Default: -qnotocdata (marks all data as imported)

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.

                Default: -qnodirectstorage

         -qenablevmx | -qnoenablevmx
                Enables the generation of vector instructions for
                processors that support them. These instructions
                can offer higher performance when used with
                algorithmic-intensive tasks such as multimedia
                applications.
                For -qenablevmx to have effect, the architecture
                specified by the -qarch option must support vector
                instructions.
                If -qnoenablevmx is in effect, -qaltivec,
                -qvecnvol, and -qhot=simd cannot be used.

                Default: -qnoenablevmx

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the IBM Feedback Directed Program Restructuring
                (FDPR) performance-tuning utility.

                Default: -qnofdpr

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<number>] | noarraypad
                     When <number> is specified, the compiler will
                     pad every array in the code. The pad amount
                     must be a positive integer value. Otherwise,
                     the compiler will pad any arrays where it
                     infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     0
                          The compiler performs a subset of the
                          high-order transformations. Some of these
                          include early distribution, loop
                          interchange, and loop tiling, as
                          examples. Optimization level -O3 implies
                          -qhot=level=0.
                     1
                          At level=1, full high-order
                          transformation is performed.
                          -qhot=level=1 is equivalent to -qhot and
                          the compiler options that imply -qhot
                          also imply -qhot=level=1, unless
                          -qhot=level=0 is explicitly specified.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a vector instruction.  This call calculates
                     several results at one time, which is faster
                     than calculating each result sequentially. If
                     you specify -qhot=nosimd, the compiler
                     performs optimizations on loops and arrays,
                     but avoids replacing certain code with vector
                     instructions.  To enable -qhot=simd, you must
                     specify an architecture that supports vector
                     instructions.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher
                     (otherwise -qhot=vector has no effect), the
                     compiler converts certain operations in a loop
                     that apply to successive elements of an array
                     into a call to a routine in the Mathematical
                     Acceleration Subsystem (MASS) library, part of
                     the libxlopt.a library.
                     If you specify -qhot=novector, the compiler
                     performs optimizations on loops and arrays,
                     but avoids replacing certain code with calls
                     to vector library routines.

                Specifying -qhot without suboptions is equivalent
                to -qhot=noarraypad:level=1:nosimd:vector. If you
                specify -qhot without suboptions with -qenablevmx
                and a -qarch value that supports vector processing,
                -qhot=simd is enabled by default.

                Default:
                     o -qnohot
                     o -qhot=noarraypad:level=0:nosimd:novector
                     when -O3 is in effect.
                     o -qhot=noarraypad:level=1:nosimd:vector when
                     -qsmp, -O4 or -O5 is in effect.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.

                Default: -qnoignerrno

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).
                <suboptions_list> is a colon-separated list of the
                following suboptions:

                clonearch=<arch_names> | noclonearch
                     Specifies the architectures for which multiple
                     versions of the same instruction set are
                     produced, where <arch_names> is a comma-
                     separated list of architecture names. Use this
                     suboption if you require optimal performance
                     on multiple differing machines running the
                     same copy of your application.
                cloneproc=<function_names> |
                nocloneproc=<function_names>
                     Specifies the name of the functions to clone
                     for the architectures specified by the
                     clonearch suboption, where <function_names> is
                     a comma-separated list of function names.
                exits=<function_names>
                     Specifies names of functions which represent
                     program exits.  <function_names> is a comma-
                     separated list of function names.
                infrequentlabel=<function_names>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate functions will be
                     inlined. <suboption> can be one of the
                     following:
                     auto|noauto
                          Enables or disables automatic function
                          inlining by the high-level optimizer.
                          When -qipa=inline=auto is in effect, the
                          compiler considers all functions that are
                          under the maximum size limit (see below)
                          for inlining. When -qipa=inline=noauto is
                          in effect, only functions listed in the
                          <functions> suboption are considered for
                          inlining.
                     <functions>
                          Specifies a comma-separated list of
                          functions to attempt to inline.
                     limit=<num>
                          Specifies a limit on the size of a
                          calling function after inlining. This
                          only takes effect when inline=auto is on.
                          If you do not specify a value for <num>,
                          <num> is 8192 by default.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on. If you do
                          not specify a value for <num>, <num> is
                          1024 by default.
                     Default: auto
                noinline[=<functions>]
                     Specifies a comma-separated list of functions
                     which are not to be inlined. Specifying
                     noinline without <functions> asserts that no
                     functions are to be inlined.
                isolated=<functions>
                     Specifies a comma-separated list of functions
                     that are not compiled with -qipa and do not
                     directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs only minimal interprocedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     Default: 1
                list[={<file_name>|short|long}]
                     Specifies an output listing file name during
                     the link phase. The default name is "a.lst".
                     Specifying 'long' or 'short' can be used to
                     request more or less information in the
                     listing file to determine which listing
                     sections will be included.
                     Default: short
                lowfreq=<functions>
                     Specifies a comma-separated list of functions
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Informs the compiler that the dynamic memory
                     allocation routines will return 16-byte
                     aligned memory addresses. The compiler can
                     then optimize the code based on that
                     assertion.
                     Default: malloc16
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for functions
                     not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                     Default: missing=unknown
                object | noobject
                     Specifies whether to include standard object
                     code in the object files. Specifying
                     'noobject' can substantially reduce overall
                     compile time by not generating object code
                     during the first IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                     Default: partition=medium
                pure=<functions>
                     Specifies a comma-separated list of functions
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<functions>
                     Specifies a comma-separated list of functions
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<suboption>] | nothreads
                     Runs portions of the IPA optimization process
                     during pass 2 in parallel threads, which can
                     speed up the linking process on multi-
                     processor systems. <suboption> can be one of
                     the following:
                     auto | noauto
                          When auto is in effect, the compiler
                          selects a number of threads heuristically
                          based on machine load. When noauto is in
                          effect, the compiler spawns one thread
                          per machine processor.
                     <number>
                          Instructs the compiler to use a specific
                          number of threads. <number> can be any
                          integer value in the range of 1 to 32767.
                          However, <number> is effectively limited
                          to the number of processors available on
                          your system.
                     Specifying threads with no suboptions implies
                     threads=auto.
                     Default: -qipa=threads
                unknown=<functions>
                     Specifies a comma-separated list of functions
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <file_name>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                Regular expressions are supported when specifying
                function names for these suboptions:
                cloneproc, nocloneproc, exits, inline, noinline,
                isolated, lowfreq, pure, safe, unknown.
                (C++) Function names must be specified using their
                mangled names.

                Default:
                     o -qnoipa
                     o -qipa=inline=auto:level=1:missing=unknown:
                     partition=medium:threads=auto when -O4 is in
                     effect.
                     o -qipa=inline=auto:level=2:missing=unknown:
                     partition=medium:threads=auto when -O5 is in
                     effect.
                     o -qipa=inline=auto:level=0:missing=unknown:
                     partition=medium:threads=auto when -qpdf1 or
                     -qpdf2 is in effect.

         -qisolated_call=<procedures>
                Informs the compiler that specific functions do not
                have or rely on side effects, other than those
                implied by their parameters. <procedures> is a
                colon-separated list of function names.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large pages provided on certain Power systems.

                Default: -qnolargepage

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are, in fact, the
                library functions.

                Default: -qnolibansi

         -qmaxmem=<size>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <size> kilobytes.
                When <size> is -1, the optimizer will use as much
                memory as needed.

                Default:
                     o -qmaxmem=8192 when -O2 level optimization is
                     set.
                     o -qmaxmem=-1 when -O3 level or greater
                     optimization is set.

         -qminimaltoc | -qnominimaltoc
                Avoids Table of Contents (TOC) overflow conditions
                by placing TOC entries into a separate data section
                for each object file. By default, the compiler will
                allocate at least one TOC entry for each unique
                non-automatic variable reference in your program.

                Default: -qnominimaltoc

         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2. The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program. The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations.
                     Specifying -O3 implies -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                       o sets the -qarch and -qtune options to the
                       architecture of the compiling machine.
                       o sets the -qcache option most appropriate
                       to the characteristics of the compiling
                       machine.
                       o sets the -qipa option.
                       o sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                Specifying -O with no <level> is equivalent to
                specifying -O2.

                Default: -O0

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.

                Default: -qnooptimize

         -p, -pg, -qprofile={-p|-pg}
                Sets up the object files produced by the compiler
                for profiling.
                -pg is like -p, but it produces more extensive
                statistics.

         -qpdf1[=pdfname=<file_path] | -qnopdf1
                Tunes optimizations through profile-directed
                feedback (PDF), where results from sample program
                execution are used to improve optimization near
                conditional branches and in frequently executed
                code sections.
                Used with a minimum optimization level of -O2,
                -qpdf1 produces an object that is instrumented to
                collect runtime execution information. This is
                phase 1 of the profile-directed feedback
                optimization process.

                pdfname=<file_path>
                     Specifies the location and name of the profile
                     data file containing the PDF profiling
                     information.
                     Default:
                       If you do not specify <file_path>, the
                       default file name is ._pdf and the file is
                       saved in the current working directory, or
                       in the directory named by the PDFDIR
                       environment variable, if it is set.

                Default: -qnopdf1

         -qpdf2[=pdfname=<file_path>] | -qnopdf2
                Tunes optimizations through profile-directed
                feedback (PDF), where results from sample program
                execution are used to improve optimization near
                conditional branches and in frequently executed
                code sections.
                Used with a minimum optimization level of -O2,
                -qpdf2 tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

                pdfname=<file_path>
                     Specifies the location and name of the profile
                     data file containing the PDF profiling
                     information.
                     Default:
                       If you do not specify <file_path>, the
                       default file name is ._pdf and the file is
                       saved in the current working directory, or
                       in the directory named by the PDFDIR
                       environment variable, if it is set.

                Default: -qnopdf2

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.

                Default: -qprefetch

         -qprocimported[=<procedures>] | -qnoprocimported
                Specifies functions that the compiler can assume
                are imported. Imported functions are dynamically
                bound with a shared portion of a library. Code
                generated for calls to functions marked as imported
                may be larger, but is faster than the default code
                sequence generated for functions marked as unknown.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -qproclocal[=<procedures>] | -qnoproclocal
                Specifies functions that the compiler can assume
                are local. Local functions are statically bound
                with the functions that call them; smaller, faster
                code is generated for calls to such functions.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -qprocunknown[=<procedures>] | -qnoprocunknown
                Specifies functions that the compiler can assume are
                unknown. Unknown functions are resolved to either
                statically or dynamically bound objects during linking.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -Q[<suboption>]
                (C++) Instructs the compiler to try to inline
                functions. Inlining is performed if possible but,
                depending on which optimizations are performed,
                some functions might not be inlined.

                (C) Specifies which specific functions the compiler
                should attempt to inline. You must specify at least
                an optimization level of -O2 for inlining to take
                effect with -Q. To turn on inline expansion for
                calls to procedures in different scopes, you must
                also use the -qipa=inline.

                (C++) In the C++ language, this option can take the
                form:

                -Q
                     Compiler inlines all functions that it can.
                -Q!
                     Compiler does not inline any functions.

                (C) In the C language, this option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions
                     with 20 executable source statements or fewer,
                     subject to the setting of any of the
                     suboptions to the -Q option. If -Q is
                     specified last, all functions are inlined.
                -Q!
                     Does not inline any functions. If -Q! is
                     specified last, no functions are inlined.
                -Q-<names>
                     Does not inline functions listed in <names>,
                     where <names> is a colon-separated list. All
                     other appropriate functions are inlined. The
                     option implies -Q.
                -Q+<names>
                     Attempts to inline the functions listed in
                     <names>, where <names> is a colon-separated
                     list. All other appropriate functions are
                     inlined.
                -Q=<threshold>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <threshold> for
                     the function to be inlined.

                Default: -Q!

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function.

                (C++) In C++, you cannot specify any suboptions.
                -qinline specifies that all appropriate functions
                should be inlined, and -qnoinline specifies that no
                functions should be inlined.

                (C) In C, this option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline+<procedures>
                     Attempts to inline the functions listed in
                     <procedures> and any other appropriate
                     functions, where <procedures> is a colon-
                     separated list.
                -qinline-<procedures>
                     Specifies that functions listed in
                     <procedures> do not get inlined, where
                     <procedures> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.

                Default:
                     The default is to treat inline specifications
                     as a hint to the compiler, and the result
                     depends on other options that you select. If
                     you specify the -g option (to generate debug
                     information), inlining may be affected.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O2 to add additional call and block count
                profiling information to an executable.

                Default: -qnoshowpdf

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame. This option is
                only valid when used together with IPA (-qipa, -O4,
                -O5 compiler options).

                Default: -qnosmallstack

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with OpenMP directives is
                     optimized.
                     Default: auto
                nested_par | nonested_par
                     If nested_par is specified, prescriptive
                     nested parallel constructs are parallelized by
                     the compiler.
                     Default: nonested_par
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                     Default: noomp
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                     Default: opt
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                     Default: norec_locks
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                       o affinity[=<num>]
                       o dynamic[=<num>]
                       o guided[=<num>]
                       o runtime
                       o static[=<num>],
                     where <num> is the number of loop iterations.
                     Default: schedule=runtime
                stackcheck | nostackcheck
                     Causes the compiler to check for stack
                     overflow by slave threads at run time, and
                     issue a warning if the remaining stack size is
                     less than the number of bytes specified by the
                     stackcheck option of the XLSMPOPTS environment
                     variable. This suboption is intended for
                     debugging purposes, and only takes effect when
                     XLSMPOPTS=stackcheck is also set.
                     Default: nostackcheck
                threshold[=<num>]
                     When -qsmp=auto is in effect, controls the
                     amount of automatic loop parallelization that
                     occurs. The value of <num> represents the
                     lower limit allowed for parallelization of a
                     loop, based on the level of "work" present in
                     a loop.
                     Default:
                       <num> must be a positive integer of 0 or
                       greater. If you specify threshold with no
                       suboption, the program uses a default value
                       of 100.

                Specifying -qsmp without suboptions is equivalent
                to -qsmp=auto:explicit:noomp:opt:norec_locks:
                nonested_par:schedule=runtime:nostackcheck:
                threshold=100.

                Default: -qnosmp

         -qspeculateabsolutes | -qnospeculateabsolutes
                Works with the -qtocmerge -bl:file for non-IPA
                links and with the -bl:file for IPA links to
                disable speculation at absolute addresses.
                The bl:file is necessary for the compiler to know
                which addresses are absolutes.

                Default: -qspeculateabsolutes

         -qstrict[=<suboptions_list>] | -qnostrict
                Ensures that optimizations done by default at
                optimization levels -O3 and higher, and, optionally
                at -O2, do not alter the semantics of a program.

                The -qstrict=all, -qstrict=precision,
                -qstrict=exceptions, -qstrict=ieeefp, and
                -qstrict=order suboptions and their negative forms
                are group suboptions that affect multiple,
                individual suboptions. Group suboptions act as if
                either the positive or the no form of every
                suboption of the group is specified.

                Default:

                     o Always -qstrict or -qstrict=all when the
                     -qnoopt or -O0 optimization level is in effect
                     o -qstrict or -qstrict=all is the default when
                     the -O2 or -O optimization level is in effect
                     o -qnostrict or -qstrict=none is the default
                     when -O3 or a higher optimization level is in
                     effect

                <suboptions_list> is a colon-separated list of one
                or more of the following:

                all | none
                     all disables all semantics-changing
                     transformations, including those controlled by
                     the ieeefp, order, library, precision, and
                     exceptions suboptions.  none enables these
                     transformations.
                precision | noprecision
                     precision disables all transformations that
                     are likely to affect floating-point precision,
                     including those controlled by the subnormals,
                     operationprecision, association,
                     reductionorder, and library suboptions.
                     noprecision enables these transformations.
                exceptions | noexceptions
                     exceptions disables all transformations likely
                     to affect exceptions or be affected by them,
                     including those controlled by the nans,
                     infinities, subnormals, guards, and library
                     suboptions. noexceptions enables these
                     transformations.
                ieeefp | noieeefp
                     ieeefp disables transformations that affect
                     IEEE floating-point compliance, including
                     those controlled by the nans, infinities,
                     subnormals, zerosigns, and operationprecision
                     suboptions. noieeefp enables these
                     transformations.
                nans | nonans
                     nans disables transformations that may produce
                     incorrect results in the presence of, or that
                     may incorrectly produce IEEE floating-point
                     signaling NaN (not-a-number) values. nonans
                     enables these transformations.
                infinities | noinfinities
                     infinities disables transformations that may
                     produce incorrect results in the presence of,
                     or that may incorrectly produce floating-point
                     infinities.  noinfinities enables these
                     transformations.
                subnormals | nosubnormals
                     subnormals disables transformations that may
                     produce incorrect results in the presence of,
                     or that may incorrectly produce IEEE
                     floating-point subnormals (formerly known as
                     denorms). nosubnormals enables these
                     transformations.
                zerosigns | nozerosigns
                     zerosigns disables transformations that may
                     affect or be affected by whether the sign of a
                     floating-point zero is correct. nozerosigns
                     enables these transformations.
                operationprecision | nooperationprecision
                     operationprecision disables transformations
                     that produce approximate results for
                     individual floating-point operations.
                     nooperationprecision enables these
                     transformations.
                order | noorder
                     order disables all code reordering between
                     multiple operations that may affect results or
                     exceptions, including those controlled by the
                     association, reductionorder, and guards
                     suboptions. noorder enables code reordering.
                association | noassociation
                     association disables reordering operations
                     within an expression. noassociation enables
                     reordering operations.
                reductionorder | noreductionorder
                     reductionorder disables parallelizing
                     floating-point reductions. noreductionorder
                     enables these reductions.
                guards | noguards
                     guards disables moving operations past guards
                     or calls which control whether the operation
                     should be executed or not. enables these
                     moving operations.
                library | nolibrary
                     library disables transformations that affect
                     floating-point library functions. nolibrary
                     enables these transformations.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.

                Default:
                     o -qnostrict_induction at -O2 or higher.
                     o -qstrict_induction otherwise.

         -qtocmerge | -qnotocmerge
                Enables TOC merging to reduce TOC pointer loads and
                improves the scheduling of external loads. Reads
                from the file specified in -bImportfile linker
                option and merges the address information to access
                ranges of external addresses using a single table
                of contents entry.

                Default: -qnotocmerge

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.
                <suboption> must be one of the following:

                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                balanced
                     Optimizations are tuned across a selected
                     range of recent hardware.
                ppc970
                     Generates instructions specific to PowerPC 970
                     hardware platforms.
                pwr3
                     Generates object code optimized for the POWER3
                     hardware platforms.
                pwr4
                     Generates object code optimized for the POWER4
                     hardware platforms.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                pwr6
                     Generates object code optimized for the POWER6
                     hardware platforms.
                rs64a
                     Generates object code optimized for the RS64I
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                Default:
                     -qtune=balanced when the default -qarch
                     setting is in effect. Otherwise, the default
                     depends on the effective -qarch setting.

         -qunroll[=<suboption>] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The suboptions are:

                auto
                     Instructs the compiler to perform basic loop
                     unrolling.
                yes
                     Instructs the compiler to search for more
                     opportunities for loop unrolling than that
                     performed with auto. In general, this
                     suboption is more likely to increase compile
                     time or program size than auto processing, but
                     it may also improve your application's
                     performance.
                no
                     Instructs the compiler to not unroll loops.

                Default: -qunroll=auto

                If -qunroll is specified with no suboptions, the
                compiler assumes -qunroll=yes. -qnounroll is
                equivalent to -qunroll=no.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.

                Default: -qunwind

  Linking options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor. The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. In dynamic mode,
                     shared objects are not statically included in
                     the output file. Instead, the shared objects
                     are listed in the loader section of the output
                     file.
                     -bdynamic and -bshared are synonymous.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

                Default: -bshared

         -bmaxdata:<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint. Combined
                data space is slightly less than 256MB, or lower,
                depending onthe limits for the user ID.

                Default: -bmaxdata:0

         -brtl  Controls runtime linking for the output file.

         -qcrt | -qnocrt
                Instructs the linker to use the standard system
                startup files at link time.

                Default: -qcrt

         -e <name>
                Sets the entry name for a shared executable and is
                only used together with -qmkshrobj.

         -f<file_name>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <file_name>
                file should contain only the names of object files.
                There should be one object file per line.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.

                Default:
                     The default is to search only the standard
                     directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking.

                Default:
                     The default is to search only some of the
                     compiler runtime libraries.

         -qlib | -qnolib
                Specifies whether the compiler should use the
                standard system libraries at link time. -qnolib is
                similar to the gcc option nostdlib; the driver will
                not pass the standard system startup files or
                libraries when linking.

                Default: -qlib

         -qtwolink | -qnotwolink
                (C++) Links twice in order to minimize the number
                of static constructors included from libraries and
                object files.

                Default: -qnotwolink

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

  Portability and migration options
         -qalign=<suboption>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment suboptions are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules. This suboption is valid only for 32-bit
                     compilations. It is the same as the twobyte
                     suboption.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules. This suboption is valid only for 32-bit
                     compilations. It is the same as the mac68k
                     suboption.

                Default: -qalign=full

         -qalignrulefor=power=[no]typedefrespectsrule
                (C++) When used with -qalign=power, determines
                whether a 4-byte alignment ceiling is applied to
                non-first members of structures that are of type
                typedef to array of element type that exceeds the
                alignment ceiling.

                typedefrespectsrule | notypedefrespectsrule
                     When typedefrespectsrule is in effect, the
                     member follows the normal alignment rules for
                     -qalign=power. This suboption provides
                     compatibility with code compiled with
                     -qalign=power with XL C++ V6.0 and earlier.
                     When notypedefrespectsrule is in effect, a
                     member that exceeds the alignment ceiling of 4
                     bytes is aligned on 4-byte boundaries. This
                     suboption provides compatibility with code
                     compiled with -qalign=power with XL C++ V7.0
                     and V8.0.

                Default: -qalignrulefor=power=typedefrespectsrule

         -qgenproto[=parmnames] | -qnogenproto
                (C) Generates ANSI prototypes from K&R function
                definitions and displays them on standard output.
                Specifying -qgenproto without '=parmnames' will
                cause prototypes to be generated without parameter
                names.

                Default: -qnogenproto

         -qnamemangling=<scheme>
                (C++) Chooses the name mangling scheme for external
                symbol names generated from C++ source code. The
                <scheme> can be:

                ansi
                     Fully supports the most recent language
                     features of Standard C++.
                v10
                     Compatible with XL C++ V10.1. (This is
                     equivalent to ansi.)
                v9
                     Compatible with XL C++ V9.0.
                v8
                     Compatible with XL C++ V8.0.
                v7
                     Compatible with XL C++ V7.0.
                v6
                     Compatible with VisualAge C++ V6.0.
                v5
                     The scheme for VisualAge C++ V5.0.
                v4
                     The scheme for VisualAge C++ V4.0.
                v3
                     The scheme for VisualAge C++ releases before
                     V4.0.
                compat
                     Same as v3.

                Default: -qnamemangling=ansi

         -qobjmodel={classic|ibm}
                (C++) Specifies the object model.

                classic
                     This object model is compatible with version
                     3.6 of the IBM C and C++ compilers.
                ibm
                     Uses the object model introduced with version
                     5.0 of VisualAge C++ for AIX. Objects compiled
                     with this object model will use less memory
                     and have better performance for deep
                     inheritance with virtual bases.

                Default: -qobjmodel=classic

         -qoldpassbyvalue | -qnooldpassbyvalue
                (C++) Specifies how classes containing const or
                reference members are passed in function arguments.
                All classes in the compilation unit are affected by
                this option. When -qoldpassbyvalue is specified,
                the compiler mimics the IBM C/C++ compilers v3.6
                compiler in that when a class containing a const or
                reference member is passed as a function argument,
                it is not passed by value. All such classes in the
                compilation unit are affected.

                Default: -qnooldpassbyvalue

         -qupconv | -qnoupconv
                (C) Preserves the unsigned specification when
                performing integral promotions.

                Default:
                     o -qupconv when -qlanglvl={extended|classic}
                     o -qnoupconv otherwise

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is enabled, this option is ignored.

                Default: -qnovecnvol

  Compiler customization options
         -qasm_as=<asm_path> [<flags_list>]
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Single quotes (or double
                quotes) are required around the string of arguments
                if any spaces exist.

         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended. When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -qc_stdinc=<paths_list>
                (C) Changes the standard search location for the XL
                C headers. <paths_list> is a colon-separated list
                of paths to search.

         -qcpp_stdinc=<paths_list>
                (C++) Specifies the standard search directories for
                the XL C++ headers, where <paths_list> is a colon-
                separated list of paths.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler. <config_file> is the name of a
                compiler configuration file. <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = C++filt utility
                I = High-level optimizer - compile step
                L = High-level optimizer - link step
                l = Linker
                m = Linkage helper (C++ only)
                p = Preprocessor

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.

                Default: -qspill=512

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (i.e: -tbcI) of one or
                more of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = C++filt utility
                I = High-level optimizer  - compile step
                L = High-level optimizer - link step
                l = Linker
                m = Linkage helper (C++ only)
                p = Preprocessor


         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = c++filt utility
                I = High-level optimizer  - compile step
                L = High-level optimizer - link step
                l = Linker
                m = linkage helper (C++ only)
                p = Preprocessor


  SEE ALSO
         gxlc(1), gxlc++(1), showpdf(1), mergepdf(1), resetpdf(1),
         cleanpdf(1).

         For more information, refer to the following Web sites:
         http://www.ibm.com/software/awdtools/xlcpp/library/
         http://www.ibm.com/software/awdtools/xlcpp/support/


  COPYRIGHT
         Licensed Materials - Property of IBM.

         IBM XL C/C++ for AIX, V10.1

         5724-U81

         Copyright IBM Corp. 1991, 2008. All Rights Reserved.

         AIX, IBM, POWER3, POWER4, POWER5, POWER5+, POWER6,
         PowerPC, PowerPC 604, and SAA are trademarks or registered
         trademarks of International Business Machines Corporation
         in the United States, other countries, or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.













unlink: /tmpnwprd/xlcW0jTI4Ma
unlink: /tmpnwprd/xlcW1jTI4Mb
unlink: /tmpnwprd/xlcW2jTI4Mc
configure:2908: $? = 249
configure:2915: /usr/vacpp/bin/xlC_r -V >&5
export XL_CONFIG=/etc/vac.cfg.53:xlC_r 
/usr/bin/pg /usr/vacpp/exe/default_msg/vacpp.txt 



  xlc(1)                     IBM (2008)                      xlc(1)



  NAME
         xlc, xlc++, xlC, cc, c89, c99, xlCcore, xlc++core and
         related commands - invoke the IBM XL C/C++ compiler.


  SYNTAX
         <invocation-command> [ <option> | <inputfile> ] ...


  DESCRIPTION
         The invocation commands compile C and C++ source files.
         The commands and their recommended uses are described
         below.

         Invocations                   Usage (supported standards)
         _________________________________________________________

         xlc, xlc_r, xlc_r4,           Compile C source files.
         xlc_r7, xlc128, xlc128_r,     (ANSI C89, ISO C99,
         xlc128_r4, xlc128_r7          IBM language extensions)

         xlc++, xlc++_r, xlc++_r4,     Compile C++ source files.
         xlc++_r7, xlc++128,
         xlc++128_r, xlc++128_r4,
         xlc++128_r7, xlC, xlC_r,
         xlC_r4, xlC_r7, xlC128,
         xlC128_r, xlC128_r4,
         xlC128_r7

         cc, cc_r, cc_r4, cc_r7,       Compile legacy code that
         cc128, cc128_r, cc128_r4,     does not conform to Standard
         cc128_r7                      C. (pre-ANSI C)

         c89, c89_r, c89_r4,           Compile C source files with
         c89_r7, c89_128, c89_128_r,   strict conformance to the
         c89_128_r4, c89_128_r7        C89 standard. (ANSI C89)

         c99, c99_r, c99_r4,           Compile C source files with
         c99_r7, c99_128, c99_128_r,   strict conformance to the
         c99_128_r4, c99_128_r7        C99 standard. (ISO 99)

         xlc++core, xlc++core_r,       Compile C++ source files
         xlc++core_r7, xlc++core128,   but the compiler will
         xlc++core128_r,               link only to the core of
         xlc++core128_r7, xlCcore,     the runtime library.
         xlCcore_r, xlCcore_r7,
         xlC128core, xlC128core_r,
         xlC128core_r7

         gxlc                          Accepts GNU C options, maps
                                       them to their equivalent XL
                                       C option, then invokes xlc.

         gxlc++, gxlC                  Accepts GNU C/C++ options, maps
                                       them to their equivalent XL
                                       C++ option,then invokes xlc++.

         The main difference between these commands is that they
         use different default options (which are set in the
         configuration file /etc/vac.cfg.XX, where XX represents
         the AIX version).
         See the Compiler Reference for more information on these
         invocation commands.

         All invocations with a suffix of _r allow for thread-safe
         compilation. Use these commands to create threaded
         applications or to link programs that use multi-threading.

         These commands also process assembler source files and
         object files. The compiler calls the link editor to
         produce a single executable or shared library, unless you
         specify the compiler options that prevent object files
         from being linked.

         The input file may have any of the following suffixes:

          .C, .cpp, .cxx,    C++ source file
          .cc, .cp, .c++

          .c                 C source file

          .i                 Preprocessed C or C++ source file

          .a                 Archive file

          .o                 Object file for ld command

          .s                 Assembler source file

          .S                 Assembler source file that
                             needs preprocessing

          .so                Shared object file


  OPTIONS
         Compiler options are categorized by their functions and
         may be used to set the compiler behavior. Options can be
         flag options or keyword options.

         Keyword options are specified in one of the following
         ways:
         -q<option>
         -q<option>=<suboption>
         -q<option>=<suboption>:<suboption>

         Keyword options with no suboptions represent switches that
         may be either on or off. -qx turns the switch on, and
         -qnox turns the switch off. For example, -qsource tells
         the compiler to produce a source listing and -qnosource
         tells the compiler not to produce a source listing.

  Output control options
         -c     Instructs the compiler to pass source files to the
                compiler only. The compiled source files are not
                sent to the linker. This option produces an object
                file, file_name.o, for each valid source file.

         -C | -C!
                Preserves or removes comments in preprocessed
                output.
                When -C is used with the -E option, comments are
                written to standard output; with the -P option,
                comments are written to an output file.
                When -C! is in effect, comments are removed.

         -E     Instructs the compiler to preprocess the source
                files named in the compiler invocation and creates
                an output preprocessed source file.

         -G     Tells the linkage editor to create a shared object
                enabled for runtime linking.

         -M     Creates an output file that contains information to
                be included in a "make" description file. This is
                equivalent to specifying -qmakedep without a
                suboption.

         -qmakedep[=gcc]
                Creates an output file that contains targets
                suitable for inclusion in a description file for
                the make command that describes the dependencies of
                the main source file in the compilation.
                Specifying 'gcc' changes the format of the
                generated dependency file.
                Specifying -qmakedep without 'gcc' is equivalent to
                specifying -M.

         -MF<path>
                Specifies the target for the output generated by
                the -qmakedep or -M options, where <path> can be a
                full directory path or file name. Note that "-MF
                <path>" (with a space before the argument) is also
                acceptable. This option only has effect when
                specified with -qmakedep or -M.

         (C)-qmkshrobj, (C++)-qmkshrobj[=<priority>]
                Creates a shared object from the generated object
                files.
                The optional number specifies the priority level
                for initialization of all static objects in the
                file. <priority> may be any number from -214782623
                (highest priority-initialized first) to 214783647
                (lowest priority-initialized last). If no priority
                is specified, the default priority of 0 is used.
                The priority is not used when linking shared
                objects (using the xlc command) written in C.
                Specifying -qmkshrobj implies -qpic.
                See related options, -e <name> and -o <path>.

         -o <path>
                Specifies an output location for the object,
                assembler, or executable files created by the
                compiler. When the -o option is used during
                compiler invocation, <path> can be the name of
                either a file or a directory.

                Default: -o a.out

         -P     Preprocesses the C or C++ source files named in the
                compiler invocation and creates an output
                preprocessed source file for each input source
                file. The preprocessed output file has the same
                name as the output file, with a .i suffix.

         -S     Generates an assembler language file (.s) for each
                source file. The resulting .s files can be
                assembled to produce object .o files or an
                executable file (a.out).

         -qshowmacros[=<suboptions_list>] | -qnoshowmacros
                Emits macro definitions to preprocessed output.

                This option has no effect unless preprocessed
                output is generated.  If a macro is defined and
                subsequently undefined before compilation ends,
                this macro will not be included in the preprocessed
                output.

                Default: -qnoshowmacros

                <suboptions_list> is a colon-separated list of one
                or more of the following:

                all
                     -qshowmacros=all appends all macro definitions
                     to preprocessed output.  This is the same as
                     specifying -qshowmacros.
                pre | nopre
                     -qshowmacros=pre appends only predefined macro
                     definitions to preprocessed output.
                     -qshowmacros=nopre suppresses appending these
                     definitions.
                     Only macros defined internally by the
                     preprocessor are considered predefined; all
                     other macros are considered as user-defined.

         -qtimestamps | -qnotimestamps
                Controls whether or not implicit time stamps are
                inserted into an object file.

                This option does not affect time stamps inserted by
                pragmas and other explicit mechanisms.
                Default: -qtimestamps

  Input control options
         -+     (C++) Compiles any file, <file_name.nnn>, as a C++
                language file, where <nnn> is any suffix other than
                .a, .so, .o, .s, or .S.  This option is equivalent
                to the -qsourcetype=c++ option and should not be
                used together with the -qsourcetype option.

         -qcinc=<directory_path> | -qnocinc
                (C++) Instructs the compiler to place an extern "C"
                { } wrapper around the contents of an include file,
                where <directory_path> is the location of that
                include file.

                Default: -qnocinc

         -I<directory_path>
                Specifies an additional search path for include
                file names that do not specify an absolute path.

                Default:
                     The following directories are searched, in the
                     following order, after any paths that are
                     specified by the -I option:
                     1) The current directory.
                     2) The directory where the source file is
                     located.
                     3) /usr/include.

         -qidirfirst | -qnoidirfirst
                Specifies the search order for files included with
                the #include "<file_name>" directive. Use
                -qidirfirst with the -I option. If -qidirfirst is
                specified, the directories specified by the
                -I<directory_path> option are searched before the
                directory in which the current file resides.

                Default: -qnoidirfirst

         -qinclude=<file_path>
                Specifies additional header files that are included
                before the first line of a source file in a
                compilation unit and ahead of any headers which may
                be specified by an #include statement on the first
                line of the source file.

         -qsourcetype=<type>
                Determines whether to treat all recognized source
                files as if they are of the source type specified
                by <type> (regardless of file name suffix), or
                whether to use the file name suffix to determine
                the programming language.
                Note that the option only affects files that are
                specified on the command line following the option,
                but not those that precede the option. The
                -qsourcetype option should not be used together
                with the -+ option. The suboptions are:

                default
                     The compiler assumes that the programming
                     language of a source  file will be implied by
                     its file name suffix.
                c
                     The compiler compiles all source files
                     following this option as if they are C
                     language source files.
                c++
                     The compiler compiles all source files
                     following this option as if they are C++
                     language source files.
                assembler
                     The compiler compiles all source files
                     following this option as if they are assembler
                     language source files.
                assembler-with-cpp
                     The compiler compiles all source files
                     following this option as if they are assembler
                     language source files that need preprocessing.

                Default: -qsourcetype=default

         -qstdinc | -qnostdinc
                Specifies whether the standard directories are
                searched for files included by the #include
                <file_name> and #include "file_name" directives.
                The -qnostdinc option excludes the standard include
                directories from the search path.

                Default: -qstdinc

  Language element control options
         -qaltivec | -qnoaltivec
                Instructs the compiler to support vector data types
                and operators and is accepted when the architecture
                specified by the -qarch option supports vector
                instructions and -qenablevmx is enabled.

                Default: -qnoaltivec

         -qasm[=<sub>] | -qnoasm[=<sub>]
                Controls the interpretation of, and subsequent
                generation of code for, asm statements.
                In (C), <sub> can only be 'gcc'.
                In (C++), <sub> can be:
                gcc
                     Interprets asm statements using GCC syntax.
                stdcpp
                     Interprets asm statements using stdcpp syntax.

                Default:
                     (C++) -qnoasm=stdcpp in compat366 or strict98
                     modes, and -qasm=gcc otherwise.
                     (C) -qasm=gcc

         -qcpluscmt | -qnocpluscmt
                (C) Permits the usage of "//" to introduce a
                comment that lasts until the end of the current
                source line, as in C++.

                Default:
                     o -qcpluscmt when you invoke the compiler with
                     xlc, xlc_r, cc, or cc_r, or when -qlanglvl is
                     set to stdc99 or extc99
                     o -qnocpluscmt otherwise

         -D<name>[=[<def>]]
                Defines <name> as in the #define directive. <def>
                is an optional definition or value assigned to
                <name>. Specifying -D<name>= (with no <def>) is
                equivalent to #define <name>; specifying
                -D<name> is equivalent to #define <name> 1.

         -qdbcs | -qnodbcs
                Specifies that string literals and comments can
                contain multi-byte characters. This is equivalent
                to -qmbcs.

                Default: -qnodbcs

         -qdfp | -qnodfp
                Enables compiler support for decimal floating-point
                types and literals.

                Default: -qnodpf

         -qdigraph | -qnodigraph
                Allows usage of digraph key combinations or
                keywords to represent characters not found on some
                keyboards.

                Default:
                     (C) -qdigraph when -qlanglvl is extc89,
                     extended, extc99 or stdc99, and -qnodigraph
                     otherwise.
                     (C++) -qdigraph

         -qdollar | -qnodollar
                Allows the '$' symbol to be used in the names of
                identifiers. When -qdollar is in effect, the dollar
                symbol '$' in an identifier is treated as a base
                character. If the options -qnodollar and
                -qlanglvl=ucs are both enabled, the dollar symbol
                is treated as an extended character.

                Default: -qnodollar

         -qignprag=<option>
                Instructs the compiler to ignore certain pragma
                statements. The options are:

                disjoint
                     Ignores all #pragma disjoint directives in the
                     source file.
                isolated_call
                     Ignores all #pragma isolated_call directives
                     in the source file.
                all
                     Ignores all #pragma isolated_call directives
                     and #pragma disjoint directives in the source
                     file.
                omp
                     Ignores all OpenMP parallel processing
                     directives in the source file.
                ibm
                     (C) Ignores all #pragma ibm snapshot
                     directives and all IBM SMP directives in the
                     source file.

         -qkeyword=<keyword> | -qnokeyword=<keyword>
                Controls whether the specified name is treated as a
                keyword or as an identifier whenever it appears in
                a program source.
                By default, all the built-in keywords defined in
                the C and C++ language standards are reserved as
                keywords. You cannot add keywords to the language
                with this option. However, you can use
                -qnokeyword=<keyword> to disable built-in keywords,
                and use -qkeyword=<keyword> to reinstate those
                keywords.

                (C) This option can also be used with the following
                C keywords: restrict, typeof, asm and inline.
                (C++) This option can be used with all C++ built-in
                keywords.

         -qlanglvl=<suboptions_list>
                Selects the language level and language options for
                the compilation. <suboptions_list> is a colon-
                separated list of suboptions.

                (C) For C language programs, <suboptions_list> is
                {classic|extended|saa|saa12|stdc89|stdc99|extc89|extc99}:
                {ucs|noucs}.

                classic
                     Allows the compilation of non-stdc89 programs,
                     and conforms closely to the K&R level
                     preprocessor.
                extended
                     Provides compatibility with the RT compiler
                     and classic. This language level is based on
                     C89.
                saa
                     Compilation conforms to the current SAA C CPI
                     language definition. This is currently SAA C
                     Level 2.
                saal2
                     Compilation conforms to the SAA C Level 2 CPI
                     language definition, with some exceptions.
                stdc89
                     Compilation conforms to the ANSI C89 standard,
                     also known as ISO C90.
                stdc99
                     Compilation conforms to the ISO C99 standard.
                extc89
                     Compilation conforms to the ANSI C89 standard,
                     and accepts implementation-specific language
                     extensions.
                extc99
                     Compilation conforms to the ISO C99 standard,
                     and accepts implementation-specific language
                     extensions.
                ucs | noucs
                     This suboption controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in program
                     source code.
                     Default:
                       o -qlanglvl=ucs under language levels stdc99
                       and extc99.
                       o -qlanglvl=noucs for all other language
                       levels.

                (C++) The suboptions for C++ language programs are:
                compat366
                     Compilation conforms to some, but not all, IBM
                     C and C++ Compilers V3.6 features.
                extended
                     Compilation is based on strict98, with some
                     differences to accommodate extended language
                     features.
                extended0x
                     Compilation is based on the IBM implementation
                     of the draft C++0x standard.  Currently this
                     includes new integer promotion rules for
                     arithmetic conversions with "long long" data
                     types and enhanced C++ preprocessor support
                     for C99 features.  See the "XL C/C++ Language
                     Reference" and "Getting Started with XL C/C++"
                     for more information.

                     Note that the C++0x standard is temporary and
                     has not been officially adopted in its
                     entirety. It is subject to change.
                strict98
                     Compilation conforms to the ISO C++ standard
                     for C++ programs.
                anonstruct | noanonstruct
                     This suboption controls whether anonymous
                     structs and anonymous classes are allowed in
                     your C++ source. By default, the compiler
                     allows anonymous structs.
                anonunion | noanonunion
                     This suboption controls what members are
                     allowed in anonymous unions. When this
                     suboption is set to anonunion, anonymous
                     unions can have members of all types that
                     standard C++ allows in non-anonymous unions.
                ansifor | noansifor
                     This suboption controls whether scope rules
                     defined in the C++ standard apply to names
                     declared in for-init statements. By default,
                     standard C++ rules are used.
                ansisinit | noansisinit
                     This suboption can be used to select between
                     old (v3.6 or earlier) and current (v5.0 or
                     later) compiler object compatibility.
                c99__func__ | noc99__func__
                     This suboption instructs the compiler to
                     recognize the C99 __func__ identifier.
                     The c99__func__ suboption is enabled by
                     default when -qlanglvl=extended is enabled. It
                     can be enabled for any language level by
                     specifying -qlanglvl=c99__func__, or disabled
                     by specifying -qlanglvl=noc99__func__.
                c99complex | noc99complex
                     This suboption instructs the compiler to
                     recognize C99 complex data types and related
                     keywords. It is set by default for
                     -qlanglvl=extended.
                c99complexheader | noc99complexheader
                     This suboption instructs the compiler to use
                     the C99 complex.h header file.
                c99compoundliteral | noc99compoundliteral
                     This suboption instructs the compiler to
                     support the C99 compound literal feature. It
                     is set by default for -qlanglvl=extended.
                c99hexfloat | noc99hexfloat
                     This suboption enables support for C99-style
                     hexadecimal floating constants in C++
                     applications. It is on by default for
                     -qlanglvl=extended.
                c99vla | noc99vla
                     When c99vla is enabled, the compiler will
                     support the use of C99-type variable length
                     arrays in your C++ applications. It is set by
                     default for -qlanglvl=extended.
                compatzea | nocompatzea
                     The -qlanglvl=compatzea option is a
                     compatibility option that lets you continue to
                     use a zero extent array with dimension of 1.
                     Default: -qlanglvl=nocompatzea
                     Specifying -qlanglvl=compatzea has effect only
                     if -qlanglvl=zeroextarray is also enabled.
                dependentbaselookup | nodependentbaselookup
                     Provides the ability to specify compilation in
                     conformance with issue 213 of TC1 of the C++
                     standard.
                     Default: -qlanglvl=dependentbaselookup
                gnu_assert | nognu_assert
                     Enables or disables support for the following
                     GNU C system identification assertions:
                     '#assert', '#unassert', '#cpu', '#machine',
                     '#system'.
                gnu_complex | nognu_complex
                     This suboption instructs the compiler to
                     recognize GNU complex data types and related
                     keywords.
                gnu_computedgoto | nognu_computedgoto
                     Enables support for computed gotos. This
                     suboption is enabled for -qlanglvl=extended.
                gnu_explicitregvar | nognu_explicitregvar
                     (C) Allows you to control whether the compiler
                     accepts and ignores the specification of
                     explicit registers for variables.
                gnu_externtemplate | nognu_externtemplate
                     This suboption enables or disables extern
                     template instantiations.
                     Default:
                       gnu_externtemplate is enabled by default
                       when compiling to the extended language
                       level.
                gnu_include_next | nognu_include_next
                     Enables or disables support for the GNU C
                     #include_next preprocessor directive.
                     Default:
                       gnu_include_next is enabled by default for
                       -qlanglvl=extended.
                gnu_labelvalue | nognu_labelvalue
                     Enables or disables support for labels as
                     values.
                     Default:
                       gnu_labelvalue is enabled by default for
                       -qlanglvl=extended.
                gnu_locallabel | nognu_locallabel
                     Enables or disables support for locally-
                     declared labels.
                gnu_membernamereuse | nognu_membernamereuse
                     Enables or disables reusing a template name in
                     a member list as a typedef.
                gnu_suffixij | nognu_suffixij
                     Enables or disables support for GCC style
                     complex numbers. If gnu_suffixij is specified,
                     a complex number can be ended with suffix i/I
                     or j/J.
                     Default:
                       gnu_suffixij is enabled by default for
                       -qlanglvl=extended.
                gnu_varargmacros | nognu_varargmacros
                     This option is similar to
                     -qlanglvl=varargmacros. For the list of the
                     main differences, refer to the Compiler
                     Reference.
                     Default:
                       gnu_varargmacros is set by default for
                       -qlanglvl=extended.
                gnu_warning | nognu_warning
                     Enables or disables support for the GNU C
                     #warning preprocessor directive.
                illptom | noillptom
                     This suboption controls what expressions can
                     be used to form pointers to members. C/C++ can
                     accept some forms that are in common use, but
                     do not conform to the C++ standard. The
                     compiler allows these forms by default.
                implicitint | noimplicitint
                     This suboption controls whether the compiler
                     will accept missing or partially specified
                     types as implicitly specifying 'int'. This is
                     no longer accepted in the standard but may
                     exist in legacy code.
                     With the suboption set to noimplicitint, all
                     types must be fully specified.
                     With the suboption set to implicitint, a
                     function declaration at namespace scope or in
                     a member list will implicitly be declared to
                     return int.
                newexcp | nonewexcp
                     This suboption determines whether or not the
                     C++ new operator throws an exception. If the
                     -qlanglvl=newexcp option is specified, the
                     standard exception std::bad_alloc is thrown
                     when the requested memory allocation fails.
                     This option does not apply to the nothrow
                     versions of the new operator.
                     The standard implementation of the new
                     operators fully support exceptions. For
                     compatibility with previous versions of
                     VisualAge C++, these operators return 0 by
                     default.
                offsetnonpod | nooffsetnonpod
                     This suboption controls whether the offsetof
                     macro can be applied to classes that are not
                     data-only.
                     By default, the compiler allows offsetof to be
                     used with non-POD classes.
                olddigraph | noolddigraph
                     This option controls whether old-style
                     digraphs are allowed in your C++ source. It
                     applies only when -qdigraph is also set.
                     By default, the compiler supports only the
                     digraphs specified in the C++ standard.
                oldfriend | nooldfriend
                     This option controls whether friend
                     declarations that name classes without
                     elaborated class names are treated as C++
                     errors.
                     By default, the compiler lets you declare a
                     friend class without elaborating the name of
                     the class with the keyword class.
                oldmath | nooldmath
                     This suboption controls which versions of math
                     function declarations in <math.h> are included
                     when you specify math.h as an included or
                     primary source file.
                     By default, the new standard math functions
                     are used. Build with -qlanglvl=nooldmath for
                     strict compliance with the C++ standard. For
                     compatibility with modules that were built
                     with earlier versions of VisualAge C++ and
                     predecessor products, you may need to build
                     with -qlanglvl=oldmath.
                oldtempacc | nooldtempacc
                     This suboption controls whether access to a
                     copy constructor to create a temporary object
                     is always checked, even if creation of the
                     temporary object is avoided.
                     By default, the compiler suppresses the access
                     checking.
                oldtmplalign | nooldtmplalign
                     Controls whether alignment rules specified for
                     nested templates are ignored.
                     When the default, -qlanglvl=nooldtmplalign, is
                     in effect, these alignment rules are not
                     ignored.
                     Specify -qlanglvl=oldtmplalign for
                     compatibility with VisualAge C++ 4.0 and
                     predecessor products.
                oldtmplspec | nooldtmplspec
                     This suboption controls whether template
                     specializations that do not conform to the C++
                     standard are allowed.
                     By default, the compiler allows these old
                     specializations (-qlanglvl=nooldtmplspec).
                redefmac | noredefmac
                     Specifies whether a macro can be redefined
                     without a prior #undef or undefine()
                     statement.
                trailenum | notrailenum
                     This suboption controls whether trailing
                     commas are allowed in enum declarations.
                     By default, the compiler allows one or more
                     trailing commas at the end of the enumerator
                     list.
                typedefclass | notypedefclass
                     This suboption provides backwards
                     compatibility with previous versions of
                     VisualAge C++ and predecessor products.
                ucs | noucs
                     This suboption controls whether Unicode
                     characters are allowed in identifiers, string
                     literals and character literals in C++
                     sources.
                     Default: -qlanglvl=noucs
                varargmacros | novarargmacros
                     This C99 feature allows the use of a variable
                     argument list in function-like macros in your
                     C++ applications.
                zeroextarray | nozeroextarray
                     This suboption controls whether zero-extent
                     arrays are allowed as the last non-static data
                     member in a class definition.
                     By default, the compiler allows arrays with
                     zero elements.

                The default depends on the invocation command used:

                Command                       Default
                _____________________________________________

                xlC/xlc++                     extended
                xlc                           extc99
                cc                            extended
                c89                           stdc89
                c99                           stdc99

         -qlonglong | -qnolonglong
                Allows IBM-style long long integers. This option
                cannot be used with -qlanglvl=stdc99 or
                -qlanglvl=extc99.

                Default:
                     o -qlonglong when compiling with xlc, xlc++,
                     xlC or cc
                     o -qnolonglong when compiling with c89 or c99

         -qmacpstr | -qnomacpstr
                Converts Pascal string literals into null-
                terminated strings where the first byte contains
                the length of the string.

                Default: -qnomacpstr

         -qmbcs | -qnombcs
                Specifies that string literals and comments can
                contain multi-byte characters.  This is equivalent
                to -qdbcs.

                Default: -qnombcs

         -qstaticinline | -qnostaticinline
                (C++) Controls whether inline functions are treated
                as static or extern. Specifying -qnostaticinline
                means the inline functions are treated as having
                extern linkage.

                Default: -qnostaticinline

         -qtabsize=<size>
                Changes the length of tabs as perceived by the
                compiler, where <size> is the number of character
                spaces representing a tab in the source program.

                Default: -qtabsize=8

         -qtrigraph | -qnotrigraph
                Allows trigraph key combinations to represent
                characters not found on some keyboards.

                Default: -qtrigraph

                However, if -qlanglvl=classic is enabled or
                implied, the trigraphs are not recognized by
                default.

         -U<name>
                Undefines the identifier <name> defined by the
                compiler or by the -D<name> option.

         -qutf | -qnoutf
                Enables recognition of UTF literal syntax.

                Default:
                     o (C) -qnoutf
                     o (C++) -qutf for all language levels except
                     -qlanglvl=strict98
                     o (C++) -qnoutf when -qlanglvl=strict98 is in
                     effect

  Template control options (C++ only)
         -qtempinc[=<directory_path>] | -qnotempinc
                (C++) Generates separate template include files for
                template functions and class declarations, and
                places these files in a directory which can be
                optionally specified.

                Default: -qnotempinc

         -qtemplatedepth=<number>
                (C++) Specifies the maximum number of recursively
                instantiated template specializations that will be
                processed by the compiler. <number> can be a value
                between 1 and INT_MAX.

                Default: -qtemplatedepth=300

         -qtemplaterecompile | -qnotemplaterecompile
                (C++) Helps manage dependencies between compilation
                units that have been compiled using the
                -qtemplateregistry compiler option.

                Default: -qnotemplaterecompile

         -qtemplateregistry[=<filename>] | -qnotemplateregistry
                (C++) Maintains records of all templates as they
                are encountered in the source and ensures that only
                one instantiation of each template is made.

                Default: -qnotemplateregistry

         -qtempmax=<number>
                (C++) Specifies the maximum number of template
                include files to be generated by the -qtempinc
                option for each header file.

                Default: -qtempmax=1

         -qtmplinst=<suboption>
                (C++) Allows you to manage implicit template
                instantiations. <suboption> is one of the
                following:

                none
                     Instantiates only the inline functions. If
                     this is specified, -qtempinc and
                     -qtemplateregistry are ignored.
                noinline
                     Suppresses all implicit instantiations.
                auto
                     Handles the implicit instantiations according
                     to the -qtempinc and -qtemplateregistry
                     options. If both options are off, then
                     implicit instantiations are always performed.
                always
                     Always perform implicit instantiations. This
                     will ignore the -qtempinc and
                     -qtemplateregistry options.

                Default: -qtmplinst=auto

         -qtmplparse=<option>
                (C++) Controls whether parsing and semantic
                checking are applied to template definition
                implementations or only to template instantiations.
                The compiler has the option to produce warning or
                error messages. The suboptions are:

                no
                     Does not parse, to reduce the number of errors
                     issued in code written for previous versions
                     of the compiler.
                warn
                     Parses template definitions and issues warning
                     messages for semantic errors.
                error
                     Treats problems in template definitions as
                     errors, even if the template is not
                     instantiated.

                Default: -qtmplparse=no

  Floating-point and integer control options
         -qbitfields={signed|unsigned}
                Specifies whether bit fields will be signed or
                unsigned.

                Default: -qbitfields=unsigned

         -qchars={signed|unsigned}
                Specifies whether the data type char will be signed
                or unsigned.

                Default: -qchars=unsigned

         -qenum=<suboption>
                Specifies the amount of storage occupied by
                enumerations, where <suboption> can be:

                small
                     Specifies that enumerations occupy the
                     smallest amount of space (1, 2, 4, or 8 bytes)
                     that can accurately represent the range of
                     values in the enumeration. Signage is
                     unsigned, unless the range of values includes
                     negative values.
                int
                     Specifies that enumerations occupy 4 bytes and
                     are represented by int.
                intlong
                     Specifies that enumerations occupy 8 bytes of
                     storage if the range of values in the
                     enumeration exceeds the limit for int.
                     Otherwise, the enumerations occupy 4 bytes of
                     storage and are represented by int.
                1
                     Specifies that enumerations occupy 1 byte.
                     Type is signed or unsigned char.
                2
                     Specifies that enumerations occupy 2 bytes.
                     Type is signed or unsigned short.
                4
                     Specifies that enumerations occupy 4 bytes.
                     Type is signed or unsigned int.
                8
                     Specifies that enumerations occupy 8 bytes.
                     Type is signed or unsigned long long in 32-bit
                     mode, and signed or unsigned long in 64-bit
                     mode.

                Default: -qenum=intlong

         -qfloat=<suboptions_list>
                Specifies various floating-point suboptions. This
                provides different strategies for speeding up or
                improving the accuracy of floating-point
                calculations. <suboptions_list> is a colon-
                separated list of one or more of the following:

                dfpemulate | nodfpemulate
                     Specifies whether decimal floating-point
                     computations are implemented in hardware
                     instructions or emulated in software by calls
                     to library functions.
                     -qdfp must be enabled for either suboption to
                     have any effect. nodfpemulate is only valid on
                     a system that supports decimal floating-point
                     instructions; that is, on AIX 5.3 and higher,
                     and with -qarch=pwr6 in effect. dfpemulate is
                     required for all other -qarch values.
                     Default: dfpemulate
                fenv | nofenv
                     Specifies whether the code depends on the
                     hardware environment and whether to suppress
                     optimizations that could cause unexpected
                     results due to this dependency.
                     When nofenv is in effect, the compiler assumes
                     that the program does not depend on the
                     hardware environment, and that aggressive
                     compiler optimizations that change the
                     sequence of floating-point operationsare
                     allowed to be performed. When fenv is in
                     effect, such optimizations are suppressed.
                     Default: nofenv
                fltint | nofltint
                     Speeds up floating-point-to-integer
                     conversions by using faster inline code that
                     does not check for overflows. -qfloat=nofltint
                     checks floating-point-to-integer conversions
                     for out-of-range values.
                     Default:
                       o nofltint at -O2 optimization.
                       o fltint when -qnostrict or -O3 or higher
                       optimization level is in effect.
                fold | nofold
                     Specifies that constant floating-point
                     expressions are to be evaluated at compile
                     time rather than at run time.
                     Default: fold
                hscmplx | nohscmplx
                     Speeds up operations involving complex
                     division and complex absolute value. This
                     suboption, which provides a subset of the
                     optimizations of the hsflt suboption, is
                     preferred for complex calculations.
                     Default: nohscmplx
                hsflt | nohsflt
                     The hsflt option speeds up calculations by
                     truncating instead of rounding computed values
                     to single precision before storing and on
                     conversions from floating-point to integer.
                     The nohsflt suboption specifies that single-
                     precision expressions are rounded after
                     expression evaluation and that floating-
                     point-to-integer conversions are to be checked
                     for out-of-range values.
                     Default: nohsflt
                hssngl | nohssngl
                     The hssngl option specifies that single-
                     precision expressions are rounded only when
                     the results are stored into float memory
                     locations. The nohssngl option specifies that
                     single-precision expressions are rounded after
                     expression evaluation. Using hssngl can
                     improve runtime performance and is safer than
                     using -qfloat=hsflt.
                     Default: nohssngl
                maf | nomaf
                     Makes floating-point calculations faster and
                     more accurate by using floating-point
                     multiply-add instructions where appropriate.
                     Default: maf
                nans | nonans
                     Generates extra instructions to detect
                     signaling NaN when converting from single-
                     precision to double-precision at run time. The
                     option nonans specifies that this conversion
                     need not be detected.
                     Default: nonans
                relax | norelax
                     Relaxes the strict IEEE-conformance slightly
                     for greater speed, typically by removing some
                     trivial, floating-point arithmetic operations,
                     such as adds and subtracts involving a zero on
                     the right. Specifying -qstrict=noieeefp also
                     relaxes IEEE conformance.
                     Default: norelax
                rndsngl | norndsngl
                     Specifies that the result of each single-precision (float)
                     operation is to be rounded to single precision.
                     -qfloat=norndsngl specifies that rounding to
                     single-precision happens only after full expressions have
                     been evaluated.
                     Default: rndsngl
                rngchk | norngchk
                     Specifying norngchk instructs the compiler to
                     skip range checking, allowing for increased
                     performance where division and sqrt operations
                     are performed repeatedly within a loop.
                     When rngchk is specified, range checking is
                     performed for input arguments for software
                     divide and inlined sqrt operations.
                     When -qstrict, -qstrict=infinities,
                     -qstrict=operationprecision, or
                     -qstrict=exceptions is active, the setting of
                     this option is forced to -qfloat=rngchk. When
                     -qnostrict is active, the setting of this
                     option is -qfloat=norngchk unless the
                     -qfloat=rngchk option is explicitly set by the
                     user.
                     Default: rngchk
                rrm | norrm
                     Prevents floating-point optimizations that are
                     incompatible with runtime rounding to plus and
                     minus infinity modes.
                     Default: norrm
                rsqrt | norsqrt
                     Specifies whether a sequence of code that
                     involves division by the result of a square
                     root can be replaced by calculating the
                     reciprocal of the square root and multiplying.
                     Allowing this replacement produces code that
                     runs faster. -qfloat=rsqrt has no effect
                     unless -qignerrno is also specified.
                     Default:
                       o norsqrt at -O2 optimization
                       o rsqrt when when -qnostrict or -O3 or
                       higher optimization level is in effect
                single | nosingle
                     Allows single-precision arithmetic
                     instructions to be generated for single-
                     precision floating-point values. All PowerPC
                     processors support single-precision
                     instructions; however, if you wish to preserve
                     the behavior of applications compiled for
                     earlier architectures, in which all floating-
                     point arithmetic was performed in double-
                     precision and then truncated to single-
                     precision, you can use
                     -qfloat=nosingle:norndsngl. This suboption
                     provides computation precision results
                     compatible with those provided by the
                     deprecated options
                     -qarch=com|pwr|pwrx|pwr2|p2sc|601|602|603.
                     Default: single
                spnans | nospnans
                     Detects signaling NaN on conversion from
                     single-precision to double-precision.
                     Default: nospnans

         -qldbl128 | -qnoldbl128
                Specifies whether to increase the long double size
                from 64 to 128 bits.
                This is equivalent to -qlongdouble.

                Default: -qnoldbl128

         -qlongdouble | -qnolongdouble
                Specifies whether to increase the long double size
                from 64 to 128 bits.
                This is equivalent to -qldbl128.

                Default: -qnolongdouble

         -qlonglit | -qnolonglit
                Makes unsuffixed literals into the long type in
                64-bit mode.

                Default: -qnolonglit

         -y<rounding_mode>
                Specifies the compile-time rounding mode of
                constant floating-point expressions.

                For binary floating-point types, <rounding_mode> is
                one of the following:
                m = round towards minus infinity
                n = round to the nearest representable number, ties
                to even
                p = round towards plus infinity
                z = round towards zero

                Default: -yn

                For decimal floating-point types, <rounding_mode>
                is one of the following:
                di = round towards infinities (away from zero)
                dm = round towards minus infinity
                dn = round to the nearest representable number, ties to
                even
                dna = round to the nearest representable number, ties away
                      from zero
                dnz = round to the nearest representable number, ties toward
                      zero
                dp = round towards plus infinity
                dz = round towards zero

                Default: -ydn

  Object code control options
         -q32, -q64
                Selects either 32-bit or 64-bit compilation mode.
                Use the -q32 and -q64 options, along with the
                -qarch and -qtune compiler options, to optimize the
                output of the compiler to the architecture on which
                that output will be used.

                Default: -q32

         -qalloca
                (C) Substitutes inline code for calls to function
                alloca, as if #pragma alloca directives were in the
                source code.

         -ma    (C) Substitutes inline code for calls to function
                alloca.

         -qeh[={v5|v6}] | -qnoeh
                (C++) Controls whether exception handling is
                enabled in the module being compiled.

                v5
                     Instructs the compiler to generate exception-
                     handling code that is compatible with
                     VisualAge C++ V5.0.
                v6
                     Instructs the compiler to generate new
                     exception-handling code, compatible with
                     VisualAge C++ V6.0, that correctly handles
                     try-catch blocks nested within other catch
                     blocks.

                Default: -qeh=v6

         -qexpfile=<file_name>
                Saves the exported symbols in the specified file
                and is only used together with the -qmkshrobj
                compiler option.
                Refer to the -qmkshrobj option for more
                information.

         -qfuncsect[=[no]implicitstaticref] | -qnofuncsect
                Places instructions for each function in a separate
                object file control section or csect. -qfuncsect
                can take the following suboption:

                implicitstaticref | noimplicitstaticref
                     Specifies whether the compiler generates dummy
                     references to the static area. Specifying
                     -qfuncsect with no suboption implies
                     implicitstaticref. Specifying
                     noimplicitstaticref removes unnecessary
                     references to the static data area.

                Default: -qnofuncsect

         -qinlglue | -qnoinlglue
                This option inlines glue code that optimizes
                external function calls when compiling at -q64 and
                -O2 and higher.

                Default: -qnoinlglue

         -qkeepinlines | -qnokeepinlines
                (C++) Instructs the compiler to keep or discard
                definitions for unreferenced extern inline
                functions. Discarding these definitions can reduce
                the size of the object files. The -qkeepinlines
                setting keeps the definitions of unreferenced
                extern inline functions.

                Default: -qnokeepinlines

         -qpic[={small|large}] | -qnopic
                Generates position-independent code (pic). Specify
                -qpic=small if the Global Offset Table in 32-bit
                mode or Table of Contents in 64-bit mode must be 64
                Kb or smaller, or -qpic=large if it can be larger
                than 64 Kb.

                Default: -qpic=small

         -qppline | -qnoppline
                When used in conjunction with the -E or -P options,
                enables or disables the generation of #line
                directives in the preprocessed output.

                Default:
                     o -qnoppline with -P
                     o -qppline with -E

         -qpriority=<num>
                (C++) Specifies the priority level for the
                initialization of static objects, where <num> is
                the initialization priority level assigned to the
                static objects within a file, or the priority level
                of a shared or non-shared file or library.
                You can specify a priority level from -(2147483647
                + 1) (highest priority) to +2147483647 (lowest
                priority).

                Default: -qpriority=0

         -qproto | -qnoproto
                (C) Assumes that all functions are prototyped.
                Asserts that procedure call points agree with their
                declarations even if the procedure has not been
                prototyped. This allows the caller to pass
                floating-point arguments in floating-point
                registers instead of general-purpose registers.

                Default: -qnoproto

         -r     Produces a relocatable object. This permits the
                output file to be produced even though it contains
                unresolved symbols.

         -qreserved_reg=<registers_list>
                Indicates that the specified register(s) cannot be
                used during the compilation, except as a stack
                pointer, frame pointer or in a  different fixed
                role. <registers_list> is a colon-separated list of
                registers.

         -qro | -qnoro
                Specifies the storage type for string literals and
                puts string literals in read-only storage.

                Default:
                     o -qnoro with cc and its derivatives
                     o -qro otherwise

         -qroconst | -qnoroconst
                Specifies the storage location for constant values.

                Default:
                     o -qroconst with xlc, xlc++, xlC, c89 and c99
                     invocations commands
                     o -qnoroconst with cc.

         -qroptr | -qnoroptr
                Specifies the storage location for constant
                pointers.

                Default: -qnoroptr

         -qrtti=<option> | -qnortti
                (C++) Generates runtime type identification (RTTI)
                information for the typeid and dynamic_cast
                operators.  The suboptions are:

                all
                     Generates the information needed for the RTTI
                     typeid and dynamic_cast operators.
                type | typeinfo
                     Generates the information needed for the RTTI
                     typeid operator only.
                dyna | dynamiccast
                     Generates the information needed for the RTTI
                     dynamic_cast operator only.

                Default: -qnortti

         -s     Strips the symbol table, line number information,
                and relocation information from the output file.

         -qsaveopt | -qnosaveopt
                Saves the command-line options used for compiling a
                source file, the version and level of each compiler
                component invoked during compilation, and other
                information to the corresponding object file.
                This option must be used with the -c option.

                Default: -qnosaveopt

         -qstatsym | -qnostatsym
                Adds user-defined, non-external names that have a
                persistent storage class (such as initialized and
                uninitialized static variables) to the name list
                (the symbol table of objects).

                Default: -qnostatsym

         -qtbtable=<suboption>
                Generates a traceback table that contains
                information about each function, including the type
                of function as well as stack frame and register
                information. The traceback table is placed in the
                text segment at the end of its code.  Suboptions
                include:

                none
                     No traceback table is generated.
                small
                     A traceback table is generated with no name or
                     parameter information. This is the default
                     with optimization if -g is not specified.
                full
                     A full traceback table is generated. This is
                     the default with -qnoopt or -g specified.

                Default:
                     o -qtbtable=full when compiling non-optimized
                     (without -O) or for debugging (with -g)
                     o -qtbtable=small otherwise

         -qthreaded | -qnothreaded
                Ensures that all optimizations will be thread-safe
                for executing in a multi-threaded environment.

                Default:
                     o -qthreaded when compiling invocation
                     commands ending in "_r" or "_r7".
                     o -qnothreaded otherwise.

         -qtls[=<model>] | -qnotls
                Specifies the thread-local storage model to be used
                by the application, where <model> can be:

                global-dynamic
                     This model is the most general, and can be
                     used for all thread-local variables.
                local-dynamic
                     This model provides better performance than
                     the global-dynamic model, and can be used for
                     thread-local variables defined in
                     dynamically-loaded modules.
                initial-exec
                     This model provides better performance than
                     the global-dynamic or local-dynamic models,
                     and can be used for thread-local variables
                     defined in dynamically-loaded modules,
                     provided that those modules are loaded at the
                     same time as the executable.
                local-exec
                     This model provides the best performance of
                     all of the models, but can only be used when
                     all thread-local variables are defined and
                     referenced by the main executable.

                Default:
                     o -qtls=unsupported
                     o -qtls=initial_exec if the -qnopic compiler
                     option is enabled.
                     o -qtls=global_dynamic if the -qpic compiler
                     option is enabled.

         -qunique | -qnounique
                (C++) Generates unique names for static
                constructor/destructor file compilation units.
                (C) Generates unique names for the sinit and sterm
                functions which are used by #pragma init and
                #pragma fini, respectively.

                Default: -qnounique

         -qweakexp | -qnoweakexp
                When used with the -qmkshrobj or -G options,
                includes or excludes global symbols marked as weak
                from the export list generated when you create a
                shared object.

                Default: -qweakexp

         -qweaksymbol | -qnoweaksymbol
                Instructs the compiler to generate weak symbols.

                Default: -qweaksymbol

         -qxcall | -qnoxcall
                Generates code to treat static functions within a
                compilation unit as if they were external
                functions.

                Default: -qnoxcall

  Error checking and debugging options
         -#     Traces the compilation and generates information on
                the progress of the compilation without invoking
                the preprocessor, compiler, or linkage editor.

         -qcheck[=<suboptions_list>] | -qnocheck
                Generates code that performs certain types of
                runtime checking. If a violation is encountered, a
                runtime exception is raised by sending a SIGTRAP
                signal to the process.  <suboptions_list> is a
                colon-separated list of one or more of the
                following:

                all
                     Enables all suboptions.
                bounds | nobounds
                     Performs runtime checking of addresses when
                     subscripting within an object of known size.
                divzero | nodivzero
                     Performs runtime checking of integer division.
                     A trap will occur if an attempt is made to
                     divide by zero.
                nullptr | nonullptr
                     Performs runtime checking of addresses
                     contained in pointer variables used to
                     reference storage.

                Specifying -qcheck with no suboptions is equivalent
                to -qcheck=all.

                Default: -qnocheck

         -qdbxextra | -qnodbxextra
                (C) Specifies that all typedef declarations,
                struct, union, and enum type definitions are
                included for debugging. Use this option with the -g
                option to produce additional debugging information
                for use with a debugger.

                Default: -qnodbxextra

         -qdpcl | -qnodpcl
                Generates symbols that can be used by tools based
                on the Dynamic Probe Class Library (DPCL) to see
                the structure of an executable file.

                Default: -qnodpcl

         -qextchk | -qnoextchk
                Generates bind-time type-checking information and
                checks for compile-time consistency.

                Default: -qnoextchk

         -qflttrap[=<suboptions_list>] | -qnoflttrap
                Generates instructions to detect and trap runtime
                floating-point exceptions. <suboptions_list> is a
                colon-separated list of one or more of the
                following suboptions:

                enable
                     Enables trapping of the specified exceptions.
                imprecise
                     Only checks for the specified exceptions on
                     subprogram entry and exit.
                inexact
                     Detects floating-point inexact exceptions.
                invalid
                     Detects floating-point invalid operation
                     exceptions.
                nanq
                     Generates code to detect and trap NaNQ (Quiet
                     Not-a-Number) exceptions handled or generated
                     by floating-point operations.
                overflow
                     Detects floating-point overflow.
                underflow
                     Detects floating-point underflow.
                zerodivide
                     Detects floating-point division by zero.

                Default: -qnoflttrap

         -qformat=<options_list> | -qnoformat
                Warns of possible problems with string input and
                output format specifications. Functions diagnosed
                are printf, scanf, strftime, strfmon family
                functions and functions marked with format
                attributes. <options_list> is a comma-separated
                list of one or more of the following suboptions:

                all | noall
                     Turns on all format diagnostic messages.
                exarg | noexarg
                     Warns if excess arguments appear in printf and
                     scanf style function calls.
                nlt | nonlt
                     Warns if a format string is not a string
                     literal, unless the format function takes its
                     format arguments as a va_list.
                sec | nosec
                     Warns of possible security problems in use of
                     format functions.
                y2k | noy2k
                     Warns of strftime formats that produce a 2-
                     digit year.
                zln | nozln
                     Warns of zero-length formats.

                Default:
                     o -qnoformat, which is equivalent to
                     -qformat=noall.
                     o -qformat=all if -qformat is specified
                     without any suboptions.

         -qfullpath | -qnofullpath
                Records the full or absolute path names of source
                and include files in object files compiled with
                debugging information (when you use the -g option).

                Default: -qnofullpath

         -g     Generates debug information for debugging tools.
                -g implies the -Q! option.

         -qhalt=<sev>
                Stops the compiler after the first phase if the
                severity level of errors detected equals or exceeds
                the specified level, <sev>. The severity levels in
                increasing order of severity are:

                i = informational messages
                w = warning messages
                e = error messages (C only)
                s = severe error messages

                Default: -qhalt=s

         -qhaltonmsg=<msgnum_list>
                (C++) Stops the compiler after the compilation
                phase where it encounters the specified message
                number(s), where <msgnum_list> is a comma-separated
                list of message numbers.

         -qheapdebug | -qnoheapdebug
                Enables debug versions of memory management
                functions.

                Default: -qnoheapdebug

         -qinfo[=[<suboption>][<groups_list>]] | -qnoinfo
                Produces or suppresses informational messages.
                <groups_list> is a colon-separated list. If a
                <groups_list> is specified along with a
                <suboption>, a colon must separate them. The
                suboptions are:

                all
                     Enables all diagnostic messages for all
                     groups.
                noall
                     Disables all diagnostic messages for all
                     groups.
                als
                     Enables reporting of possible violations of
                     the ANSI aliasing rule in effect.
                noals
                     Disables reporting of possible ANSI aliasing-
                     rule violations.
                private
                     Lists shared variables that are made private
                     to a parallel loop.
                reduction
                     Lists variables that are recognized as
                     reduction variables inside a parallel loop.

                <groups_list> turns on or off specific groups of
                messages and is a colon-separated list of one or
                more of the following:

                c99 | noc99
                     (C) C code that might behave differently
                     between C89 and C99 language levels
                cls | nocls
                     C++ classes
                cmp | nocmp
                     Possible redundancies in unsigned comparisons
                cnd | nocnd
                     Possible redundancies or problems in
                     conditional expressions
                cns | nocns
                     Operations involving constants
                cnv | nocnv
                     Conversions
                dcl | nodcl
                     Consistency of declarations
                eff | noeff
                     Statements and pragmas with no effect
                enu | noenu
                     Consistency of enum variables
                ext | noext
                     Unused external definitions
                gen | nogen
                     General diagnostic messages
                gnr | nognr
                     Generation of temporary variables
                got | nogot
                     Use of goto statements
                ini | noini
                     Possible problems with initialization
                lan | nolan
                     Language level effects
                obs | noobs
                     Obsolete features
                ord | noord
                     Unspecified order of evaluation
                par | nopar
                     Unused parameters
                por | nopor
                     Non-portable language constructs
                ppc | noppc
                     Possible problems with using the preprocessor
                ppt | noppt
                     Trace of preprocessor actions
                pro | nopro
                     Missing function prototypes
                rea | norea
                     Code that cannot be reached
                ret | noret
                     Consistency of return statements
                trd | notrd
                     Possible truncation or loss of data or
                     precision
                tru | notru
                     Variable names truncated by the compiler
                trx | notrx
                     Rounding of hexadecimal floating-point
                     constants
                uni | nouni
                     Uninitialized variables
                upg | noupg
                     Upgrade issues from one release to the next
                     release
                use | nouse
                     (C++) Unused auto and static variables
                vft | novft
                     (C++) Generation of virtual function tables in
                     C++ programs
                zea | nozea
                     Zero-extent arrays

                Default:
                     (C) -qnoinfo
                     (C++) -qinfo=lan:trx
                If -qinfo is specified without a suboption, the
                default is -qinfo=all for C and -qinfo=all:noppt
                for C++.

         -qinitauto=<hex_value> | -qnoinitauto
                Initializes each byte or word of storage for
                automatic variables to the specified hexadecimal
                value <hex_value>. This generates extra code and
                should only be used for error determination.

                Default: -qnoinitauto

         -qkeepparm | -qnokeepparm
                Ensures that function parameters are stored on the
                stack even if the application is optimized. As a
                result, parameters remain in the expected memory
                location, providing access to the values of these
                incoming parameters to tools such as debuggers.

                Default: -qnokeepparm

         -qlinedebug | -qnolinedebug
                Generates only abbreviated line number and source
                file name information for the debugger.

                Default: -qnolinedebug

         -qmaxerr=<num>[:<sev>] | -qnomaxerr
                Instructs the compiler to halt compilation when the
                specified number of errors of the specified
                severity (by default, the value of -qhalt) or
                greater is reached. <num> must be an integer. The
                severity levels, <sev>, are:

                i = informational
                w = warning
                e = error (C only)
                s = severe error

                Default: -qnomaxerr

         -qoptdebug | -qnooptdebug
                When used with high levels of optimization,
                -qoptdebug produces source files containing
                optimized pseudocode that can be read by a
                debugger.
                An output file with a .optdbg extension is created
                for each input file compiled with -qoptdebug. You
                can use the information contained in this file to
                help you understand how your code actually behaves
                under optimization.

                Default: -qnooptdebug

         -qsymtab={unref|static}
                (C) Determines what types of information appear in
                the symbol table. The suboptions are:

                unref
                     Specifies that all typedef declarations,
                     struct, union, and enum type definitions are
                     included for processing by the debugger.
                static
                     Adds user-defined, non-external names that
                     have a persistent storage class (such as
                     initialized and uninitialized static
                     variables) to the name list.

                Default:
                     The default is to not add static variables to
                     the symbol table.

         -qsyntaxonly
                (C) Performs syntax checking without generating an
                object file.

                Default:
                     By default, source files are compiled and
                     linked to generate an executable file.

         -qwarn64 | -qnowarn64
                Enables checking for possible data conversion
                problems between 32-bit and 64-bit compiler modes.

                Default: -qnowarn64

  Listing and messages options
         -qattr[=full] | -qnoattr
                Produces a compiler listing that includes an
                attribute listing for all identifiers. If -qattr is
                specified, the listing contains only those
                identifiers that are used. If -qattr=full is
                specified, the listing contains all names. If
                -qnoattr is specified, no listing is produced.

                Default: -qnoattr

         -qdump_class_hierarchy
                (C++) For each class object, this option dumps a
                representation of its hierarchy and virtual
                function table layout to a file. The file name is
                created by appending ".class" to the source file
                name.

         -qflag=<listing_severity>:<terminal_severity>
                Defines the minimum severity level of diagnostic
                messages to be written to the listing file and to
                the user terminal. <listing_severity> is the
                minimum level for the listing file, and
                <terminal_severity> is the minimum level for the
                terminal. The message severity levels are:

                i = informational messages
                w = warning messages
                e = error, severe error and unrecoverable error
                messages (C only)
                s = severe error and unrecoverable error messages
                (C)
                s = severe error messages (C++)

                Default: -qflag=i:i

         -qlist[={offset|nooffset}] | -qnolist
                Produces a compiler listing that includes an object
                listing. You can use the object listing to help
                understand the performance characteristics of the
                generated code and to diagnose execution problems.

                offset | nooffset
                     Changes the offset of the PDEF header from
                     00000 to the offset of the start of the text
                     area.

                Specifying -qlist without the suboption is
                equivalent to list=nooffset.

                Default: -qnolist

         -qlistopt | -qnolistopt
                Produces a compiler listing that displays all the
                options that were in effect when the compiler was
                invoked.

                Default: -qnolistopt

         -qphsinfo | -qnophsinfo
                Reports the time taken in each compilation phase.
                Phase information is sent to standard output. The
                output takes the form <number1>/<number2> for each
                phase where <number1> represents the CPU time used
                by the compiler and <number2> represents the total
                of the compiler time and the time that the CPU
                spends handling system calls.

                Default: -qnophsinfo

         -qprint | -qnoprint
                Enables or suppresses listings. Specifying
                -qnoprint overrides all listing-producing options,
                regardless of where they are specified, to suppress
                listings.

                Default: -qprint

         -qreport | -qnoreport
                Instructs the compiler to produce transformation
                reports that show how program loops are optimized.
                The compiler also reports the number of streams
                created for a given loop.  The transformation
                reports are included as part of the compiler
                listing. This option requires -qhot or -qsmp in
                order to have effect.
                When used with -qipa=clonearch, -qreport produces
                transformation reports on the procedures that are
                cloned for the architectures specified by the
                option.

                Default: -qnoreport

         -qshowinc[=<types_list>] | -qnoshowinc
                Used with -qsource to selectively show user header
                files (includes using " ") or system header files
                (includes using < >) in the program source listing.
                <types_list> is a colon-separated list of one or
                more of the following types:

                usr | nousr
                     Specifies whether to show user include files.
                sys | nosys
                     Specifies whether to show system include
                     files.
                all
                     Shows both user and system include files.

                Default: -qnoshowinc

         -qsource | -qnosource
                Produces a compiler listing that includes source
                code.

                Default: -qnosource

         -qsrcmsg | -qnosrcmsg
                (C) Adds the corresponding source code lines to the
                diagnostic messages in the stderr file.

                Default: -qnosrcmsg

         -qsuppress=<msg_id> | -qnosuppress
                Prevents the specified compiler or driver
                informational or warning messages from being
                displayed or added to the listings, where <msg_id>
                is a colon-separated list of message numbers that
                will not be displayed.

                Default: -qnosuppress

         -v     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a comma-separated list.

         -V     Instructs the compiler to report information on the
                progress of the compilation, and names the programs
                being invoked within the compiler and the options
                being specified to each program. Information is
                displayed in a space-separated list.

         -qversion[=verbose]
                Displays the official compiler product name and the
                compiler version found on the system.

                verbose
                     Additionally displays information about the
                     version, release, and level of each compiler
                     component installed.


         -w     Suppresses informational, language-level and
                warning messages.
                Specifying this option is equivalent to specifying
                -qflag=e:e in C or -qflag=s:s in C++.

         -qxref[=full] | -qnoxref
                Specifies whether to produce a compiler listing
                that includes a cross-reference listing of all
                identifiers.
                Specifying -qxref will report only identifiers that
                are used, -qxref=full reports all identifiers in
                the program, and -qnoxref does not report any
                identifiers in the program. The -qnoprint option
                overrides this option.

                Default: -qnoxref

  Optimization and tuning options
         -qaggrcopy={overlap|nooverlap}
                Enables destructive copy operations for structures
                and unions.

                overlap | nooverlap
                     Enables or disables optimizations for
                     structure and union assignments. nooverlap
                     assumes that the source and destination for
                     structure and union assignments do not
                     overlap, allowing the compiler to generate
                     faster code. overlap inhibits these
                     optimizations.

                Default: -qaggrcopy=nooverlap

         -qalias=<suboptions_list>
                Specifies the aliasing assertions to be applied to
                your compilation unit. <suboptions_list> is a
                colon-separated list of the following options:

                addrtaken | noaddrtaken
                     Variables are disjoint from pointers unless
                     their address is taken.
                allptrs | noallptrs
                     Pointers are never aliased if allptrs is
                     specified, but may be aliased if noallptrs is
                     specified. -qalias=allptrs implies
                     -qalias=typeptr.
                ansi | noansi
                     If ansi is specified, type-based aliasing is
                     used during optimization, which restricts the
                     lvalues that can be safely used to access a
                     data object. This option has no effect unless
                     you also specify the -O option.
                     Specifying -qalias=noansi turns off type-based
                     aliasing completely.
                global | noglobal
                     When global is in effect, type-based aliasing
                     rules are enabled during IPA link-time
                     optimization across compilation units. Both
                     -qipa and -qalias=ansi must be enabled for
                     -qalias=global to have an effect.
                     Specifying noglobal disables type-based
                     aliasing rules across compilation units.
                restrict | norestrict
                     When restrict is in effect, optimizations for
                     pointers qualified with the restrict keyword
                     are enabled. Specifying norestrict disables
                     optimizations for restrict-qualified pointers.
                     -qalias=restrict is independent from other
                     -qalias suboptions.
                typeptr | notypeptr
                     Pointers to different types are never aliased
                     if typeptr is specified, but may be aliased if
                     notypeptr is specified.

                Default:
                     (C++) -qalias=noaddrtaken:noallptrs:ansi:global:
                     restrict:notypeptr
                     (C) -qalias=noaddrtaken:noallptrs:ansi:global:
                     restrict:notypeptr for all invocation commands
                     except cc.
                     -qalias=noaddrtaken:noallptrs:noansi:global:
                     restrict:notypeptr for the cc invocation command.

         -qarch=<suboption>
                Specifies the general processor architecture for
                which the code (instructions) should be generated.
                In general, the -qarch option allows you to target
                a specific architecture for the compilation.  For
                any given -qarch setting, the compiler defaults to
                a specific, matching -qtune setting, which can
                provide additional performance improvements.  The
                suboptions are:

                auto
                     Automatically detects the specific
                     architecture of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                403
                     Produces object code containing instructions
                     that will run on the PowerPC 403 hardware
                     platform.
                604
                     Produces an object that contains instructions
                     that run on PowerPC 604 systems.
                pwr3
                     Produces an object that contains instructions
                     that run on the POWER3 hardware platforms.
                pwr4
                     Produces an object that contains instructions
                     that run on the POWER4 hardware platforms.
                pwr5
                     Produces an object that contains instructions
                     that run on the POWER5 hardware platforms.
                pwr5x
                     Produces an object that contains instructions
                     that run on the POWER5+ hardware platforms.
                pwr6
                     Produces object code containing instructions
                     that will run on the POWER6 hardware platforms
                     running in POWER6 architected mode.  If you
                     would like support for decimal floating-point
                     instructions, be sure to specify this
                     suboption during compilation.
                pwr6e
                     Produces object code containing instructions
                     that will run on the POWER6 hardware platforms
                     running in POWER6 raw mode.
                ppc
                     Produces an object that contains instructions
                     that run on any of the 32-bit PowerPC hardware
                     platforms.  Using -q64 with ppc upgrades the
                     architecture to ppc64.
                ppc64
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform. When compiled
                     in 32-bit mode, the resulting object code may
                     include instructions that are not recognized
                     or behave differently when run on 32-bit
                     PowerPC platforms.
                ppcgr
                     In 32-bit mode, produces object code
                     containing optional graphics instructions for
                     PowerPC hardware platforms.
                     In 64-bit mode, produces object code
                     containing optional graphics instructions that
                     will run on 64-bit PowerPC platforms, but not
                     on 32-bit-only platforms. Using -q64 with
                     ppcgr upgrades the architecture to ppc64gr.
                ppc64gr
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics instructions.
                ppc64grsq
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional graphics and square root
                     instructions.
                ppc64v
                     Produces object code that will run on any 64-
                     bit PowerPC hardware platform that supports
                     the optional vector instructions, such as a
                     PowerPC 970.
                ppc970
                     Generates instructions specific to PowerPC 970
                     processors.
                rs64a
                     Produces an object that contains instructions
                     that run on an RS64I hardware platform.
                rs64b
                     Produces an object that contains instructions
                     that run on an RS64II hardware platform.
                rs64c
                     Produces an object that contains instructions
                     that run on an RS64III hardware platform.

                Default: -qarch=ppc

         -qcache=<suboptions_list>
                Describes the cache configuration for a specific
                target execution machine, where <suboptions_list>
                is a colon-separated list of one or more of the
                following suboptions:

                assoc=<number>
                     Specifies the set associativity of the cache,
                     where <number> is one of the following:
                          0         Direct-mapped cache
                          1         Fully associative cache
                          (n > 1)   n-way set associative cache
                auto
                     Automatically detects the specific cache
                     configuration of the compiling machine. It
                     assumes that the execution environment will be
                     the same as the compilation environment.
                cost=<cycles>
                     Specifies the performance penalty, in CPU
                     cycles, resulting from a cache miss.
                level=<level>
                     Specifies which level of cache is affected,
                     where level is one of the following:
                          1     Basic cache
                          2     Level-2 cache
                          3     Table Lookaside Buffer (TLB)
                     If a machine has more than one level of cache,
                     use a separate -qcache option.
                line=<bytes>
                     Specifies the line size of the cache.
                size=<Kbytes>
                     Specifies the total size of the cache.
                type=<cache_type>
                     The settings apply to the specified type of
                     cache, where <cache_type> is one of the
                     following:
                          c = Combined data and instruction cache
                          d = Data cache
                          i = Instruction cache

                Default:
                     The -qtune setting determines the optimal
                     default -qcache settings for most typical
                     compilations. -O4, -O5, or -qipa must be
                     specified with the -qcache option.

         -qcompact | -qnocompact
                Reduces code size where possible, at the expense of
                execution speed. Code size is reduced by inhibiting
                optimizations that replicate or expand code inline.
                This option takes effect only if -O2 or higher is
                also used.

                Default: -qnocompact

         -qdataimported[=<variable_names>]
                Specifies variables that the compiler can assume
                are imported. <variable_names> is a colon-separated
                list of variables. Specifying -qdataimported
                without <variable_names> instructs the compiler to
                assume that all variables are imported. This is
                equivalent to specifying -qnotocdata.
                (C++) Variable names must be specified using their
                mangled names.

         -qdatalocal[=<variable_names>]
                Specifies variables that the compiler can assume
                are local.  <variable_names> is a colon-separated
                list of variables.
                Specifying -qdatalocal with no variables instructs
                the compiler to assume that all variables are
                local. This is equivalent to specifying -qtocdata.
                (C++) Variable names must be specified using their
                mangled names.

         -qtocdata | -qnotocdata
                Marks all data as local.

                Default: -qnotocdata (marks all data as imported)

         -qdirectstorage | -qnodirectstorage
                Informs the compiler that write-through-enabled or
                cache-inhibited storage may be referenced.

                Default: -qnodirectstorage

         -qenablevmx | -qnoenablevmx
                Enables the generation of vector instructions for
                processors that support them. These instructions
                can offer higher performance when used with
                algorithmic-intensive tasks such as multimedia
                applications.
                For -qenablevmx to have effect, the architecture
                specified by the -qarch option must support vector
                instructions.
                If -qnoenablevmx is in effect, -qaltivec,
                -qvecnvol, and -qhot=simd cannot be used.

                Default: -qnoenablevmx

         -qfdpr | -qnofdpr
                Collects information about programs for use with
                the IBM Feedback Directed Program Restructuring
                (FDPR) performance-tuning utility.

                Default: -qnofdpr

         -qhot[=<suboption>] | -qnohot
                Specifies whether or not to perform high-order
                transformations during optimization. The suboptions
                are:

                arraypad[=<number>] | noarraypad
                     When <number> is specified, the compiler will
                     pad every array in the code. The pad amount
                     must be a positive integer value. Otherwise,
                     the compiler will pad any arrays where it
                     infers that there may be a benefit.
                level={0|1}
                     Specifies the level of high-order
                     transformation to perform during compilation.
                     0
                          The compiler performs a subset of the
                          high-order transformations. Some of these
                          include early distribution, loop
                          interchange, and loop tiling, as
                          examples. Optimization level -O3 implies
                          -qhot=level=0.
                     1
                          At level=1, full high-order
                          transformation is performed.
                          -qhot=level=1 is equivalent to -qhot and
                          the compiler options that imply -qhot
                          also imply -qhot=level=1, unless
                          -qhot=level=0 is explicitly specified.
                simd | nosimd
                     Converts certain operations in a loop that
                     apply to successive elements of an array into
                     a vector instruction.  This call calculates
                     several results at one time, which is faster
                     than calculating each result sequentially. If
                     you specify -qhot=nosimd, the compiler
                     performs optimizations on loops and arrays,
                     but avoids replacing certain code with vector
                     instructions.  To enable -qhot=simd, you must
                     specify an architecture that supports vector
                     instructions.
                vector | novector
                     When specified with -qnostrict and -qignerrno,
                     or an optimization level of -O3 or higher
                     (otherwise -qhot=vector has no effect), the
                     compiler converts certain operations in a loop
                     that apply to successive elements of an array
                     into a call to a routine in the Mathematical
                     Acceleration Subsystem (MASS) library, part of
                     the libxlopt.a library.
                     If you specify -qhot=novector, the compiler
                     performs optimizations on loops and arrays,
                     but avoids replacing certain code with calls
                     to vector library routines.

                Specifying -qhot without suboptions is equivalent
                to -qhot=noarraypad:level=1:nosimd:vector. If you
                specify -qhot without suboptions with -qenablevmx
                and a -qarch value that supports vector processing,
                -qhot=simd is enabled by default.

                Default:
                     o -qnohot
                     o -qhot=noarraypad:level=0:nosimd:novector
                     when -O3 is in effect.
                     o -qhot=noarraypad:level=1:nosimd:vector when
                     -qsmp, -O4 or -O5 is in effect.

         -qignerrno | -qnoignerrno
                Allows the compiler to perform optimizations that
                assume errno is not modified by system calls.

                Default: -qnoignerrno

         -qipa[=<suboptions_list>] | -qnoipa
                Turns on or customizes a class of optimizations
                known as interprocedural analysis (IPA).
                <suboptions_list> is a colon-separated list of the
                following suboptions:

                clonearch=<arch_names> | noclonearch
                     Specifies the architectures for which multiple
                     versions of the same instruction set are
                     produced, where <arch_names> is a comma-
                     separated list of architecture names. Use this
                     suboption if you require optimal performance
                     on multiple differing machines running the
                     same copy of your application.
                cloneproc=<function_names> |
                nocloneproc=<function_names>
                     Specifies the name of the functions to clone
                     for the architectures specified by the
                     clonearch suboption, where <function_names> is
                     a comma-separated list of function names.
                exits=<function_names>
                     Specifies names of functions which represent
                     program exits.  <function_names> is a comma-
                     separated list of function names.
                infrequentlabel=<function_names>
                     Specifies a comma-separated list of user-
                     defined labels that are likely to be called
                     infrequently during a program run.
                inline[=<suboption>]
                     Specifying 'inline' with no suboption asserts
                     that all appropriate functions will be
                     inlined. <suboption> can be one of the
                     following:
                     auto|noauto
                          Enables or disables automatic function
                          inlining by the high-level optimizer.
                          When -qipa=inline=auto is in effect, the
                          compiler considers all functions that are
                          under the maximum size limit (see below)
                          for inlining. When -qipa=inline=noauto is
                          in effect, only functions listed in the
                          <functions> suboption are considered for
                          inlining.
                     <functions>
                          Specifies a comma-separated list of
                          functions to attempt to inline.
                     limit=<num>
                          Specifies a limit on the size of a
                          calling function after inlining. This
                          only takes effect when inline=auto is on.
                          If you do not specify a value for <num>,
                          <num> is 8192 by default.
                     threshold=<num>
                          Specifies the upper size limit on
                          procedures to inline. This only takes
                          effect when inline=auto is on. If you do
                          not specify a value for <num>, <num> is
                          1024 by default.
                     Default: auto
                noinline[=<functions>]
                     Specifies a comma-separated list of functions
                     which are not to be inlined. Specifying
                     noinline without <functions> asserts that no
                     functions are to be inlined.
                isolated=<functions>
                     Specifies a comma-separated list of functions
                     that are not compiled with -qipa and do not
                     directly refer to any global variable.
                level=<level>
                     Determines the amount of IPA analysis and
                     optimization performed, where <level> can be
                     equal to:
                     0
                          Performs only minimal interprocedural
                          analysis and optimization.
                     1
                          Turns on inlining, limited alias
                          analysis, and limited call-site
                          tailoring.
                     2
                          Full interprocedural data flow and alias
                          analysis.
                     Default: 1
                list[={<file_name>|short|long}]
                     Specifies an output listing file name during
                     the link phase. The default name is "a.lst".
                     Specifying 'long' or 'short' can be used to
                     request more or less information in the
                     listing file to determine which listing
                     sections will be included.
                     Default: short
                lowfreq=<functions>
                     Specifies a comma-separated list of functions
                     that are likely to be called infrequently
                     during the course of a typical program run.
                malloc16 | nomalloc16
                     Informs the compiler that the dynamic memory
                     allocation routines will return 16-byte
                     aligned memory addresses. The compiler can
                     then optimize the code based on that
                     assertion.
                     Default: malloc16
                missing={unknown|safe|isolated|pure}
                     Specifies the default assumption for functions
                     not compiled with -qipa.
                     unknown
                          Greatly restricts the amount of
                          interprocedural optimization for calls to
                          unknown functions.
                     safe
                          Functions which do not indirectly call a
                          visible (not missing) function either
                          through direct call or function pointer.
                     isolated
                          Functions which do not directly reference
                          global variables accessible to visible
                          functions.
                     pure
                          Functions which are safe and isolated and
                          which do not indirectly alter storage
                          accessible to functions.
                     Default: missing=unknown
                object | noobject
                     Specifies whether to include standard object
                     code in the object files. Specifying
                     'noobject' can substantially reduce overall
                     compile time by not generating object code
                     during the first IPA phase.
                partition={small|medium|large}
                     Specifies the size of program sections that
                     are analyzed together. Larger partitions may
                     produce better analysis but require more
                     storage.
                     Default: partition=medium
                pure=<functions>
                     Specifies a comma-separated list of functions
                     not compiled with -qipa and that are
                     "isolated", "safe", and do not modify any data
                     objects that are visible to the caller.
                safe=<functions>
                     Specifies a comma-separated list of functions
                     not compiled with -qipa and that do not call
                     any other part of the program.
                threads[=<suboption>] | nothreads
                     Runs portions of the IPA optimization process
                     during pass 2 in parallel threads, which can
                     speed up the linking process on multi-
                     processor systems. <suboption> can be one of
                     the following:
                     auto | noauto
                          When auto is in effect, the compiler
                          selects a number of threads heuristically
                          based on machine load. When noauto is in
                          effect, the compiler spawns one thread
                          per machine processor.
                     <number>
                          Instructs the compiler to use a specific
                          number of threads. <number> can be any
                          integer value in the range of 1 to 32767.
                          However, <number> is effectively limited
                          to the number of processors available on
                          your system.
                     Specifying threads with no suboptions implies
                     threads=auto.
                     Default: -qipa=threads
                unknown=<functions>
                     Specifies a comma-separated list of functions
                     that are not compiled with -qipa and that may
                     update global variables and dummy arguments
                     and call other parts of the program compiled
                     with -qipa.
                <file_name>
                     Specifies the name of a file that contains
                     suboption information in a special format.

                Regular expressions are supported when specifying
                function names for these suboptions:
                cloneproc, nocloneproc, exits, inline, noinline,
                isolated, lowfreq, pure, safe, unknown.
                (C++) Function names must be specified using their
                mangled names.

                Default:
                     o -qnoipa
                     o -qipa=inline=auto:level=1:missing=unknown:
                     partition=medium:threads=auto when -O4 is in
                     effect.
                     o -qipa=inline=auto:level=2:missing=unknown:
                     partition=medium:threads=auto when -O5 is in
                     effect.
                     o -qipa=inline=auto:level=0:missing=unknown:
                     partition=medium:threads=auto when -qpdf1 or
                     -qpdf2 is in effect.

         -qisolated_call=<procedures>
                Informs the compiler that specific functions do not
                have or rely on side effects, other than those
                implied by their parameters. <procedures> is a
                colon-separated list of function names.

         -qlargepage | -qnolargepage
                Indicates that a program, designed to execute in a
                large page memory environment, can take advantage
                of large pages provided on certain Power systems.

                Default: -qnolargepage

         -qlibansi | -qnolibansi
                Assumes that all functions with the name of an ANSI
                C defined library function are, in fact, the
                library functions.

                Default: -qnolibansi

         -qmaxmem=<size>
                Limits the amount of memory used by certain
                memory-intensive optimizations to <size> kilobytes.
                When <size> is -1, the optimizer will use as much
                memory as needed.

                Default:
                     o -qmaxmem=8192 when -O2 level optimization is
                     set.
                     o -qmaxmem=-1 when -O3 level or greater
                     optimization is set.

         -qminimaltoc | -qnominimaltoc
                Avoids Table of Contents (TOC) overflow conditions
                by placing TOC entries into a separate data section
                for each object file. By default, the compiler will
                allocate at least one TOC entry for each unique
                non-automatic variable reference in your program.

                Default: -qnominimaltoc

         -O[<level>]
                Optimizes code at a choice of levels during
                compilation. This is equivalent to
                -qoptimize[=<level>]. <level> can be:

                0
                     Performs only quick local optimizations such
                     as constant folding and elimination of local
                     common subexpressions.
                2
                     Performs optimizations that the compiler
                     developers considered the best combination for
                     compilation speed and runtime performance. The
                     optimizations may change from product release
                     to release.
                3
                     Performs some memory and compile-time
                     intensive optimizations in addition to those
                     executed with -O2. The -O3 specific
                     optimizations have the potential to alter the
                     semantics of a program. The compiler guards
                     against these optimizations at -O2 and the
                     option -qstrict is provided at -O3 to turn off
                     these aggressive optimizations.
                     Specifying -O3 implies -qhot=level=0.
                4
                     This option is the same as -O3, but also:
                       o sets the -qarch and -qtune options to the
                       architecture of the compiling machine.
                       o sets the -qcache option most appropriate
                       to the characteristics of the compiling
                       machine.
                       o sets the -qipa option.
                       o sets the -qhot option to level=1.
                5
                     Equivalent to -O4 -qipa=level=2.

                Specifying -O with no <level> is equivalent to
                specifying -O2.

                Default: -O0

         -qoptimize[=<level>] | -qnooptimize
                The long form of the -O option. -qoptimize=<level>
                is equivalent to -O<level>. See the -O option.

                Default: -qnooptimize

         -p, -pg, -qprofile={-p|-pg}
                Sets up the object files produced by the compiler
                for profiling.
                -pg is like -p, but it produces more extensive
                statistics.

         -qpdf1[=pdfname=<file_path] | -qnopdf1
                Tunes optimizations through profile-directed
                feedback (PDF), where results from sample program
                execution are used to improve optimization near
                conditional branches and in frequently executed
                code sections.
                Used with a minimum optimization level of -O2,
                -qpdf1 produces an object that is instrumented to
                collect runtime execution information. This is
                phase 1 of the profile-directed feedback
                optimization process.

                pdfname=<file_path>
                     Specifies the location and name of the profile
                     data file containing the PDF profiling
                     information.
                     Default:
                       If you do not specify <file_path>, the
                       default file name is ._pdf and the file is
                       saved in the current working directory, or
                       in the directory named by the PDFDIR
                       environment variable, if it is set.

                Default: -qnopdf1

         -qpdf2[=pdfname=<file_path>] | -qnopdf2
                Tunes optimizations through profile-directed
                feedback (PDF), where results from sample program
                execution are used to improve optimization near
                conditional branches and in frequently executed
                code sections.
                Used with a minimum optimization level of -O2,
                -qpdf2 tunes application performance using the data
                generated by running a program compiled with
                -qpdf1. This is phase 2 of the profile-directed
                feedback optimization process.

                pdfname=<file_path>
                     Specifies the location and name of the profile
                     data file containing the PDF profiling
                     information.
                     Default:
                       If you do not specify <file_path>, the
                       default file name is ._pdf and the file is
                       saved in the current working directory, or
                       in the directory named by the PDFDIR
                       environment variable, if it is set.

                Default: -qnopdf2

         -qprefetch | -qnoprefetch
                Enables generation of prefetching instructions such
                as dcbt and dcbz in compiled code.

                Default: -qprefetch

         -qprocimported[=<procedures>] | -qnoprocimported
                Specifies functions that the compiler can assume
                are imported. Imported functions are dynamically
                bound with a shared portion of a library. Code
                generated for calls to functions marked as imported
                may be larger, but is faster than the default code
                sequence generated for functions marked as unknown.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -qproclocal[=<procedures>] | -qnoproclocal
                Specifies functions that the compiler can assume
                are local. Local functions are statically bound
                with the functions that call them; smaller, faster
                code is generated for calls to such functions.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -qprocunknown[=<procedures>] | -qnoprocunknown
                Specifies functions that the compiler can assume are
                unknown. Unknown functions are resolved to either
                statically or dynamically bound objects during linking.
                <procedures> is a colon-separated list of function
                identifiers.
                (C++) In C++ programs, function names must be
                specified using their mangled names.

         -Q[<suboption>]
                (C++) Instructs the compiler to try to inline
                functions. Inlining is performed if possible but,
                depending on which optimizations are performed,
                some functions might not be inlined.

                (C) Specifies which specific functions the compiler
                should attempt to inline. You must specify at least
                an optimization level of -O2 for inlining to take
                effect with -Q. To turn on inline expansion for
                calls to procedures in different scopes, you must
                also use the -qipa=inline.

                (C++) In the C++ language, this option can take the
                form:

                -Q
                     Compiler inlines all functions that it can.
                -Q!
                     Compiler does not inline any functions.

                (C) In the C language, this option can take the
                form:

                -Q
                     Attempts to inline all appropriate functions
                     with 20 executable source statements or fewer,
                     subject to the setting of any of the
                     suboptions to the -Q option. If -Q is
                     specified last, all functions are inlined.
                -Q!
                     Does not inline any functions. If -Q! is
                     specified last, no functions are inlined.
                -Q-<names>
                     Does not inline functions listed in <names>,
                     where <names> is a colon-separated list. All
                     other appropriate functions are inlined. The
                     option implies -Q.
                -Q+<names>
                     Attempts to inline the functions listed in
                     <names>, where <names> is a colon-separated
                     list. All other appropriate functions are
                     inlined.
                -Q=<threshold>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <threshold> for
                     the function to be inlined.

                Default: -Q!

         -qinline[<suboption>] | -qnoinline
                Specifies whether to attempt to inline functions
                instead of generating calls to a function.

                (C++) In C++, you cannot specify any suboptions.
                -qinline specifies that all appropriate functions
                should be inlined, and -qnoinline specifies that no
                functions should be inlined.

                (C) In C, this option can take the following forms:

                -qinline
                     The compiler attempts to inline all
                     appropriate functions with 20 executable
                     source statements or fewer, subject to any
                     other settings of the suboptions to the
                     -qinline option.
                -qinline+<procedures>
                     Attempts to inline the functions listed in
                     <procedures> and any other appropriate
                     functions, where <procedures> is a colon-
                     separated list.
                -qinline-<procedures>
                     Specifies that functions listed in
                     <procedures> do not get inlined, where
                     <procedures> is a colon-separated list.
                -qnoinline
                     Does not inline any functions.
                -qinline=threshold=<num>
                     Sets a size limit on the functions to be
                     inlined. The number of executable statements
                     must be less than or equal to <num> for the
                     function to be inlined. <num> must be a
                     positive integer.

                Default:
                     The default is to treat inline specifications
                     as a hint to the compiler, and the result
                     depends on other options that you select. If
                     you specify the -g option (to generate debug
                     information), inlining may be affected.

         -qshowpdf | -qnoshowpdf
                Used with -qpdf1 and a minimum optimization level
                of -O2 to add additional call and block count
                profiling information to an executable.

                Default: -qnoshowpdf

         -qsmallstack | -qnosmallstack
                Reduces the size of the stack frame. This option is
                only valid when used together with IPA (-qipa, -O4,
                -O5 compiler options).

                Default: -qnosmallstack

         -qsmp[=<suboptions_list>] | -qnosmp
                Enables parallelization of program code.
                <suboptions_list> is a colon-separated list of one
                or more of the following suboptions:

                auto | noauto
                     Enables automatic parallelization and
                     optimization. If noauto is specified,
                     automatic parallelization of program code is
                     disabled; only program code explicitly
                     parallelized with OpenMP directives is
                     optimized.
                     Default: auto
                nested_par | nonested_par
                     If nested_par is specified, prescriptive
                     nested parallel constructs are parallelized by
                     the compiler.
                     Default: nonested_par
                omp | noomp
                     Enables strict OpenMP compliance. Only OpenMP
                     parallelization pragmas are recognized.
                     Default: noomp
                opt | noopt
                     Enables automatic parallelization but disables
                     optimization of parallelized program code. If
                     noopt is specified, optimization of
                     parallelized program code is disabled.
                     Default: opt
                rec_locks | norec_locks
                     Specifies whether to use recursive locks.
                     Default: norec_locks
                schedule=<type>
                     Specifies what kinds of scheduling algorithms
                     and chunking are used for loops to which no
                     other scheduling algorithm has been explicitly
                     assigned in the source code. <type> can be:
                       o affinity[=<num>]
                       o dynamic[=<num>]
                       o guided[=<num>]
                       o runtime
                       o static[=<num>],
                     where <num> is the number of loop iterations.
                     Default: schedule=runtime
                stackcheck | nostackcheck
                     Causes the compiler to check for stack
                     overflow by slave threads at run time, and
                     issue a warning if the remaining stack size is
                     less than the number of bytes specified by the
                     stackcheck option of the XLSMPOPTS environment
                     variable. This suboption is intended for
                     debugging purposes, and only takes effect when
                     XLSMPOPTS=stackcheck is also set.
                     Default: nostackcheck
                threshold[=<num>]
                     When -qsmp=auto is in effect, controls the
                     amount of automatic loop parallelization that
                     occurs. The value of <num> represents the
                     lower limit allowed for parallelization of a
                     loop, based on the level of "work" present in
                     a loop.
                     Default:
                       <num> must be a positive integer of 0 or
                       greater. If you specify threshold with no
                       suboption, the program uses a default value
                       of 100.

                Specifying -qsmp without suboptions is equivalent
                to -qsmp=auto:explicit:noomp:opt:norec_locks:
                nonested_par:schedule=runtime:nostackcheck:
                threshold=100.

                Default: -qnosmp

         -qspeculateabsolutes | -qnospeculateabsolutes
                Works with the -qtocmerge -bl:file for non-IPA
                links and with the -bl:file for IPA links to
                disable speculation at absolute addresses.
                The bl:file is necessary for the compiler to know
                which addresses are absolutes.

                Default: -qspeculateabsolutes

         -qstrict[=<suboptions_list>] | -qnostrict
                Ensures that optimizations done by default at
                optimization levels -O3 and higher, and, optionally
                at -O2, do not alter the semantics of a program.

                The -qstrict=all, -qstrict=precision,
                -qstrict=exceptions, -qstrict=ieeefp, and
                -qstrict=order suboptions and their negative forms
                are group suboptions that affect multiple,
                individual suboptions. Group suboptions act as if
                either the positive or the no form of every
                suboption of the group is specified.

                Default:

                     o Always -qstrict or -qstrict=all when the
                     -qnoopt or -O0 optimization level is in effect
                     o -qstrict or -qstrict=all is the default when
                     the -O2 or -O optimization level is in effect
                     o -qnostrict or -qstrict=none is the default
                     when -O3 or a higher optimization level is in
                     effect

                <suboptions_list> is a colon-separated list of one
                or more of the following:

                all | none
                     all disables all semantics-changing
                     transformations, including those controlled by
                     the ieeefp, order, library, precision, and
                     exceptions suboptions.  none enables these
                     transformations.
                precision | noprecision
                     precision disables all transformations that
                     are likely to affect floating-point precision,
                     including those controlled by the subnormals,
                     operationprecision, association,
                     reductionorder, and library suboptions.
                     noprecision enables these transformations.
                exceptions | noexceptions
                     exceptions disables all transformations likely
                     to affect exceptions or be affected by them,
                     including those controlled by the nans,
                     infinities, subnormals, guards, and library
                     suboptions. noexceptions enables these
                     transformations.
                ieeefp | noieeefp
                     ieeefp disables transformations that affect
                     IEEE floating-point compliance, including
                     those controlled by the nans, infinities,
                     subnormals, zerosigns, and operationprecision
                     suboptions. noieeefp enables these
                     transformations.
                nans | nonans
                     nans disables transformations that may produce
                     incorrect results in the presence of, or that
                     may incorrectly produce IEEE floating-point
                     signaling NaN (not-a-number) values. nonans
                     enables these transformations.
                infinities | noinfinities
                     infinities disables transformations that may
                     produce incorrect results in the presence of,
                     or that may incorrectly produce floating-point
                     infinities.  noinfinities enables these
                     transformations.
                subnormals | nosubnormals
                     subnormals disables transformations that may
                     produce incorrect results in the presence of,
                     or that may incorrectly produce IEEE
                     floating-point subnormals (formerly known as
                     denorms). nosubnormals enables these
                     transformations.
                zerosigns | nozerosigns
                     zerosigns disables transformations that may
                     affect or be affected by whether the sign of a
                     floating-point zero is correct. nozerosigns
                     enables these transformations.
                operationprecision | nooperationprecision
                     operationprecision disables transformations
                     that produce approximate results for
                     individual floating-point operations.
                     nooperationprecision enables these
                     transformations.
                order | noorder
                     order disables all code reordering between
                     multiple operations that may affect results or
                     exceptions, including those controlled by the
                     association, reductionorder, and guards
                     suboptions. noorder enables code reordering.
                association | noassociation
                     association disables reordering operations
                     within an expression. noassociation enables
                     reordering operations.
                reductionorder | noreductionorder
                     reductionorder disables parallelizing
                     floating-point reductions. noreductionorder
                     enables these reductions.
                guards | noguards
                     guards disables moving operations past guards
                     or calls which control whether the operation
                     should be executed or not. enables these
                     moving operations.
                library | nolibrary
                     library disables transformations that affect
                     floating-point library functions. nolibrary
                     enables these transformations.

         -qstrict_induction | -qnostrict_induction
                Turns off loop induction variable optimizations
                that have the potential to alter the semantics of
                your program.

                Default:
                     o -qnostrict_induction at -O2 or higher.
                     o -qstrict_induction otherwise.

         -qtocmerge | -qnotocmerge
                Enables TOC merging to reduce TOC pointer loads and
                improves the scheduling of external loads. Reads
                from the file specified in -bImportfile linker
                option and merges the address information to access
                ranges of external addresses using a single table
                of contents entry.

                Default: -qnotocmerge

         -qtune=<suboption>
                Specifies the architecture system for which the
                executable program is optimized.
                <suboption> must be one of the following:

                403
                     Generates object code optimized for all the
                     PowerPC 403 processors.
                604
                     Generates object code optimized for all the
                     PowerPC 604 processors.
                auto
                     Generates object code optimized for the
                     hardware platform on which the program is
                     compiled.
                balanced
                     Optimizations are tuned across a selected
                     range of recent hardware.
                ppc970
                     Generates instructions specific to PowerPC 970
                     hardware platforms.
                pwr3
                     Generates object code optimized for the POWER3
                     hardware platforms.
                pwr4
                     Generates object code optimized for the POWER4
                     hardware platforms.
                pwr5
                     Generates object code optimized for the POWER5
                     hardware platforms.
                pwr6
                     Generates object code optimized for the POWER6
                     hardware platforms.
                rs64a
                     Generates object code optimized for the RS64I
                     processor.
                rs64b
                     Generates object code optimized for the RS64II
                     processor.
                rs64c
                     Generates object code optimized for the
                     RS64III processor.

                Default:
                     -qtune=balanced when the default -qarch
                     setting is in effect. Otherwise, the default
                     depends on the effective -qarch setting.

         -qunroll[=<suboption>] | -qnounroll
                Unrolls inner loops in the program. This can help
                improve program performance.  The suboptions are:

                auto
                     Instructs the compiler to perform basic loop
                     unrolling.
                yes
                     Instructs the compiler to search for more
                     opportunities for loop unrolling than that
                     performed with auto. In general, this
                     suboption is more likely to increase compile
                     time or program size than auto processing, but
                     it may also improve your application's
                     performance.
                no
                     Instructs the compiler to not unroll loops.

                Default: -qunroll=auto

                If -qunroll is specified with no suboptions, the
                compiler assumes -qunroll=yes. -qnounroll is
                equivalent to -qunroll=no.

         -qunwind | -qnounwind
                Informs the compiler that the stack can be unwound
                while a routine in the compilation is active.
                Specifying -qnounwind can improve the optimization
                of non-volatile register saves and restores.

                Default: -qunwind

  Linking options
         -b{dynamic|shared|static}
                Controls how shared objects are processed by the
                linkage editor. The suboptions are:

                dynamic, shared
                     Causes the linker to process subsequent shared
                     objects in dynamic mode. In dynamic mode,
                     shared objects are not statically included in
                     the output file. Instead, the shared objects
                     are listed in the loader section of the output
                     file.
                     -bdynamic and -bshared are synonymous.
                static
                     Causes the linker to process subsequent shared
                     objects in static mode. In static mode, shared
                     objects are statically linked in the output
                     file.

                Default: -bshared

         -bmaxdata:<bytes>
                Specifies the maximum amount of space to reserve
                for the program data segment for programs where the
                size of these regions is a constraint. Combined
                data space is slightly less than 256MB, or lower,
                depending onthe limits for the user ID.

                Default: -bmaxdata:0

         -brtl  Controls runtime linking for the output file.

         -qcrt | -qnocrt
                Instructs the linker to use the standard system
                startup files at link time.

                Default: -qcrt

         -e <name>
                Sets the entry name for a shared executable and is
                only used together with -qmkshrobj.

         -f<file_name>
                Names a file to store a list of object files for
                the compiler to pass to the linker. The <file_name>
                file should contain only the names of object files.
                There should be one object file per line.

         -L<dir>
                Searches the path directory for library files
                specified by the -l<key> option.

                Default:
                     The default is to search only the standard
                     directories.

         -l<key>
                Searches the file lib<key>.so and then lib<key>.a
                for dynamic linking, or only lib<key>.a for static
                linking.

                Default:
                     The default is to search only some of the
                     compiler runtime libraries.

         -qlib | -qnolib
                Specifies whether the compiler should use the
                standard system libraries at link time. -qnolib is
                similar to the gcc option nostdlib; the driver will
                not pass the standard system startup files or
                libraries when linking.

                Default: -qlib

         -qtwolink | -qnotwolink
                (C++) Links twice in order to minimize the number
                of static constructors included from libraries and
                object files.

                Default: -qnotwolink

         -Z<prefix>
                This linker option specifies a prefix for the
                library search path. This is useful when developing
                a new version of a library.

  Portability and migration options
         -qalign=<suboption>
                Specifies what aggregate alignment rules the
                compiler uses for file compilation, where the
                alignment suboptions are:

                bit_packed
                     The compiler uses the bit_packed alignment
                     rules.
                full
                     The compiler uses the RISC System/6000
                     alignment rules. This is the same as power.
                mac68k
                     The compiler uses the Macintosh alignment
                     rules. This suboption is valid only for 32-bit
                     compilations. It is the same as the twobyte
                     suboption.
                natural
                     The compiler maps structure members to their
                     natural boundaries.
                packed
                     The compiler uses the packed alignment rules.
                power
                     The compiler uses the RISC System/6000
                     alignment rules.
                twobyte
                     The compiler uses the Macintosh alignment
                     rules. This suboption is valid only for 32-bit
                     compilations. It is the same as the mac68k
                     suboption.

                Default: -qalign=full

         -qalignrulefor=power=[no]typedefrespectsrule
                (C++) When used with -qalign=power, determines
                whether a 4-byte alignment ceiling is applied to
                non-first members of structures that are of type
                typedef to array of element type that exceeds the
                alignment ceiling.

                typedefrespectsrule | notypedefrespectsrule
                     When typedefrespectsrule is in effect, the
                     member follows the normal alignment rules for
                     -qalign=power. This suboption provides
                     compatibility with code compiled with
                     -qalign=power with XL C++ V6.0 and earlier.
                     When notypedefrespectsrule is in effect, a
                     member that exceeds the alignment ceiling of 4
                     bytes is aligned on 4-byte boundaries. This
                     suboption provides compatibility with code
                     compiled with -qalign=power with XL C++ V7.0
                     and V8.0.

                Default: -qalignrulefor=power=typedefrespectsrule

         -qgenproto[=parmnames] | -qnogenproto
                (C) Generates ANSI prototypes from K&R function
                definitions and displays them on standard output.
                Specifying -qgenproto without '=parmnames' will
                cause prototypes to be generated without parameter
                names.

                Default: -qnogenproto

         -qnamemangling=<scheme>
                (C++) Chooses the name mangling scheme for external
                symbol names generated from C++ source code. The
                <scheme> can be:

                ansi
                     Fully supports the most recent language
                     features of Standard C++.
                v10
                     Compatible with XL C++ V10.1. (This is
                     equivalent to ansi.)
                v9
                     Compatible with XL C++ V9.0.
                v8
                     Compatible with XL C++ V8.0.
                v7
                     Compatible with XL C++ V7.0.
                v6
                     Compatible with VisualAge C++ V6.0.
                v5
                     The scheme for VisualAge C++ V5.0.
                v4
                     The scheme for VisualAge C++ V4.0.
                v3
                     The scheme for VisualAge C++ releases before
                     V4.0.
                compat
                     Same as v3.

                Default: -qnamemangling=ansi

         -qobjmodel={classic|ibm}
                (C++) Specifies the object model.

                classic
                     This object model is compatible with version
                     3.6 of the IBM C and C++ compilers.
                ibm
                     Uses the object model introduced with version
                     5.0 of VisualAge C++ for AIX. Objects compiled
                     with this object model will use less memory
                     and have better performance for deep
                     inheritance with virtual bases.

                Default: -qobjmodel=classic

         -qoldpassbyvalue | -qnooldpassbyvalue
                (C++) Specifies how classes containing const or
                reference members are passed in function arguments.
                All classes in the compilation unit are affected by
                this option. When -qoldpassbyvalue is specified,
                the compiler mimics the IBM C/C++ compilers v3.6
                compiler in that when a class containing a const or
                reference member is passed as a function argument,
                it is not passed by value. All such classes in the
                compilation unit are affected.

                Default: -qnooldpassbyvalue

         -qupconv | -qnoupconv
                (C) Preserves the unsigned specification when
                performing integral promotions.

                Default:
                     o -qupconv when -qlanglvl={extended|classic}
                     o -qnoupconv otherwise

         -qvecnvol | -qnovecnvol
                Specifies whether to use volatile or non-volatile
                vector registers. Volatile vector registers are
                registers whose value is not preserved across
                function calls or in the context of save, jump or
                switch system library functions. If -qnoenablevmx
                is enabled, this option is ignored.

                Default: -qnovecnvol

  Compiler customization options
         -qasm_as=<asm_path> [<flags_list>]
                Specifies the path and flags used to invoke the
                assembler in order to handle assembler code in an
                asm statement. <asm_path> is the full path to the
                assembler to be used, and <flags_list> is a series
                of one or more flags (and their arguments),
                separated by spaces. Single quotes (or double
                quotes) are required around the string of arguments
                if any spaces exist.

         -B[<prefix>]
                Determines substitute path names for programs used
                during compilation, such as the compiler,
                assembler, linkage editor, and preprocessor, where
                <prefix> can be any program name recognized by the
                -t compiler option. The optional <prefix> defines
                part of a path name to the new programs. The -t
                parameter, <program>, specifies the program to
                which the <prefix> is to be appended. When
                specifying <prefix>, there must be a slash (/)
                after the folder name.

         -qc_stdinc=<paths_list>
                (C) Changes the standard search location for the XL
                C headers. <paths_list> is a colon-separated list
                of paths to search.

         -qcpp_stdinc=<paths_list>
                (C++) Specifies the standard search directories for
                the XL C++ headers, where <paths_list> is a colon-
                separated list of paths.

         -F[<config_file>][:<stanza>]
                Names an alternative configuration file (.cfg) for
                the compiler. <config_file> is the name of a
                compiler configuration file. <stanza> is the name
                of the command used to invoke the compiler. This
                directs the compiler to use the entries under
                <stanza> in the <config_file> to set up the
                compiler environment. At least one of the arguments
                must be supplied.

         -qpath=<program>:<path>
                Constructs alternate program names for compiler
                components. The program and directory path
                specified are used in place of the regular program.
                <program> can be one of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = C++filt utility
                I = High-level optimizer - compile step
                L = High-level optimizer - link step
                l = Linker
                m = Linkage helper (C++ only)
                p = Preprocessor

         -qspill=<size>
                Specifies the size of the register allocation spill
                area in bytes.

                Default: -qspill=512

         -t<programs_list>
                Applies the prefix from the -B option to the
                specified programs in <programs_list>.
                <programs_list> is a chain (i.e: -tbcI) of one or
                more of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = C++filt utility
                I = High-level optimizer  - compile step
                L = High-level optimizer - link step
                l = Linker
                m = Linkage helper (C++ only)
                p = Preprocessor


         -W<program>,<options_list>
                Gives the specified option(s) to the compiler
                program, <program>. <options_list> is a comma-
                separated list of one or more options. <program>
                can be one of the following:

                a = Assembler
                b = Low-level optimizer
                c = Compiler front end
                C = C++ compiler front end
                d = Disassembler
                E = CreateExportList utility
                f = c++filt utility
                I = High-level optimizer  - compile step
                L = High-level optimizer - link step
                l = Linker
                m = linkage helper (C++ only)
                p = Preprocessor


  SEE ALSO
         gxlc(1), gxlc++(1), showpdf(1), mergepdf(1), resetpdf(1),
         cleanpdf(1).

         For more information, refer to the following Web sites:
         http://www.ibm.com/software/awdtools/xlcpp/library/
         http://www.ibm.com/software/awdtools/xlcpp/support/


  COPYRIGHT
         Licensed Materials - Property of IBM.

         IBM XL C/C++ for AIX, V10.1

         5724-U81

         Copyright IBM Corp. 1991, 2008. All Rights Reserved.

         AIX, IBM, POWER3, POWER4, POWER5, POWER5+, POWER6,
         PowerPC, PowerPC 604, and SAA are trademarks or registered
         trademarks of International Business Machines Corporation
         in the United States, other countries, or both.

         US Government Users Restricted Rights - Use, duplication
         or disclosure restricted by GSA ADP Schedule Contract with
         IBM Corp.













rm /tmpnwprd/xlcW0jSQCqa
rm /tmpnwprd/xlcW1jSQCqb
rm /tmpnwprd/xlcW2jSQCqc
configure:2919: $? = 249
configure:2942: checking for C compiler default output file name
configure:2964: /usr/vacpp/bin/xlC_r  -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c  >&5
configure:2968: $? = 0
configure:3006: result: a.out
configure:3023: checking whether the C compiler works
configure:3033: ./a.out
configure:3037: $? = 0
configure:3054: result: yes
configure:3061: checking whether we are cross compiling
configure:3063: result: no
configure:3066: checking for suffix of executables
configure:3073: /usr/vacpp/bin/xlC_r -o conftest  -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c  >&5
configure:3077: $? = 0
configure:3101: result: 
configure:3107: checking for suffix of object files
configure:3133: /usr/vacpp/bin/xlC_r -c  -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:3137: $? = 0
configure:3160: result: o
configure:3164: checking whether we are using the GNU C compiler
configure:3193: /usr/vacpp/bin/xlC_r -c  -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
"conftest.c", line 15.14: 1506-275 (S) Unexpected text me encountered.
"conftest.c", line 15.8: 1506-045 (S) Undeclared identifier choke.
configure:3200: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "libpng"
| #define PACKAGE_TARNAME "libpng"
| #define PACKAGE_VERSION "1.2.34"
| #define PACKAGE_STRING "libpng 1.2.34"
| #define PACKAGE_BUGREPORT "png-mng-implement@lists.sourceforge.net"
| #define PACKAGE "libpng"
| #define VERSION "1.2.34"
| /* end confdefs.h.  */
| 
| int
| main ()
| {
| #ifndef __GNUC__
|        choke me
| #endif
| 
|   ;
|   return 0;
| }
configure:3217: result: no
configure:3226: checking whether /usr/vacpp/bin/xlC_r accepts -g
configure:3256: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:3263: $? = 0
configure:3364: result: yes
configure:3381: checking for /usr/vacpp/bin/xlC_r option to accept ISO C89
configure:3455: /usr/vacpp/bin/xlC_r  -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:3462: $? = 0
configure:3485: result: none needed
configure:3514: checking for style of include used by make
configure:3542: result: GNU
configure:3567: checking dependency style of /usr/vacpp/bin/xlC_r
configure:3658: result: aix
configure:3679: checking build system type
configure:3697: result: powerpc-ibm-aix5.3.0.0
configure:3719: checking host system type
configure:3734: result: powerpc-ibm-aix5.3.0.0
configure:3756: checking for a sed that does not truncate output
configure:3822: result: /usr/bin/sed
configure:3840: checking for grep that handles long lines and -e
configure:3900: result: /usr/bin/grep
configure:3905: checking for egrep
configure:3969: result: /usr/bin/grep -E
configure:3974: checking for fgrep
configure:4038: result: /usr/bin/grep -F
configure:4106: checking for non-GNU ld
configure:4140: result: /usr/bin/ld
configure:4149: checking if the linker (/usr/bin/ld) is GNU ld
configure:4164: result: no
configure:4181: checking how to run the C preprocessor
configure:4299: result: /usr/bin/cpp
configure:4328: /usr/bin/cpp -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c
configure:4335: $? = 0
configure:4366: /usr/bin/cpp -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c
"conftest.c", line 10.10: 1506-296 (S) #include file <ac_nonexistent.h> not found.
configure:4373: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "libpng"
| #define PACKAGE_TARNAME "libpng"
| #define PACKAGE_VERSION "1.2.34"
| #define PACKAGE_STRING "libpng 1.2.34"
| #define PACKAGE_BUGREPORT "png-mng-implement@lists.sourceforge.net"
| #define PACKAGE "libpng"
| #define VERSION "1.2.34"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4453: checking for sed
configure:4480: result: /usr/bin/sed
configure:4835: checking for a BSD-compatible install
configure:4903: result: ./install-sh -c
configure:4914: checking whether ln -s works
configure:4918: result: yes
configure:4925: checking whether make sets $(MAKE)
configure:4947: result: yes
configure:4981: checking for BSD- or MS-compatible name lister (nm)
configure:5030: result: /usr/bin/nm -B
configure:5152: checking the name lister (/usr/bin/nm -B) interface
configure:5159: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:5162: /usr/bin/nm -B "conftest.o"
configure:5165: output
         0 d some_variable
         8 D some_variable
configure:5172: result: BSD nm
configure:5176: checking the maximum length of command line arguments
configure:5296: result: 36864
configure:5313: checking whether the shell understands some XSI constructs
configure:5323: result: yes
configure:5327: checking whether the shell understands "+="
configure:5333: result: no
configure:5368: checking for /usr/bin/ld option to reload object files
configure:5375: result: -r
configure:5402: checking how to recognize dependent libraries
configure:5592: result: pass_all
configure:5652: checking for ar
configure:5668: found /usr/bin/ar
configure:5679: result: ar
configure:5761: checking for strip
configure:5777: found /usr/bin/strip
configure:5788: result: strip
configure:5864: checking for ranlib
configure:5880: found /usr/bin/ranlib
configure:5891: result: ranlib
configure:5985: checking command to parse /usr/bin/nm -B output from /usr/vacpp/bin/xlC_r object
configure:6103: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:6106: $? = 0
configure:6110: /usr/bin/nm -B conftest.o \| sed -n -e 's/^.*[	 ]\([BCDT][BCDT]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' \> conftest.nm
configure:6113: $? = 0
configure:6167: /usr/vacpp/bin/xlC_r -o conftest -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c conftstm.o >&5
configure:6170: $? = 0
configure:6208: result: ok
configure:6889: checking for ANSI C header files
configure:6919: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:6926: $? = 0
configure:7025: /usr/vacpp/bin/xlC_r -o conftest -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c  >&5
configure:7029: $? = 0
configure:7035: ./conftest
configure:7039: $? = 0
configure:7057: result: yes
configure:7081: checking for sys/types.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7081: checking for sys/stat.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7081: checking for stdlib.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7081: checking for string.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7081: checking for memory.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7081: checking for strings.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7081: checking for inttypes.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7081: checking for stdint.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7081: checking for unistd.h
configure:7102: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7109: $? = 0
configure:7126: result: yes
configure:7143: checking for dlfcn.h
configure:7164: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:7171: $? = 0
configure:7188: result: yes
configure:7371: checking for objdir
configure:7386: result: .libs
configure:7733: checking for /usr/vacpp/bin/xlC_r option to produce PIC
configure:7990: result:  -DPIC
configure:8002: checking if /usr/vacpp/bin/xlC_r PIC flag  -DPIC works
configure:8020: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include   -DPIC -DPIC conftest.c >&5
configure:8024: $? = 0
configure:8037: result: yes
configure:8061: checking if /usr/vacpp/bin/xlC_r static flag -bnso -bI:/lib/syscalls.exp works
configure:8089: result: no
configure:8104: checking if /usr/vacpp/bin/xlC_r supports -c -o file.o
configure:8125: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -o out/conftest2.o conftest.c >&5
configure:8129: $? = 0
configure:8151: result: yes
configure:8159: checking if /usr/vacpp/bin/xlC_r supports -c -o file.o
configure:8206: result: yes
configure:8239: checking whether the /usr/vacpp/bin/xlC_r linker (/usr/bin/ld) supports shared libraries
configure:8769: /usr/vacpp/bin/xlC_r -o conftest -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c  >&5
configure:8776: $? = 0
configure:9305: result: yes
configure:9544: checking dynamic linker characteristics
configure:10227: result: aix5.3.0.0 ld.so
configure:10329: checking how to hardcode library paths into programs
configure:10354: result: immediate
configure:11195: checking whether stripping libraries is possible
configure:11217: result: no
configure:11235: checking if libtool supports shared libraries
configure:11237: result: yes
configure:11240: checking whether to build shared libraries
configure:11261: result: no
configure:11264: checking whether to build static libraries
configure:11268: result: yes
configure:11305: checking for ANSI C header files
configure:11473: result: yes
configure:11502: checking malloc.h usability
configure:11519: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:11526: $? = 0
configure:11540: result: yes
configure:11544: checking malloc.h presence
configure:11559: /usr/bin/cpp -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c
configure:11566: $? = 0
configure:11580: result: yes
configure:11613: checking for malloc.h
configure:11622: result: yes
configure:11491: checking for stdlib.h
configure:11498: result: yes
configure:11491: checking for string.h
configure:11498: result: yes
configure:11491: checking for strings.h
configure:11498: result: yes
configure:11638: checking for an ANSI C-conforming const
configure:11713: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
"conftest.c", line 35.17: 1506-359 (I) Automatic variable cs contains a const member and is not initialized.  It will be initialized to zero.
configure:11720: $? = 0
configure:11735: result: yes
configure:11745: checking for size_t
configure:11773: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:11780: $? = 0
configure:11807: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
"conftest.c", line 63.21: 1506-046 (S) Syntax error.
configure:11814: $? = 1
configure: failed program was:
| /* confdefs.h.  */
| #define PACKAGE_NAME "libpng"
| #define PACKAGE_TARNAME "libpng"
| #define PACKAGE_VERSION "1.2.34"
| #define PACKAGE_STRING "libpng 1.2.34"
| #define PACKAGE_BUGREPORT "png-mng-implement@lists.sourceforge.net"
| #define PACKAGE "libpng"
| #define VERSION "1.2.34"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_MALLOC_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_STRINGS_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((size_t)))
| 	  return 0;
|   ;
|   return 0;
| }
configure:11837: result: yes
configure:11849: checking whether struct tm is in sys/time.h or time.h
configure:11879: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:11886: $? = 0
configure:11901: result: time.h
configure:11913: checking for working strtod
configure:11964: /usr/vacpp/bin/xlC_r -o conftest -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c  >&5
configure:11968: $? = 0
configure:11974: ./conftest
configure:11978: $? = 0
configure:11995: result: yes
configure:12171: checking for memset
configure:12227: /usr/vacpp/bin/xlC_r -o conftest -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c  >&5
configure:12234: $? = 0
configure:12256: result: yes
configure:12275: checking for pow
configure:12331: /usr/vacpp/bin/xlC_r -o conftest -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c  >&5
configure:12338: $? = 0
configure:12360: result: yes
configure:12452: checking for zlibVersion in -lz
configure:12487: /usr/vacpp/bin/xlC_r -o conftest -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  -L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3 conftest.c -lz   >&5
configure:12494: $? = 0
configure:12515: result: yes
configure:12532: checking if assembler code in pnggccrd.c can be compiled without PNG_NO_MMX_CODE
configure:12555: /usr/vacpp/bin/xlC_r -c -g -O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include  conftest.c >&5
configure:12562: $? = 0
configure:12567: result: yes
configure:12584: checking if libraries can be versioned
configure:12593: result: no
configure:12595: WARNING: *** You have not enabled versioned symbols.
configure:12637: pkgconfig directory is ${libdir}/pkgconfig
configure:12811: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by libpng config.status 1.2.34, which was
generated by GNU Autoconf 2.62.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on c2n6.ncep.noaa.gov

config.status:1003: creating Makefile
config.status:1003: creating libpng.pc
config.status:1003: creating libpng-config
config.status:1003: creating config.h
config.status:1277: executing depfiles commands
config.status:1277: executing libtool commands

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=powerpc-ibm-aix5.3.0.0
ac_cv_c_compiler_gnu=no
ac_cv_c_const=yes
ac_cv_env_CC_set=set
ac_cv_env_CC_value=/usr/vacpp/bin/xlC_r
ac_cv_env_CFLAGS_set=''
ac_cv_env_CFLAGS_value=''
ac_cv_env_CPPFLAGS_set=set
ac_cv_env_CPPFLAGS_value='-O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include '
ac_cv_env_CPP_set=set
ac_cv_env_CPP_value=/usr/bin/cpp
ac_cv_env_LDFLAGS_set=set
ac_cv_env_LDFLAGS_value=-L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3
ac_cv_env_LIBS_set=''
ac_cv_env_LIBS_value=''
ac_cv_env_build_alias_set=''
ac_cv_env_build_alias_value=''
ac_cv_env_host_alias_set=''
ac_cv_env_host_alias_value=''
ac_cv_env_target_alias_set=''
ac_cv_env_target_alias_value=''
ac_cv_func_memset=yes
ac_cv_func_pow=yes
ac_cv_func_strtod=yes
ac_cv_header_dlfcn_h=yes
ac_cv_header_inttypes_h=yes
ac_cv_header_malloc_h=yes
ac_cv_header_memory_h=yes
ac_cv_header_stdc=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_unistd_h=yes
ac_cv_host=powerpc-ibm-aix5.3.0.0
ac_cv_lib_z_zlibVersion=yes
ac_cv_objext=o
ac_cv_path_EGREP='/usr/bin/grep -E'
ac_cv_path_FGREP='/usr/bin/grep -F'
ac_cv_path_GREP=/usr/bin/grep
ac_cv_path_SED=/usr/bin/sed
ac_cv_prog_AWK=gawk
ac_cv_prog_CPP=/usr/bin/cpp
ac_cv_prog_ac_ct_AR=ar
ac_cv_prog_ac_ct_CC=/usr/vacpp/bin/xlC_r
ac_cv_prog_ac_ct_RANLIB=ranlib
ac_cv_prog_ac_ct_SED=/usr/bin/sed
ac_cv_prog_ac_ct_STRIP=strip
ac_cv_prog_cc_c89=''
ac_cv_prog_cc_g=yes
ac_cv_prog_make_make_set=yes
ac_cv_struct_tm=time.h
ac_cv_type_size_t=yes
am_cv_CC_dependencies_compiler_type=aix
lt_cv_deplibs_check_method=pass_all
lt_cv_file_magic_cmd='$MAGIC_CMD'
lt_cv_file_magic_test_file=''
lt_cv_ld_reload_flag=-r
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD=/usr/bin/ld
lt_cv_path_NM='/usr/bin/nm -B'
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_static_works=no
lt_cv_prog_gnu_ld=no
lt_cv_sys_global_symbol_pipe='sed -n -e '\''s/^.*[	 ]\([BCDT][BCDT]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p'\'
lt_cv_sys_global_symbol_to_c_name_address='sed -n -e '\''s/^: \([^ ]*\) $/  {\"\1\", (void *) 0},/p'\'' -e '\''s/^[BCDT]* \([^ ]*\) \([^ ]*\)$/  {"\2", (void *) \&\2},/p'\'
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='sed -n -e '\''s/^: \([^ ]*\) $/  {\"\1\", (void *) 0},/p'\'' -e '\''s/^[BCDT]* \([^ ]*\) \(lib[^ ]*\)$/  {"\2", (void *) \&\2},/p'\'' -e '\''s/^[BCDT]* \([^ ]*\) \([^ ]*\)$/  {"lib\2", (void *) \&\2},/p'\'
lt_cv_sys_global_symbol_to_cdecl='sed -n -e '\''s/^T .* \(.*\)$/extern int \1();/p'\'' -e '\''s/^[BCDT]* .* \(.*\)$/extern char \1;/p'\'
lt_cv_sys_max_cmd_len=36864

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} /nwprod/util/sorc/wgrib2.cd/grib2/libpng-1.2.34/missing --run aclocal-1.10'
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='${SHELL} /nwprod/util/sorc/wgrib2.cd/grib2/libpng-1.2.34/missing --run tar'
AR='ar'
AS='as'
AUTOCONF='${SHELL} /nwprod/util/sorc/wgrib2.cd/grib2/libpng-1.2.34/missing --run autoconf'
AUTOHEADER='${SHELL} /nwprod/util/sorc/wgrib2.cd/grib2/libpng-1.2.34/missing --run autoheader'
AUTOMAKE='${SHELL} /nwprod/util/sorc/wgrib2.cd/grib2/libpng-1.2.34/missing --run automake-1.10'
AWK='gawk'
CC='/usr/vacpp/bin/xlC_r'
CCDEPMODE='depmode=aix'
CFLAGS='-g'
CPP='/usr/bin/cpp'
CPPFLAGS='-O2 -I../g2clib-1.1.8 -I../jasper-1.900.1/src/libjasper/include -I../libpng-1.2.34 -I../zlib-1.2.3 -I/usr/include '
CYGPATH_W='echo'
DEFS='-DHAVE_CONFIG_H'
DEPDIR='.deps'
DLLTOOL='dlltool'
DSYMUTIL=''
DUMPBIN=''
ECHO_C='\c'
ECHO_N=''
ECHO_T=''
EGREP='/usr/bin/grep -E'
EXEEXT=''
FGREP='/usr/bin/grep -F'
GREP='/usr/bin/grep'
HAVE_LD_VERSION_SCRIPT_FALSE=''
HAVE_LD_VERSION_SCRIPT_TRUE='#'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LD='/usr/bin/ld'
LDFLAGS='-L/nwprod/util/sorc/wgrib2.cd/grib2/zlib-1.2.3'
LIBOBJS=''
LIBPNG_DEFINES='-DPNG_CONFIGURE_LIBPNG '
LIBPNG_NO_MMX=''
LIBS='-lz '
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
LIPO=''
LN_S='ln -s'
LTLIBOBJS=''
MAINT='#'
MAINTAINER_MODE_FALSE=''
MAINTAINER_MODE_TRUE='#'
MAKEINFO='${SHELL} /nwprod/util/sorc/wgrib2.cd/grib2/libpng-1.2.34/missing --run makeinfo'
MKDIR_P='./install-sh -c -d'
NM='/usr/bin/nm -B'
NMEDIT=''
OBJDUMP='objdump'
OBJEXT='o'
PACKAGE='libpng'
PACKAGE_BUGREPORT='png-mng-implement@lists.sourceforge.net'
PACKAGE_NAME='libpng'
PACKAGE_STRING='libpng 1.2.34'
PACKAGE_TARNAME='libpng'
PACKAGE_VERSION='1.2.34'
PATH_SEPARATOR=':'
PNGLIB_MAJOR='1'
PNGLIB_MINOR='2'
PNGLIB_RELEASE='34'
PNGLIB_VERSION='1.2.34'
POW_LIB=''
RANLIB='ranlib'
SED='/usr/bin/sed'
SET_MAKE=''
SHELL='/bin/sh'
STRIP='strip'
SYMBOL_PREFIX=''
VERSION='1.2.34'
ac_ct_CC='/usr/vacpp/bin/xlC_r'
ac_ct_DUMPBIN=''
am__fastdepCC_FALSE=''
am__fastdepCC_TRUE='#'
am__include='include'
am__isrc=''
am__leading_dot='.'
am__quote=''
am__tar='${AMTAR} chof - "$$tardir"'
am__untar='${AMTAR} xf -'
binconfigs='${binconfigs}'
bindir='${exec_prefix}/bin'
build='powerpc-ibm-aix5.3.0.0'
build_alias=''
build_cpu='powerpc'
build_os='aix5.3.0.0'
build_vendor='ibm'
compatlib='libpng.la'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host='powerpc-ibm-aix5.3.0.0'
host_alias=''
host_cpu='powerpc'
host_os='aix5.3.0.0'
host_vendor='ibm'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='$(SHELL) /nwprod/util/sorc/wgrib2.cd/grib2/libpng-1.2.34/install-sh'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
lt_ECHO='print -r'
mandir='${datarootdir}/man'
mkdir_p='$(top_builddir)/./install-sh -c -d'
oldincludedir='/usr/include'
pdfdir='${docdir}'
pkgconfigdir='${libdir}/pkgconfig'
prefix='/usr/local'
program_transform_name='s,x,x,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

#define PACKAGE_NAME "libpng"
#define PACKAGE_TARNAME "libpng"
#define PACKAGE_VERSION "1.2.34"
#define PACKAGE_STRING "libpng 1.2.34"
#define PACKAGE_BUGREPORT "png-mng-implement@lists.sourceforge.net"
#define PACKAGE "libpng"
#define VERSION "1.2.34"
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_MEMORY_H 1
#define HAVE_STRINGS_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_UNISTD_H 1
#define HAVE_DLFCN_H 1
#define LT_OBJDIR ".libs/"
#define STDC_HEADERS 1
#define HAVE_MALLOC_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_STRINGS_H 1
#define HAVE_MEMSET 1
#define HAVE_POW 1
#define HAVE_LIBZ 1

configure: exit 0
