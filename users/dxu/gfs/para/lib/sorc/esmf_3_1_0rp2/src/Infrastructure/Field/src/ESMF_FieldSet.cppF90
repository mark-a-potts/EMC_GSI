! $Id: ESMF_FieldSet.cppF90,v 1.2.2.35 2009/01/28 20:04:53 theurich Exp $
!
! Earth System Modeling Framework
! Copyright 2002-2009, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
^define ESMF_FILENAME "ESMF_FieldSet.F90"
!==============================================================================
!
!     ESMF FieldSet module
module ESMF_FieldSetMod
!
!==============================================================================
!
! This file contains the FieldSet() methods.
!
!------------------------------------------------------------------------------
! INCLUDES
! < ignore blank lines below.  they are created by the files which
!   define various macros. >
^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"

!------------------------------------------------------------------------------
! !USES:
  use ESMF_UtilTypesMod
  use ESMF_BaseMod
  use ESMF_LogErrMod
  use ESMF_LocalArrayMod
  use ESMF_DistGridMod
  use ESMF_StaggerLocMod
  use ESMF_GridMod
  use ESMF_ArrayMod
  use ESMF_ArrayCreateMod
  use ESMF_InitMacrosMod

  use ESMF_FieldMod

  implicit none

!------------------------------------------------------------------------------
! !PRIVATE TYPES:
  private

!------------------------------------------------------------------------------
! !PUBLIC MEMBER FUNCTIONS:

  public ESMF_FieldSet
  public ESMF_FieldSetCommit
 
!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
  character(*), parameter, private :: version = &
    '$Id: ESMF_FieldSet.cppF90,v 1.2.2.35 2009/01/28 20:04:53 theurich Exp $'

!==============================================================================
! 
! INTERFACE BLOCKS
!
!==============================================================================


!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_FieldSet -- Overloaded FieldSet() interface

! !INTERFACE:
  interface ESMF_FieldSet

! !PRIVATE MEMBER FUNCTIONS:
!
    !module procedure ESMF_FieldSetArray
    !module procedure ESMF_FieldSetLocalArray !TODO: FIELDINTEGRATION
    !module procedure ESMF_FieldSetGrid
    TypeKindRankInterfaceMacro(FieldSetDataPtr)

! !DESCRIPTION: 
! This interface provides a single entry point for the various 
!  types of {\tt ESMF\_FieldSet} subroutines.   
end interface
!EOPI 
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
!BOPI 
! !IROUTINE: ESMF_FieldSetCommit - finishes a Field started with FieldCreateEmpty
!
! !INTERFACE:
  interface ESMF_FieldSetCommit

! !PRIVATE MEMBER FUNCTIONS:
!
    TypeKindRankInterfaceMacro(FieldSetCommit)
    TypeKindRankInterfaceMacro(FieldSetCommitPtr)

! !DESCRIPTION:
!   This interface finishes a {\tt ESMF\_Field} started with FieldCreateEmpty
!   These methods all take {\tt ESMF\_Grid} and Fortran data pointer as input to
!   fill in the {\tt ESMF\_Field} internals. 
  end interface
!EOPI
!------------------------------------------------------------------------------


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldSetArray"
!BOPI
! !IROUTINE: ESMF_FieldSet - Set data Array associated with the Field

! !INTERFACE:
  ! Private name; call using ESMF_FieldSet()
  subroutine ESMF_FieldSetArray(field, array, rc)
!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout) :: field      
    type(ESMF_Array), intent(in) :: array
    integer, intent(out), optional :: rc           
!
! !DESCRIPTION:
! Set data in {\tt ESMF\_Array} form.
!
! The arguments are:
! \begin{description}
! \item [field]
!       An {\tt ESMF\_Field} object.
! \item [{[array]}]
!       {\tt ESMF\_Array} containing data.
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc
    !character(len=ESMF_MAXSTR) :: str
    type(ESMF_FieldType), pointer :: ftypep

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)
 
    ftypep => field%ftypep

    if( (ftypep%datastatus .eq. ESMF_STATUS_READY ) .and. &
        ftypep%array_internal) then
        call ESMF_ArrayDestroy(ftypep%array, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return
    endif
    ftypep%array = array
    ftypep%array_internal = .false.
    ftypep%datastatus = ESMF_STATUS_READY
 
    ! Set return values.
    if (present(rc)) rc = ESMF_SUCCESS
    
  end subroutine ESMF_FieldSetArray
!------------------------------------------------------------------------------


! TODO:FIELDINTEGRATION Restore the FieldSetLocalArray method 
#if 0
!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldSetLocalArray"
!BOPI
! !IROUTINE: ESMF_FieldSet - Set data Array associated with the Field

! !INTERFACE:
  ! Private name; call using ESMF_FieldSet()
  subroutine ESMF_FieldSetLocalArray(field, localarray, rc)

!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout) :: field      
    type(ESMF_LocalArray), intent(in) :: localarray
    integer, intent(out), optional :: rc           

!
! !DESCRIPTION:
! Set data in {\tt ESMF\_LocalArray} form.
!
! The arguments are:
! \begin{description}
! \item [field]
!       An {\tt ESMF\_Field} object.
! \item [{[localarray]}]
!       {\tt ESMF\_LocalArray} containing data.
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc 
    !character(len=ESMF_MAXSTR) :: str
    type(ESMF_FieldType), pointer :: ftypep
    type(ESMF_Array) :: array

    ! Initialize return code
    localrc = ESMF_RC_NOT_IMPL   
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)
 
    ftypep => field%ftypep

    ! TODO: do we allow this?  if so, do we just destroy the old array?
    !if (ftypep%arraystatus .eq. ESMF_STATUS_READY) then
    !   if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, &
    !                          "Data already associated with Field", &
    !                           ESMF_CONTEXT, rc)) return
    !endif

    call ESMF_FieldGetArray(field, array, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return

    call ESMF_ArraySet(array, localarray, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return

    ftypep%arraystatus = ESMF_STATUS_READY
   
    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldSetLocalArray
!------------------------------------------------------------------------------
#endif


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldSetGrid"
!BOPI
! !IROUTINE: ESMF_FieldSet - Set Grid associated with the Field

! !INTERFACE:
  ! Private name; call using ESMF_FieldSet()
  subroutine ESMF_FieldSetGrid(field, grid, rc)
!
! !ARGUMENTS:
    type(ESMF_Field), intent(inout) :: field  
    type(ESMF_Grid), intent(inout) :: grid      
    integer, intent(out), optional :: rc    
!
! !DESCRIPTION:
! Used only with the version of {\tt ESMF\_FieldCreate} which creates an empty 
! {\tt ESMF\_Field} and allows the {\tt ESMF\_Grid} to be specified later.  
! Otherwise it is an error to try to change the {\tt ESMF\_Grid} 
! associated with an {\tt ESMF\_Field}.
!
! The arguments are:
! \begin{description}
! \item [field]
!       An {\tt ESMF\_Field} object.
! \item [grid]
!       {\tt ESMF\_Grid} to be added.
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype
    logical :: had_grid
    integer :: localrc

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    ftype => field%ftypep

    ! decide if we are regridding or just adding a grid to a partially
    ! created field.
    had_grid = .FALSE.
    if (ftype%gridstatus .eq. ESMF_STATUS_READY) had_grid = .TRUE.

    if (.not. had_grid) then
       ! if no grid, just add it
       ftype%grid = grid
       ftype%gridstatus = ESMF_STATUS_READY
    else
       ! this could be considered a request to regrid the data
       call ESMF_LogWrite("Replacing existing grid not yet supported", &
                           ESMF_LOG_WARNING, &
                           ESMF_CONTEXT)
       call ESMF_LogWrite("Will be considered a regrid request", &
                           ESMF_LOG_WARNING, &
                           ESMF_CONTEXT)
    endif

    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldSetGrid
!------------------------------------------------------------------------------


#define FieldSetDataPtrDoc() \
!---------------------------------------------------------------------------- @\
!BOPI @\
! !IROUTINE: ESMF_FieldSet - Add data to a field directly by Fortran pointer @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldSet() @\
! subroutine ESMF_FieldSetDataPtr<rank><type><kind>(field, & @\
!   dataptr, copyflag, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field), intent(inout) :: field @\
!   <type> (ESMF_KIND_<kind>), dimension(<rank>), pointer :: dataptr @\
!   integer, intent(in), optional :: staggerloc  @\
!   type(ESMF_CopyFlag), intent(in), optional :: copyflag @\
!   integer, intent(out), optional :: rc   @\
! @\
! !DESCRIPTION: @\
! Set data in an {\tt ESMF\_Field} directly from a Fortran pointer. @\
! Valid type/kind/rank combinations supported by the @\
! framework are: ranks 1 to 7, type real of kind *4 or *8, @\
! and type integer of kind *1, *2, *4, or *8. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item[field] @\
!  The {\tt ESMF\_Field} to query. @\
! \item[dataptr] @\
!  An associated Fortran pointer of the proper Type, Kind, and Rank as @\
!  the data in the Field.  When this call returns successfully, the pointer @\
!  will now point to the data in the Field.  This is either a reference or @\
!  a copy, depending on the setting of the following argument.  @\
! \item[{[copyflag]}] @\
!  Defaults to {\tt ESMF\_DATA\_REF}.  If set to {\tt ESMF\_DATA\_COPY}, @\
!  a separate copy of the data will be allocated and the pointer will point @\
!  at the copy.  If a new copy of the data is made, the caller is @\
!  responsible for deallocating the space. @\
! \item[{[staggerloc]}] @\
!  Defaults to 0.  If specified, the staggerloc specifies the relative position of @\
!  data array and grid. @\
! \item[{[rc]}] @\
!   Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOPI @\
!---------------------------------------------------------------------------- @\

#define FieldSetDataPtrMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldSetDataPtr" @\
  subroutine ESMF_FieldSetDataPtr##mrank##D##mtypekind(field, & @\
    dataptr, copyflag, staggerloc, rc) @\
@\
    type(ESMF_Field), intent(inout) :: field @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), pointer :: dataptr @\
    type(ESMF_CopyFlag), intent(in), optional :: copyflag @\
    integer, intent(in), optional :: staggerloc  @\
    integer, intent(out), optional :: rc   @\
@\
    ! Local variables @\
    type(ESMF_Array) :: array, newarray  ! array object @\
    integer :: localrc                   ! local error status @\
    logical :: rcpresent                 ! did user specify rc? @\
@\
    type(ESMF_DistGrid) :: distgrid    ! distgrid in field%grid @\
    integer, dimension(mrank) :: comp_edge_u_width @\
@\
    ! Initialize return code assume routine not implemented @\
    localrc = ESMF_RC_NOT_IMPL @\
    rcpresent = .FALSE. @\
@\
    if (present(rc)) then @\
      rcpresent = .TRUE. @\
      rc = ESMF_RC_NOT_IMPL @\
    endif @\
@\
    ! check variables @\
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc) @\
@\
    ! Test to see if pointer already associated, and fail if not so. @\
    if (.not.associated(dataptr)) then @\
      if (ESMF_LogMsgFoundError(ESMF_RC_OBJ_BAD, & @\
                              "Data Ptr must already be associated", & @\
                              ESMF_CONTEXT, rc)) return @\
    endif @\
@\
    ! do sanity check on existing internal data array @\
    ! destroy existing internal data array if it was copied @\
    if ( (field%ftypep%datastatus .eq. ESMF_STATUS_READY) ) then  @\
        if (field%ftypep%array_internal) then @\
            call ESMF_ArrayDestroy(field%ftypep%array, rc=localrc) @\
            if (ESMF_LogMsgFoundError(localrc, & @\
              ESMF_ERR_PASSTHRU, & @\
              ESMF_CONTEXT, rc)) return @\
        endif @\
    end if @\
@\
    ! fetch the distgrid from field%grid @\
    call ESMF_GridGet(field%ftypep%grid, distgrid=distgrid, rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
      ESMF_ERR_PASSTHRU, & @\
      ESMF_CONTEXT, rc)) return @\
@\
    ! create a new array to be used to replace existing field%array @\
    comp_edge_u_width = -1 @\
    array = ESMF_ArrayCreate(dataptr, distgrid=distgrid, & @\
      staggerloc=staggerloc, computationalEdgeUWidth=comp_edge_u_width, & @\
      rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
                              ESMF_ERR_PASSTHRU, & @\
                              ESMF_CONTEXT, rc)) return @\
@\
    ! set array as data in field. @\
    ! default copyflag value is ESMF_DATA_REF @\
    ! in the case setdataptr creates an array first to be copied @\
    ! that array is destroyed after being copied. @\
    field%ftypep%array_internal = .true. @\
    if(.not. present(copyflag)) then @\
        field%ftypep%array = array @\
    else @\
        if(copyflag == ESMF_DATA_REF) then @\
            field%ftypep%array = array @\
        else @\
            newarray = ESMF_ArrayCreate(array, rc=localrc) @\
            if (ESMF_LogMsgFoundError(localrc, & @\
                                    ESMF_ERR_PASSTHRU, & @\
                                    ESMF_CONTEXT, rc)) return @\
            field%ftypep%array = newarray @\
            call ESMF_ArrayDestroy(array, rc=localrc) @\
            if (ESMF_LogMsgFoundError(localrc, & @\
                                    ESMF_ERR_PASSTHRU, & @\
                                    ESMF_CONTEXT, rc)) return @\
        endif @\
    endif @\
@\
    field%ftypep%datastatus = ESMF_STATUS_READY @\
    if (rcpresent) rc = ESMF_SUCCESS @\
@\
  end subroutine ESMF_FieldSetDataPtr##mrank##D##mtypekind  @\
!---------------------------------------------------------------------------- @\

TypeKindRankDeclarationMacro(FieldSetDataPtr)


#define FieldSetCommitDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! !IROUTINE: ESMF_FieldSetCommit - Finishes creating Field from Fortran array started with FieldCreateEmpty @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldSetCommit() @\
! subroutine ESMF_FieldSetCommit<rank><type><kind>(field, grid, & @\
!   farray, indexflag, copyflag, staggerloc, gridToFieldMap, ungriddedLBound, & @\
!   ungriddedUBound, maxHaloLWidth, maxHaloUWidth, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field),      intent(inout)        :: field @\
!   type(ESMF_Grid),       intent(in)           :: grid @\
!   <type> (ESMF_KIND_<kind>), dimension(<rank>), target  :: farray @\
!   type(ESMF_IndexFlag),  intent(in)           :: indexflag @\
!   type(ESMF_CopyFlag),   intent(in), optional :: copyflag @\
!   type(ESMF_STAGGERLOC), intent(in), optional :: staggerloc @\
!   integer,               intent(in), optional :: gridToFieldMap(:) @\
!   integer,               intent(in), optional :: ungriddedLBound(:) @\
!   integer,               intent(in), optional :: ungriddedUBound(:) @\
!   integer,               intent(in), optional :: maxHaloLWidth(:) @\
!   integer,               intent(in), optional :: maxHaloUWidth(:) @\
!   integer,               intent(inout), optional :: rc @\
! @\
! !DESCRIPTION: @\
! This call completes an {\tt ESMF\_Field} allocated with the @\
! {\tt ESMF\_FieldCreateEmpty()} call. For an example and @\
! associated documentation using this method see Section  @\
! \ref{sec:field:usage:create_empty_setcommit}. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item [field]  @\
!       The {\tt ESMF\_Field} object to be completed and @\
!       committed in this call.  The {\tt field} will have the same dimension @\
!       (dimCount) as the rank of the {\tt farray}.  @\
! \item [grid]  @\
!       The {\tt ESMF\_Grid} object to finish the Field. @\
! \item [farray] @\
!       Native fortran data array to be copied/referenced in the {\tt field}. @\
!       The {\tt field} dimension (dimCount) will be the same as the dimCount @\
!       for the {\tt farray}. @\
! \item[indexflag] @\
!      Indicate how DE-local indices are defined. See section @\
!      \ref{opt:indexflag} for a list of valid indexflag options. @\
! \item [{[copyflag]}] @\
!       Indicates whether to copy the {\tt farray} or reference it directly. @\
!       For valid values see \ref{opt:copyflag}.  The default is @\
!       {\tt ESMF\_DATA\_REF}. @\
! \item [{[staggerloc]}] @\
!       Stagger location of data in grid cells.  For valid  @\
!       predefined values see Section \ref{sec:opt:staggerloc}. @\
!       To create a custom stagger location see Section @\
!       \ref{sec:usage:staggerloc:adv}. The default @\
!       value is ESMF\_STAGGERLOC\_CENTER. @\
! \item [{[gridToFieldMap]}] @\
!       List with number of elements equal to the @\
!       {\tt grid}|s dimCount.  The list elements map each dimension @\
!       of the {\tt grid} to a dimension in the {\tt farray} by @\
!       specifying the appropriate {\tt farray} dimension index. The @\
!       default is to map all of the {\tt grid}|s dimensions against the @\
!       lowest dimensions of the {\tt farray} in sequence, i.e. @\
!       {\tt gridToFieldMap} = (/1,2,3,.../). @\
!       Unmapped {\tt farray} dimensions are undistributed Field @\
!       dimensions. @\
!       All {\tt gridToFieldMap} entries must be greater than or equal @\
!       to zero and smaller than or equal to the Field dimCount. It is erroneous @\
!       to specify the same entry multiple times unless it is zero. @\
!       If the Field dimCount is less than the Grid dimCount then the default @\
!       gridToFieldMap will contain zeros for the rightmost entries. A zero @\
!       entry in the {\tt gridToFieldMap} indicates that the particular @\
!       Grid dimension will be replicating the Field across the DEs along @\
!       this direction. @\
! \item [{[ungriddedLBound]}] @\
!       Lower bounds of the ungridded dimensions of the {\tt field}. @\
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded @\
!       dimensions in the {\tt field}.  All ungridded dimensions of the @\
!       {\tt field} are also undistributed. When field dimension count is @\
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound @\
!       must be specified. When both are specified the values are checked @\
!       for consistency.  Note that the the ordering of @\
!       these ungridded dimensions is the same as their order in the {\tt field}. @\
! \item [{[ungriddedUBound]}] @\
!       Upper bounds of the ungridded dimensions of the {\tt field}. @\
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded @\
!       dimensions in the {\tt field}.  All ungridded dimensions of the @\
!       {\tt field} are also undistributed. When field dimension count is @\
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound @\
!       must be specified. When both are specified the values are checked @\
!       for consistency.  Note that the the ordering of @\
!       these ungridded dimensions is the same as their order in the {\tt field}. @\
! \item [{[maxHaloLWidth]}] @\
!       Lower bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the {\tt field}.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt field}.  Values default @\
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in @\
!       the size of the {\tt field}.  That is, for each gridded dimension the @\
!       {\tt field} size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not @\
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored @\
!       in preparation for the implementation of the halo method. @\
!       HALO OPERATION NOT IMPLEMENTED @\
! \item [{[maxHaloUWidth]}] @\
!       Upper bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the {\tt field}.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt field}.  Values default @\
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in @\
!       the size of the {\tt field}.  That is, for each gridded dimension the @\
!       {\tt field} size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not @\
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored @\
!       in preparation for the implementation of the halo method.  @\
!       HALO OPERATION NOT IMPLEMENTED @\
! \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldSetCommitMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldSetCommit" @\
  subroutine ESMF_FieldSetCommit##mrank##D##mtypekind(field, grid, farray, & @\
    indexflag, copyflag, staggerloc, gridToFieldMap, ungriddedLBound, & @\
    ungriddedUBound, maxHaloLWidth, maxHaloUWidth, rc) @\
@\
    ! input arguments @\
    type(ESMF_Field) :: field @\
    type(ESMF_Grid)  :: grid                  @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), target :: farray @\
    type(ESMF_IndexFlag),   intent(in)           :: indexflag @\
    type(ESMF_CopyFlag),    intent(in), optional :: copyflag @\
    type(ESMF_StaggerLoc),  intent(in), optional ::staggerloc  @\
    integer, intent(in), optional :: gridToFieldMap(:)     @\
    integer, intent(in), optional :: ungriddedLBound(:) @\
    integer, intent(in), optional :: ungriddedUBound(:) @\
    integer, intent(in), optional :: maxHaloLWidth(:) @\
    integer, intent(in), optional :: maxHaloUWidth(:) @\
    integer, intent(out), optional :: rc                @\
    ! local variables @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), pointer :: fpointer @\
    type(ESMF_StaggerLoc)          :: localStaggerLoc  @\
    integer                        :: localrc, i, count @\
    integer                        :: fieldDimCount, fieldUngriddedDimCount @\
    integer                        :: gridDimCount, gridDimCount_norep  @\
    integer                        :: gridDimCount_repdim @\
    integer                        :: elementCount  @\
    integer                        :: ungriddedIndex(ESMF_MAXDIM) @\
    integer                        :: distgridToArrayMap (ESMF_MAXDIM) @\
    integer                        :: undistLBound(ESMF_MAXDIM), undistUBound(ESMF_MAXDIM) @\
    integer                        :: localUngriddedLBound (ESMF_MAXDIM) @\
    integer                        :: localUngriddedUBound (ESMF_MAXDIM) @\
    integer                        :: localGridToFieldMap (ESMF_MAXDIM) @\
    integer                        :: localMaxHaloLWidth (ESMF_MAXDIM) @\
    integer                        :: localMaxHaloUWidth (ESMF_MAXDIM) @\
    logical                        :: isGridded(ESMF_MAXDIM) @\
    integer                        :: distgridToGridMap(ESMF_MAXDIM) @\
    type(ESMF_Array)               :: array @\
    type(ESMF_DistGrid)            :: distgrid @\
    integer                        :: compEUWidth(ESMF_MAXDIM), compELWidth(ESMF_MAXDIM) @\
    integer                        :: fieldUndistDimCount                         @\
    logical                        :: flipflop(ESMF_MAXDIM) @\
    type(ESMF_IndexFlag)           :: g_indexflag @\
@\
    if (present(rc)) then @\
      rc = ESMF_RC_NOT_IMPL @\
    endif @\
    localrc = ESMF_RC_NOT_IMPL @\
@\
    ! make sure field, grid, farray are properly initialized @\
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc) @\
    ESMF_INIT_CHECK_DEEP(ESMF_GridGetInit,grid,rc) @\
@\
    ! Get number of grid dimensions, number @\
    ! of distributed grid dimensions, distgrid, @\
    ! number of ungridded Field dimensions, @\
    ! and number of undistributed Field Dimensions @\
    call ESMF_GridGet(grid, dimCount=gridDimCount, & @\
          distgridToGridMap=distgridToGridMap, & @\
          distgrid=distgrid, indexflag=g_indexflag, rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    if(.not. (indexflag .eq. g_indexflag)) then @\
        call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   @\
             "- user specified indexflag must be identical with Grid indexflag", &  @\
               ESMF_CONTEXT, rc) @\
        return @\
    endif @\
@\
    call ESMF_DistGridGet(distgrid, localDe=0, elementCount=elementCount, & @\
      rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    if (elementCount > 0) then @\
      ! The following use of fptr is a bit of trickery to get all F90 @\
      ! compilers to cooperate. For some compilers the associated() test @\
      ! will return .false. for farray of size 0. Some of those compilers @\
      ! will produce a run-time error in size(fptr). Other compilers will @\
      ! return .true. for the associated() test but return 0 in size(). @\
      fpointer => farray @\
      if(.not. associated(fpointer,farray)) then @\
        call ESMF_LogMsgSetError(ESMF_RC_ARG_BAD, &  @\
          "- farray is not associated with memory allocation)", & @\
          ESMF_CONTEXT, rc)  @\
        return @\
      endif @\
@\
      if (size(fpointer)==0) then @\
        call ESMF_LogMsgSetError(ESMF_RC_ARG_BAD, &  @\
          "- farray is not associated with memory allocation)", & @\
          ESMF_CONTEXT, rc)  @\
        return @\
      endif @\
    endif @\
@\
    ! Check the size of the native array. @\
    fieldDimCount = mrank @\
@\
    ! Error Check Input @\
    gridDimCount_repdim = 0 @\
    if (present(gridToFieldMap)) then  @\
         if (size(gridToFieldMap) .ne. gridDimCount) then @\
    call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
          "- gridToFieldMap size must equal to grid_rank", & @\
            ESMF_CONTEXT, rc)  @\
    return @\
         endif @\
        do i = 1, gridDimCount @\
            if(gridToFieldMap(i) == 0) gridDimCount_repdim = gridDimCount_repdim + 1 @\
        enddo @\
    endif @\
    gridDimCount_norep = gridDimCount - gridDimCount_repdim @\
@\
    if(fieldDimCount .lt. gridDimCount_norep) then @\
        call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
            "- farray rank must be greater than or equal to grid rank", & @\
              ESMF_CONTEXT, rc)  @\
        return @\
    endif @\
    if(fieldDimCount .gt. gridDimCount_norep) then @\
      if( (.not. present(ungriddedLBound)) .or. & @\
          (.not. present(ungriddedUBound)) ) then @\
        call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, & @\
         "- ungridded bounds must be present when Field has ungridded dimension(s)", & @\
           ESMF_CONTEXT, rc) @\
        return @\
      endif @\
    endif @\
@\
    ! ungridded dimensions plus replicated dimensions @\
    fieldUngriddedDimCount = fieldDimCount-gridDimCount + gridDimCount_repdim @\
    fieldUndistDimCount = fieldDimCount-gridDimCount + gridDimCount_repdim @\
@\
    if (present(ungriddedLBound)) then  @\
         if (size(ungriddedLBound) .ne. fieldUngriddedDimCount) then @\
    call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
          "- ungriddedLBound size must equal to array_rank-grid_rank", & @\
            ESMF_CONTEXT, rc)  @\
    return @\
         endif @\
    endif @\
@\
    if (present(ungriddedUBound)) then  @\
         if (size(ungriddedUBound) .ne. fieldUngriddedDimCount) then @\
    call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
          "- ungriddedUBound size must equal to array_rank-grid_rank", & @\
            ESMF_CONTEXT, rc)  @\
    return @\
         endif @\
    endif @\
@\
    if (present(maxHaloLWidth)) then  @\
         if (size(maxHaloLWidth) .ne. gridDimCount_norep) then @\
    call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
          "- maxHaloLWidth must equal to gridded dimCount", & @\
            ESMF_CONTEXT, rc)  @\
    return @\
         endif @\
    endif @\
@\
    if (present(maxHaloUWidth)) then  @\
         if (size(maxHaloUWidth) .ne. gridDimCount_norep) then @\
    call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
          "- maxHaloUWidth must equal to gridded dimCount", & @\
            ESMF_CONTEXT, rc)  @\
    return @\
         endif @\
    endif @\
@\
    ! Set default values. @\
    if (present(staggerloc)) then @\
      localStaggerloc = staggerloc @\
    else @\
      localStaggerLoc = ESMF_STAGGERLOC_CENTER @\
    endif @\
@\
    if (present(gridToFieldMap)) then @\
      localGridToFieldMap(1:gridDimCount) = & @\
         gridToFieldMap (1:gridDimCount) @\
    else @\
      do i = 1, gridDimCount @\
        localGridToFieldMap(i) = i @\
      enddo @\
    endif @\
    ! gridToFieldMap elements must be in range 0...fieldRank and unique @\
    ! algorithm to check element uniqueness: @\
    !   run time: O(ESMF_MAXDIM) @\
    !   memory:   O(2*ESMF_MAXDIM) @\
    !          or O(ESMF_MAXDIM+ESMF_MAXDIM/sizeof(integer)) with bitvector @\
    flipflop = .false. @\
    do i = 1, gridDimCount @\
       if(localGridToFieldMap(i) .lt. 0 .or. & @\
         localGridToFieldMap(i) .gt. fieldDimCount) then @\
           call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &  @\
                 "- gridToFieldMap element must be within range 0...array rank", & @\
                   ESMF_CONTEXT, rc)  @\
           return @\
       endif @\
       if(localGridToFieldMap(i) /= 0) then @\
	   if(flipflop(localGridToFieldMap(i))) then @\
	       call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &  @\
	    	 "- gridToFieldMap element must be unique", & @\
	    	   ESMF_CONTEXT, rc)  @\
	       return @\
	   endif @\
	   flipflop(localGridToFieldMap(i)) = .true. @\
	endif @\
    enddo @\
@\
    if(present(maxHaloLWidth)) then @\
      localMaxHaloLWidth(1:gridDimCount_norep) = & @\
         maxHaloLWidth (1:gridDimCount_norep) @\
    else @\
         localMaxHaloLWidth = 0 @\
    endif @\
@\
    if(present(maxHaloUWidth)) then @\
      localMaxHaloUWidth(1:gridDimCount_norep) = & @\
         maxHaloUWidth (1:gridDimCount_norep) @\
    else @\
         localMaxHaloUWidth = 0 @\
    endif @\
@\
    ! Here we get the lbounds and ubounds for ungridded @\
    ! dimensions from the native array, if it is not input @\
    ! through the argument list.  First we need to set up @\
    ! an index array that holds the ungridded dimensions of @\
    ! the native array. @\
@\
    ! Since we are saving the ungriddedIndex calculate it even  @\
    ! if ungridded bounds are present @\
@\
    ! Figure out which dims are ungridded @\
    isGridded = .false. @\
    do i=1, gridDimCount @\
        if(localGridToFieldMap(i) /= 0) isGridded(localGridToFieldMap(i)) = .true. @\
    enddo @\
@\
    ! Use ungridded info to figure out the map from ungridded to field dims @\
    count=1 @\
    do i=1,fieldDimCount @\
      if (.not. isGridded(i)) then @\
          ungriddedIndex(count)=i  @\
          count=count+1            @\
      endif                        @\
    enddo                          @\
@\
    ! set Array ungridded bounds depending on what user provides@\
    if (present(ungriddedLBound)) then @\
       if(present(ungriddedUBound)) then @\
         ! Both present so copy @\
         localUngriddedLBound(1:fieldUngriddedDimCount) = & @\
              ungriddedLBound(1:fieldUngriddedDimCount) @\
         localUngriddedUBound(1:fieldUngriddedDimCount) = & @\
             ungriddedUBound(1:fieldUngriddedDimCount) @\
       else  @\
         ! Copy lower bound and make upper bound high enough to fit @\
         localUngriddedLBound(1:fieldUngriddedDimCount) = & @\
             ungriddedLBound(1:fieldUngriddedDimCount) @\
         do i=1, fieldUngriddedDimCount        @\
           localUngriddedUBound(i) = ungriddedLBound(i)+ & @\
             size (farray,ungriddedIndex(i))-1 @\
         enddo   @\
       endif @\
     else  @\
       if(present(ungriddedUBound)) then @\
         ! Copy upper bound and make lower bound low enough to fit @\
         do i=1, fieldUngriddedDimCount        @\
           localUngriddedLBound(i) = ungriddedUBound(i)- & @\
             size (farray,ungriddedIndex(i))+1 @\
         enddo   @\
         localUngriddedUBound(1:fieldUngriddedDimCount) = & @\
             ungriddedUBound(1:fieldUngriddedDimCount) @\
       else  @\
         ! No user info copy array bounds @\
         ! Note: assumed shape bounds will be 1...size @\
         do i=1, fieldUngriddedDimCount        @\
            localUngriddedLBound(i) = lbound(farray,ungriddedIndex(i)) @\
            localUngriddedUBound(i) = ubound(farray,ungriddedIndex(i)) @\
        enddo   @\
      endif @\
    endif @\
@\
    ! The undistributed info from the Grid needs to be @\
    ! combined with the ungridded info from the Field in order @\
    ! to create the Array for the Field. @\
    call ESMF_GridGetArrayInfo(grid, & @\
         staggerloc=localStaggerLoc, & @\
         gridToArrayMap=localGridToFieldMap, & @\
         ungriddedLBound=localUngriddedLBound (1:fieldUngriddedDimCount), & @\
         ungriddedUBound=localUngriddedUBound (1:fieldUngriddedDimCount), & @\
         distgridToArrayMap=distgridToArrayMap, & @\
         undistLBound=undistLBound, undistUBound=undistUBound, & @\
          computationalEdgeLWidth=compELWidth, & @\
          computationalEdgeUWidth=compEUWidth, & @\
         rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    ! Create Array with undistributed dimensions                                @\
    array = ESMF_ArrayCreate(farray, distgrid=distgrid,  & @\
            indexflag=indexflag, copyflag=copyflag, & @\
            distgridToArrayMap=distgridToArrayMap (1:gridDimCount), & @\
            undistLBound=undistLBound(1:fieldUndistDimCount), & @\
            undistUBound=undistUBound(1:fieldUndistDimCount), & @\
            computationalEdgeLWidth=compELWidth(1:gridDimCount_norep), & @\
            computationalEdgeUWidth=compEUWidth(1:gridDimCount_norep), & @\
            totalLWidth=localMaxHaloLWidth(1:gridDimCount_norep), & @\
            totalUWidth=localMaxHaloUWidth(1:gridDimCount_norep), & @\
            staggerloc=localStaggerLoc%staggerloc, rc=localrc) @\
            if (ESMF_LogMsgFoundError(localrc, & @\
                   ESMF_ERR_PASSTHRU, & @\
                   ESMF_CONTEXT, rc)) return @\
    field%ftypep%array = array @\
@\
    ! set array_internal to .true. because field%array is internal @\
    field%ftypep%array_internal = .true. @\
@\
    ! Should call a common FieldSetCommitConstructor here instead @\
    ! of just setting things up ourselves @\
    ! (The field Sets were all moved here in preparation for this) @\
    field%ftypep%staggerloc = localStaggerLoc @\
    field%ftypep%gridToFieldMap(1:gridDimCount) = & @\
       localGridToFieldMap(1:gridDimCount) @\
    field%ftypep%maxHaloLWidth(1:gridDimCount_norep) = & @\
       localMaxHaloLWidth (1:gridDimCount_norep) @\
    field%ftypep%maxHaloUWidth(1:gridDimCount_norep) = & @\
       localMaxHaloUWidth (1:gridDimCount_norep) @\
    field%ftypep%ungriddedLBound(1:fieldUngriddedDimCount) = & @\
       localUngriddedLBound(1:fieldUngriddedDimCount) @\
    field%ftypep%ungriddedUBound(1:fieldUngriddedDimCount) = & @\
       localUngriddedUBound(1:fieldUngriddedDimCount) @\
    field%ftypep%datastatus = ESMF_STATUS_READY @\
    field%ftypep%grid  = grid @\
    field%ftypep%gridstatus = ESMF_STATUS_READY @\
    field%ftypep%fieldstatus = ESMF_STATUS_READY  @\
@\
    call ESMF_FieldValidate(field, rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
      ESMF_ERR_PASSTHRU, & @\
      ESMF_CONTEXT, rc)) return @\
@\
    if (present(rc)) rc = ESMF_SUCCESS @\
  end subroutine ESMF_FieldSetCommit##mrank##D##mtypekind  @\
!---------------------------------------------------------------------------- @\

TypeKindRankDeclarationMacro(FieldSetCommit)


#define FieldSetCommitPtrDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! !IROUTINE: ESMF_FieldSetCommit - Finishes creating Field from Fortran array pointer started with FieldCreateEmpty @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldSetCommit() @\
! subroutine ESMF_FieldSetCommitPtr<rank><type><kind>(field, grid, & @\
!   farrayPtr, copyflag, staggerloc, gridToFieldMap, & @\
!   maxHaloLWidth, maxHaloUWidth, rc) @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Field),                intent(inout)         :: field @\
!   type(ESMF_Grid),                 intent(in)            :: grid @\
!   <type> (ESMF_KIND_<kind>), dimension(<rank>), pointer  :: farrayPtr @\
!   type(ESMF_CopyFlag),   intent(in), optional :: copyflag @\
!   type(ESMF_STAGGERLOC), intent(in), optional :: staggerloc @\
!   integer,               intent(in), optional :: gridToFieldMap(:) @\
!   integer,               intent(in), optional :: maxHaloLWidth(:) @\
!   integer,               intent(in), optional :: maxHaloUWidth(:) @\
!   integer,               intent(inout), optional :: rc @\
! @\
! !DESCRIPTION: @\
! This call completes an {\tt ESMF\_Field} allocated with the @\
! {\tt ESMF\_FieldCreateEmpty()} call. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item [field]  @\
!       The {\tt ESMF\_Field} object to be completed and @\
!       committed in this call.  The {\tt field} will have the same dimension @\
!       (dimCount) as the rank of the {\tt farrayPtr}.  @\
! \item [grid]  @\
!       The {\tt ESMF\_Grid} object to finish the Field.  The dimCount of the @\
!       Grid must be smaller than or equal to the rank of the {\tt farrayPtr}. @\
! \item [farrayPtr] @\
!       Native fortran data array to be copied/referenced in the {\tt field}. @\
!       The {\tt field} dimension (dimCount) will be the same as the dimCount @\
!       for the {\tt farrayPtr}. @\
! \item [{[copyflag]}] @\
!       Indicates whether to copy the {\tt farrayPtr} or reference it directly. @\
!       For valid values see \ref{opt:copyflag}.  The default is @\
!       {\tt ESMF\_DATA\_REF}. @\
! \item [{[staggerloc]}] @\
!       Stagger location of data in grid cells.  For valid  @\
!       predefined values see Section \ref{sec:opt:staggerloc}. @\
!       To create a custom stagger location see Section @\
!       \ref{sec:usage:staggerloc:adv}. The default @\
!       value is ESMF\_STAGGERLOC\_CENTER. @\
! \item [{[gridToFieldMap]}] @\
!       List with number of elements equal to the @\
!       {\tt grid}|s dimCount.  The list elements map each dimension @\
!       of the {\tt grid} to a dimension in the {\tt farrayPtr} by @\
!       specifying the appropriate {\tt farrayPtr} dimension index. The @\
!       default is to map all of the {\tt grid}|s dimensions against the @\
!       lowest dimensions of the {\tt farrayPtr} in sequence, i.e. @\
!       {\tt gridToFieldMap} = (/1,2,3,.../). @\
!       Unmapped {\tt farrayPtr} dimensions are undistributed Field @\
!       dimensions. @\
!       All {\tt gridToFieldMap} entries must be greater than or equal @\
!       to zero and smaller than or equal to the Field dimCount. It is erroneous @\
!       to specify the same entry multiple times unless it is zero. @\
!       If the Field dimCount is less than the Grid dimCount then the default @\
!       gridToFieldMap will contain zeros for the rightmost entries. A zero @\
!       entry in the {\tt gridToFieldMap} indicates that the particular @\
!       Grid dimension will be replicating the Field across the DEs along @\
!       this direction. @\
! \item [{[maxHaloLWidth]}] @\
!       Lower bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the {\tt field}.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt field}.  Values default @\
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in @\
!       the size of the {\tt field}.  That is, for each gridded dimension the @\
!       {\tt field} size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not @\
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored @\
!       in preparation for the implementation of the halo method. @\
!       HALO OPERATION NOT IMPLEMENTED @\
! \item [{[maxHaloUWidth]}] @\
!       Upper bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the {\tt field}.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt field}.  Values default @\
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in @\
!       the size of the {\tt field}.  That is, for each gridded dimension the @\
!       {\tt field} size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not @\
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored @\
!       in preparation for the implementation of the halo method.  @\
!       HALO OPERATION NOT IMPLEMENTED @\
! \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldSetCommitPtrMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldSetCommitPtr" @\
  subroutine ESMF_FieldSetCommitPtr##mrank##D##mtypekind(field, grid, farrayPtr, & @\
    copyflag, staggerloc, gridToFieldMap, & @\
    maxHaloLWidth, maxHaloUWidth, rc) @\
@\
    ! input arguments @\
    type(ESMF_Field) :: field @\
    type(ESMF_Grid) :: grid                  @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), pointer :: farrayPtr @\
    type(ESMF_CopyFlag), intent(in), optional   :: copyflag @\
    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc @\
    integer, intent(in), optional :: gridToFieldMap(:)     @\
    integer, intent(in), optional :: maxHaloLWidth(:) @\
    integer, intent(in), optional :: maxHaloUWidth(:) @\
    integer, intent(out), optional :: rc                @\
    ! local variables @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), pointer :: fpointer @\
    type(ESMF_StaggerLoc)          :: localStaggerLoc  @\
    integer                        :: localrc, i @\
    integer                        :: fieldDimCount @\
    integer                        :: gridDimCount, gridDimCount_norep  @\
    integer                        :: gridDimCount_repdim @\
    integer                        :: elementCount  @\
    integer                        :: distgridToArrayMap (ESMF_MAXDIM) @\
    integer                        :: undistLBound(ESMF_MAXDIM), undistUBound(ESMF_MAXDIM) @\
    integer                        :: localGridToFieldMap (ESMF_MAXDIM) @\
    integer                        :: localMaxHaloLWidth (ESMF_MAXDIM) @\
    integer                        :: localMaxHaloUWidth (ESMF_MAXDIM) @\
    integer                        :: distgridToGridMap(ESMF_MAXDIM) @\
    type(ESMF_Array)               :: array @\
    type(ESMF_DistGrid)            :: distgrid @\
    integer                        :: compEUWidth(ESMF_MAXDIM), compELWidth(ESMF_MAXDIM) @\
    integer                        :: fieldUndistDimCount                         @\
    logical                        :: flipflop(ESMF_MAXDIM) @\
    type(ESMF_IndexFlag)           :: indexflag @\
@\
    if (present(rc)) then @\
      rc = ESMF_RC_NOT_IMPL @\
    endif @\
    localrc = ESMF_RC_NOT_IMPL @\
@\
    ! make sure field, grid, farray are properly initialized @\
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc) @\
    ESMF_INIT_CHECK_DEEP(ESMF_GridGetInit,grid,rc) @\
@\
    ! Get number of grid dimensions, number @\
    ! of distributed grid dimensions, distgrid, @\
    ! number of ungridded Field dimensions, @\
    ! and number of undistributed Field Dimensions @\
    call ESMF_GridGet(grid, dimCount=gridDimCount, & @\
          distgridToGridMap=distgridToGridMap, & @\
          distgrid=distgrid, indexflag=indexflag, rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    call ESMF_DistGridGet(distgrid, localDe=0, elementCount=elementCount, & @\
      rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    if (elementCount > 0) then @\
      ! The following use of fptr is a bit of trickery to get all F90 @\
      ! compilers to cooperate. For some compilers the associated() test @\
      ! will return .false. for farray of size 0. Some of those compilers @\
      ! will produce a run-time error in size(fptr). Other compilers will @\
      ! return .true. for the associated() test but return 0 in size(). @\
      fpointer => farrayPtr @\
      if(.not. associated(fpointer,farrayPtr)) then @\
        call ESMF_LogMsgSetError(ESMF_RC_ARG_BAD, &  @\
          "- farrayPtr is not associated with memory allocation)", & @\
          ESMF_CONTEXT, rc)  @\
        return @\
      endif @\
@\
      if (size(fpointer)==0) then @\
        call ESMF_LogMsgSetError(ESMF_RC_ARG_BAD, &  @\
          "- farrayPtr is not associated with memory allocation)", & @\
          ESMF_CONTEXT, rc)  @\
        return @\
      endif @\
    endif @\
@\
    ! Error Check Input @\
    ! And count the number of replicated dimensions in the Grid @\
    gridDimCount_repdim = 0 @\
    if (present(gridToFieldMap)) then  @\
         if (size(gridToFieldMap) .ne. gridDimCount) then @\
            call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
                  "- gridToFieldMap size must equal to grid_rank", & @\
                    ESMF_CONTEXT, rc)  @\
            return @\
         endif @\
        do i = 1, gridDimCount @\
            if(gridToFieldMap(i) == 0) gridDimCount_repdim = gridDimCount_repdim + 1 @\
        enddo @\
    endif @\
    gridDimCount_norep = gridDimCount - gridDimCount_repdim @\
@\
    ! Check the size of the native array. @\
    fieldDimCount = mrank @\
@\
    if(fieldDimCount .lt. gridDimCount_norep) then @\
        call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
            "- farrayPtr rank must be greater than or equal to grid rank", & @\
              ESMF_CONTEXT, rc)  @\
        return @\
    endif @\
@\
    fieldUndistDimCount = fieldDimCount-gridDimCount + gridDimCount_repdim @\
@\
    if (present(maxHaloLWidth)) then  @\
         if (size(maxHaloLWidth) .ne. gridDimCount_norep) then @\
            call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
                  "- maxHaloLWidth must equal to gridded dimCount", & @\
                    ESMF_CONTEXT, rc)  @\
            return @\
         endif @\
    endif @\
@\
    if (present(maxHaloUWidth)) then  @\
         if (size(maxHaloUWidth) .ne. gridDimCount_norep) then @\
            call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &  @\
                  "- maxHaloUWidth must equal to gridded dimCount", & @\
                    ESMF_CONTEXT, rc)  @\
            return @\
         endif @\
    endif @\
@\
    if(present(staggerloc)) then @\
        localStaggerLoc = staggerloc @\
    else @\
        localStaggerLoc = ESMF_STAGGERLOC_CENTER @\
    endif @\
@\
    if (present(gridToFieldMap)) then @\
      localGridToFieldMap(1:gridDimCount) = & @\
         gridToFieldMap (1:gridDimCount) @\
    else @\
      do i = 1, gridDimCount @\
        localGridToFieldMap(i) = i @\
      enddo @\
    endif @\
    ! gridToFieldMap elements must be in range 0...fieldRank and unique @\
    ! algorithm to check element uniqueness: @\
    !   run time: O(ESMF_MAXDIM) @\
    !   memory:   O(2*ESMF_MAXDIM) @\
    !          or O(ESMF_MAXDIM+ESMF_MAXDIM/sizeof(integer)) with bitvector @\
    flipflop = .false. @\
    do i = 1, gridDimCount @\
        if(localGridToFieldMap(i) .lt. 0 .or. & @\
          localGridToFieldMap(i) .gt. fieldDimCount) then @\
            call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &  @\
                  "- gridToFieldMap element must be within range 0...array rank", & @\
                    ESMF_CONTEXT, rc)  @\
            return @\
        endif @\
        if(localGridToFieldMap(i) /= 0) then @\
           if(flipflop(localGridToFieldMap(i))) then @\
               call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &  @\
                     "- gridToFieldMap element must be unique", & @\
                       ESMF_CONTEXT, rc)  @\
               return @\
           endif @\
           flipflop(localGridToFieldMap(i)) = .true. @\
        endif @\
    enddo @\
@\
    if(present(maxHaloLWidth)) then @\
      localMaxHaloLWidth(1:gridDimCount_norep) = & @\
         maxHaloLWidth (1:gridDimCount_norep) @\
    else @\
         localMaxHaloLWidth = 0 @\
    endif @\
@\
    if(present(maxHaloUWidth)) then @\
      localMaxHaloUWidth(1:gridDimCount_norep) = & @\
         maxHaloUWidth (1:gridDimCount_norep) @\
    else @\
         localMaxHaloUWidth = 0 @\
    endif @\
@\
    ! The undistributed info from the Grid needs to be @\
    ! combined with the ungridded info from the Field in order @\
    ! to create the Array for the Field. @\
    call ESMF_GridGetArrayInfo(grid, & @\
         staggerloc=localStaggerLoc, & @\
         gridToArrayMap=localGridToFieldMap, & @\
         distgridToArrayMap=distgridToArrayMap, & @\
         undistLBound=undistLBound, undistUBound=undistUBound, & @\
         computationalEdgeLWidth=compELWidth, & @\
         computationalEdgeUWidth=compEUWidth, & @\
         rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    ! Create Array with undistributed dimensions                                @\
    array = ESMF_ArrayCreate(farrayPtr, distgrid=distgrid, & @\
            copyflag=copyflag, & @\
            distgridToArrayMap=distgridToArrayMap (1:gridDimCount), & @\
            computationalEdgeLWidth=compELWidth(1:gridDimCount_norep), & @\
            computationalEdgeUWidth=compEUWidth(1:gridDimCount_norep), & @\
            totalLWidth=localMaxHaloLWidth(1:gridDimCount_norep), & @\
            totalUWidth=localMaxHaloUWidth(1:gridDimCount_norep), & @\
            staggerloc=localStaggerLoc%staggerloc, rc=localrc) @\
            if (ESMF_LogMsgFoundError(localrc, & @\
                   ESMF_ERR_PASSTHRU, & @\
                   ESMF_CONTEXT, rc)) return @\
    field%ftypep%array = array @\
@\
    ! set array_internal to .true. because field%array is internal @\
    field%ftypep%array_internal = .true. @\
@\
    ! Should call a common FieldSetCommitPtrConstructor here instead @\
    ! of just setting things up ourselves @\
    ! (The field Sets were all moved here in preparation for this) @\
    field%ftypep%staggerloc = localStaggerLoc @\
    field%ftypep%gridToFieldMap(1:gridDimCount) = & @\
       localGridToFieldMap(1:gridDimCount) @\
    field%ftypep%maxHaloLWidth(1:gridDimCount_norep) = & @\
       localMaxHaloLWidth (1:gridDimCount_norep) @\
    field%ftypep%maxHaloUWidth(1:gridDimCount_norep) = & @\
       localMaxHaloUWidth (1:gridDimCount_norep) @\
    field%ftypep%datastatus = ESMF_STATUS_READY @\
    field%ftypep%grid  = grid @\
    field%ftypep%gridstatus = ESMF_STATUS_READY @\
    field%ftypep%fieldstatus = ESMF_STATUS_READY  @\
@\
    call ESMF_FieldValidate(field, rc=localrc) @\
    if (ESMF_LogMsgFoundError(localrc, & @\
      ESMF_ERR_PASSTHRU, & @\
      ESMF_CONTEXT, rc)) return @\
@\
    if (present(rc)) rc = ESMF_SUCCESS @\
  end subroutine ESMF_FieldSetCommitPtr##mrank##D##mtypekind  @\
!---------------------------------------------------------------------------- @\

TypeKindRankDeclarationMacro(FieldSetCommitPtr)


end module ESMF_FieldSetMod
