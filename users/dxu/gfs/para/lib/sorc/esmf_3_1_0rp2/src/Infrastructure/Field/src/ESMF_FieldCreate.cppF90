! $Id: ESMF_FieldCreate.cppF90,v 1.7.2.39 2009/01/28 20:04:51 theurich Exp $
!
! Earth System Modeling Framework
! Copyright 2002-2009, University Corporation for Atmospheric Research, 
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics 
! Laboratory, University of Michigan, National Centers for Environmental 
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory, 
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
^define ESMF_FILENAME "ESMF_FieldCreate.F90"
!==============================================================================
!
! ESMF FieldCreate module
module ESMF_FieldCreateMod
!
!==============================================================================
!
! This file contains the FieldCreate() methods.
!
!------------------------------------------------------------------------------
! INCLUDES
! < ignore blank lines below.  they are created by the files which
!   define various macros. >
^include "ESMF.h"
#include "ESMF_TypeKindRankMacros.hcppF90"

!------------------------------------------------------------------------------
! !USES:
  use ESMF_UtilTypesMod
  use ESMF_BaseMod
  use ESMF_LogErrMod
  use ESMF_IOSpecMod
  use ESMF_ArraySpecMod
  use ESMF_LocalArrayMod
  use ESMF_DELayoutMod
  use ESMF_StaggerLocMod
  use ESMF_GridMod
  use ESMF_ArrayMod
  use ESMF_ArrayGetMod
  use ESMF_ArrayCreateMod
  
  use ESMF_FieldMod
  use ESMF_FieldSetMod
  
  implicit none

!------------------------------------------------------------------------------
! !PRIVATE TYPES:
  private

!------------------------------------------------------------------------------
! !PUBLIC MEMBER FUNCTIONS:

  public ESMF_FieldCreate
  public ESMF_FieldCreateEmpty
  public ESMF_FieldCreateNoData       ! Create a new Field without data
  public ESMF_FieldDestroy            ! Destroy a Field

 
!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
  character(*), parameter, private :: version = &
    '$Id: ESMF_FieldCreate.cppF90,v 1.7.2.39 2009/01/28 20:04:51 theurich Exp $'

!==============================================================================
! 
! INTERFACE BLOCKS
!
!==============================================================================


! -------------------------- ESMF-public method -------------------------------

!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_FieldCreate - Create a new Field with data
!
! !INTERFACE:
  interface ESMF_FieldCreate 
   
! !PRIVATE MEMBER FUNCTIONS:
!
    module procedure ESMF_FieldCreateFromArraySpec
    module procedure ESMF_FieldCreateFromArray
    TypeKindRankInterfaceMacro(FieldCreateAssmdShape)
    TypeKindRankInterfaceMacro(FieldCreateFromPtr)

! !DESCRIPTION:
!   This interface provides an entry point for methods that create a complete
!   {\tt ESMF\_Field}.  These method all contain an {\tt ESMF\_Grid} and 
!   {\tt ESMF\_Data}.  The variations allow the user to specify the data 
!   using either a Fortran array or an {\tt ESMF\_Array}.
  end interface
!EOPI
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
!BOPI
! !IROUTINE: ESMF_FieldCreateNoData - Create a new Field without data
!
! !INTERFACE:
  interface ESMF_FieldCreateNoData
   
! !PRIVATE MEMBER FUNCTIONS:
    module procedure ESMF_FieldCreateNoDataPtr
    module procedure ESMF_FieldCreateNoDataArray
! !DESCRIPTION:
!   This interface provides an entry point for methods that create 
!   an {\tt ESMF\_Field} without allocating or referencing any associated data.
!   The variations allow an {\tt ESMF\_Grid} to be specified or not, and for
!   the data description to be specified or not.
  end interface
!EOPI
!------------------------------------------------------------------------------


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


#define FieldCreateFromPtrDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! !IROUTINE: ESMF_FieldCreate - Create a Field from Fortran array pointer @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldCreate() @\
! function ESMF_FieldCreateFromPtr<rank><type><kind>(grid, & @\
!   farrayPtr, copyflag, staggerloc, gridToFieldMap, & @\
!   maxHaloLWidth, maxHaloUWidth, name, iospec, rc) @\
! @\
! !RETURN VALUE: @\
!   type(ESMF_Field) :: ESMF_FieldCreateFromPtr<rank><type><kind> @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Grid) :: grid                  @\
!   <type> (ESMF_KIND_<kind>), dimension(<rank>),pointer :: farrayPtr @\
!   type(ESMF_CopyFlag), intent(in), optional   :: copyflag @\
!   type(ESMF_StaggerLoc), intent(in), optional ::staggerloc  @\
!   integer, intent(in), optional :: gridToFieldMap(:)     @\
!   integer, intent(in), optional :: maxHaloLWidth(:) @\
!   integer, intent(in), optional :: maxHaloUWidth(:) @\
!   character (len=*), intent(in), optional :: name  @\
!   type(ESMF_IOSpec), intent(in), optional :: iospec @\
!   integer, intent(out), optional :: rc                @\
! @\
! !DESCRIPTION: @\
! Create an {\tt ESMF\_Field} from existing local native @\
! Fortran data array with pointer attribute @\
! and {\tt ESMF\_Grid}. Besides @\
! {\tt farrayPtr} each PET must issue this call with identical arguments in @\
! order to create a consistent Field object. The bounds of the local arrays @\
! are preserved by this call and determine the bounds of the total region of @\
! the resulting Field object. Bounds of the DE-local exclusive regions are @\
! set to be consistent with the total regions and the specified Grid @\
! argument. Bounds for Field dimensions that are not distributed are @\
! automatically set to the bounds provided by {\tt farrayPtr}. @\
! @\
! This interface requires a 1 DE per PET decomposition. The Field object will @\
! not be created and an error will be returned if this condition is not met. @\
! @\
! The not distributed Field dimensions form a tensor of rank = Field.rank - @\
! Grid.dimCount. By default all tensor elements are associated with @\
! center stagger. The widths of the computational region are set to @\
! the provided value, or zero by default, for all tensor elements. @\
! @\
! The return value is the newly created {\tt ESMF\_Field} object. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item [grid]  @\
!       {\tt ESMF\_Grid} object. @\
! \item [farrayPtr] @\
!       Native fortran data array with pointer attribute to be @\
!       copied/referenced in the Field. @\
!       The Field dimension (dimCount) will be the same as the dimCount @\
!       for the {\tt farrayPtr}. @\
! \item [{[copyflag]}] @\
!       Whether to copy the contents of the {\tt farrayPtr} or reference @\
!       directly. @\
!       For valid values see \ref{opt:copyflag}.  The default is @\
!       {\tt ESMF\_DATA\_REF}. @\
! \item [{[staggerloc]}] @\
!       Stagger location of data in grid cells.  For valid  @\
!       predefined values see Section \ref{sec:opt:staggerloc}. @\
!       To create a custom stagger location see Section @\
!       \ref{sec:usage:staggerloc:adv}.  The default @\
!       value is {\tt ESMF\_STAGGERLOC\_CENTER}. @\
! \item [{[gridToFieldMap]}] @\
!       List with number of elements equal to the @\
!       {\tt grid}|s dimCount.  The list elements map each dimension @\
!       of the {\tt grid} to a dimension in the {\tt farrayPtr} by @\
!       specifying the appropriate {\tt farrayPtr} dimension index. The @\
!       default is to map all of the {\tt grid}|s dimensions against the @\
!       lowest dimensions of the {\tt farrayPtr} in sequence, i.e. @\
!       {\tt gridToFieldMap} = (/1,2,3,.../). @\
!       Unmapped {\tt farrayPtr} dimensions are undistributed Field @\
!       dimensions. @\
!       All {\tt gridToFieldMap} entries must be greater than or equal @\
!       to zero and smaller than or equal to the Field dimCount. It is erroneous @\
!       to specify the same entry multiple times unless it is zero. @\
!       If the Field dimCount is less than the Grid dimCount then the default @\
!       gridToFieldMap will contain zeros for the rightmost entries. A zero @\
!       entry in the {\tt gridToFieldMap} indicates that the particular @\
!       Grid dimension will be replicating the Field across the DEs along @\
!       this direction. @\
! \item [{[maxHaloLWidth]}] @\
!       Lower bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the Field.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt farrayPtr}.  Values default @\
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in @\
!       the size of the {\tt farrayPtr}.  That is, for each gridded dimension the @\
!       {\tt farrayPtr} size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not @\
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored @\
!       in preparation for the implementation of the halo method. @\
!       HALO OPERATION NOT IMPLEMENTED @\
! \item [{[maxHaloUWidth]}] @\
!       Upper bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the Field.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt farrayPtr}.  Values default @\
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in @\
!       the size of the {\tt farrayPtr}.  That is, for each gridded dimension the @\
!       {\tt farrayPtr} size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not @\
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored @\
!       in preparation for the implementation of the halo method.  @\
!       HALO OPERATION NOT IMPLEMENTED @\
! \item [{[name]}]  @\
!       Field name.  @\
! \item [{[iospec]}]  @\
!       I/O specification. NOT IMPLEMENTED @\
! \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldCreateFromPtrMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldCreateFromPtr" @\
  function ESMF_FieldCreateFromPtr##mrank##D##mtypekind(grid, & @\
    farrayPtr, copyflag, staggerloc, gridToFieldMap, & @\
    maxHaloLWidth, maxHaloUWidth, name, iospec, rc) @\
@\
    ! return value @\
    type(ESMF_Field) :: ESMF_FieldCreateFromPtr##mrank##D##mtypekind @\
@\
    ! input arguments @\
    type(ESMF_Grid) :: grid                  @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim),pointer:: farrayPtr @\
    type(ESMF_CopyFlag), intent(in), optional   :: copyflag @\
    type(ESMF_StaggerLoc), intent(in), optional ::staggerloc  @\
    integer, intent(in), optional :: gridToFieldMap(:)     @\
    integer, intent(in), optional :: maxHaloLWidth(:) @\
    integer, intent(in), optional :: maxHaloUWidth(:) @\
    character (len=*), intent(in), optional :: name  @\
    type(ESMF_IOSpec), intent(in), optional :: iospec @\
    integer, intent(out), optional :: rc                @\
@\
    ! local variables @\
    integer          :: localrc @\
@\
    if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
    localrc = ESMF_RC_NOT_IMPL @\
@\
    ESMF_FieldCreateFromPtr##mrank##D##mtypekind = & @\
        ESMF_FieldCreateEmpty(name, iospec, rc=localrc) @\
@\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    call ESMF_FieldSetCommit( & @\
        ESMF_FieldCreateFromPtr##mrank##D##mtypekind, & @\
        grid, farrayPtr, copyflag, & @\
        staggerloc, gridToFieldMap, & @\
        maxHaloLWidth, maxHaloUWidth, & @\
        rc=localrc) @\
@\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    call ESMF_FieldValidate(ESMF_FieldCreateFromPtr##mrank##D##mtypekind, & @\
        rc=localrc) @\
@\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    if (present(rc)) rc = ESMF_SUCCESS @\
  end function ESMF_FieldCreateFromPtr##mrank##D##mtypekind  @\
!------------------------------------------------------------------------------ @\

TypeKindRankDeclarationMacro(FieldCreateFromPtr)

#define FieldCreateAssmdShapeDoc() \
!---------------------------------------------------------------------------- @\
!BOP @\
! !IROUTINE: ESMF_FieldCreate - Create a Field from Fortran array @\
! @\
! !INTERFACE: @\
! ! Private name; call using ESMF_FieldCreate() @\
! function ESMF_FieldCreateAssmdShape<rank><type><kind>(grid, & @\
!   farray, indexflag, copyflag, staggerloc, gridToFieldMap, ungriddedLBound, & @\
!   ungriddedUBound, maxHaloLWidth, maxHaloUWidth, name, iospec, rc) @\
! @\
! !RETURN VALUE: @\
!   type(ESMF_Field) :: ESMF_FieldCreateAssmdShape<rank><type><kind> @\
! @\
! !ARGUMENTS: @\
!   type(ESMF_Grid) :: grid                  @\
!   <type> (ESMF_KIND_<kind>), dimension(<rank>), target :: farray @\
!   type(ESMF_IndexFlag),  intent(in)           :: indexflag @\
!   type(ESMF_CopyFlag), intent(in), optional   :: copyflag @\
!   type(ESMF_StaggerLoc), intent(in), optional :: staggerloc  @\
!   integer, intent(in), optional :: gridToFieldMap(:)     @\
!   integer, intent(in), optional :: ungriddedLBound(:) @\
!   integer, intent(in), optional :: ungriddedUBound(:) @\
!   integer, intent(in), optional :: maxHaloLWidth(:) @\
!   integer, intent(in), optional :: maxHaloUWidth(:) @\
!   character (len=*), intent(in), optional :: name  @\
!   type(ESMF_IOSpec), intent(in), optional :: iospec @\
!   integer, intent(out), optional :: rc                @\
! @\
! !DESCRIPTION: @\
! Create an {\tt ESMF\_Field} from a fortran data array and {\tt ESMF\_Grid}. @\
! For examples and @\
! associated documentations using this method see Section  @\
! \ref{sec:field:usage:create_2dptr}, @\
! \ref{sec:field:usage:create_2dgrid_3dptr}, @\
! \ref{sec:field:usage:create_2dgrid_3dptr_map}, @\
! \ref{sec:field:usage:create_2dgrid_3dptr_map_halo}, and @\
! \ref{sec:field:usage:create_5dgrid_7dptr_2dungridded}. @\
! @\
! The arguments are: @\
! \begin{description} @\
! \item [grid]  @\
!       {\tt ESMF\_Grid} object. @\
! \item [farray] @\
!       Native fortran data array to be copied/referenced in the Field @\
!       The Field dimension (dimCount) will be the same as the dimCount @\
!       for the {\tt farray}. @\
! \item[indexflag] @\
!      Indicate how DE-local indices are defined. See section @\
!      \ref{opt:indexflag} for a list of valid indexflag options. @\
! \item [{[copyflag]}] @\
!       Whether to copy the {\tt farray} or reference directly. @\
!       For valid values see \ref{opt:copyflag}.  The default is @\
!       {\tt ESMF\_DATA\_REF}. @\
! \item [{[staggerloc]}] @\
!       Stagger location of data in grid cells.  For valid  @\
!       predefined values see Section \ref{sec:opt:staggerloc}. @\
!       To create a custom stagger location see Section @\
!       \ref{sec:usage:staggerloc:adv}.  The default @\
!       value is ESMF\_STAGGERLOC\_CENTER. @\
! \item [{[gridToFieldMap]}] @\
!       List with number of elements equal to the @\
!       {\tt grid}|s dimCount.  The list elements map each dimension @\
!       of the {\tt grid} to a dimension in the {\tt farray} by @\
!       specifying the appropriate {\tt farray} dimension index. The @\
!       default is to map all of the {\tt grid}|s dimensions against the @\
!       lowest dimensions of the {\tt farray} in sequence, i.e. @\
!       {\tt gridToFieldMap} = (/1,2,3,.../). @\
!       Unmapped {\tt farray} dimensions are undistributed Field @\
!       dimensions. @\
!       All {\tt gridToFieldMap} entries must be greater than or equal @\
!       to zero and smaller than or equal to the Field dimCount. It is erroneous @\
!       to specify the same entry multiple times unless it is zero. @\
!       If the Field dimCount is less than the Grid dimCount then the default @\
!       gridToFieldMap will contain zeros for the rightmost entries. A zero @\
!       entry in the {\tt gridToFieldMap} indicates that the particular @\
!       Grid dimension will be replicating the Field across the DEs along @\
!       this direction. @\
! \item [{[ungriddedLBound]}] @\
!       Lower bounds of the ungridded dimensions of the Field. @\
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded @\
!       dimensions in the Field.  All ungridded dimensions of the @\
!       Field are also undistributed. When field dimension count is @\
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound @\
!       must be specified. When both are specified the values are checked @\
!       for consistency.  Note that the the ordering of @\
!       these ungridded dimensions is the same as their order in the {\tt farray}. @\
! \item [{[ungriddedUBound]}] @\
!       Upper bounds of the ungridded dimensions of the Field. @\
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded @\
!       dimensions in the Field.  All ungridded dimensions of the @\
!       Field are also undistributed. When field dimension count is @\
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound @\
!       must be specified. When both are specified the values are checked @\
!       for consistency.  Note that the the ordering of @\
!       these ungridded dimensions is the same as their order in the {\tt farray}. @\
! \item [{[maxHaloLWidth]}] @\
!       Lower bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the Field.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt farray}.  Values default @\
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in @\
!       the size of the {\tt farray}.  That is, for each gridded dimension the @\
!       {\tt farray} size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not @\
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored @\
!       in preparation for the implementation of the halo method. @\
!       HALO OPERATION NOT IMPLEMENTED @\
! \item [{[maxHaloUWidth]}] @\
!       Upper bound of halo region.  The size of this array is the number @\
!       of gridded dimensions in the Field.  However, ordering of the elements @\
!       needs to be the same as they appear in the {\tt farray}.  Values default @\
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in @\
!       the size of the {\tt farray}.  That is, for each gridded dimension the @\
!       {\tt farray} size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth} @\
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not @\
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored @\
!       in preparation for the implementation of the halo method.  @\
!       HALO OPERATION NOT IMPLEMENTED @\
! \item [{[name]}]  @\
!       Field name.  @\
! \item [{[iospec]}]  @\
!       I/O specification. NOT IMPLEMENTED @\
! \item [{[rc]}]  @\
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors. @\
! \end{description} @\
! @\
!EOP @\
!---------------------------------------------------------------------------- @\

#define FieldCreateAssmdShapeMacro(mname, mtypekind, mrank, mdim, mlen, mrng, mloc) \
!---------------------------------------------------------------------------- @\
^undef  ESMF_METHOD @\
^define ESMF_METHOD "ESMF_FieldCreateAssmdShape" @\
  function ESMF_FieldCreateAssmdShape##mrank##D##mtypekind(grid, & @\
    farray, indexflag, copyflag, staggerloc, gridToFieldMap, ungriddedLBound, & @\
    ungriddedUBound, maxHaloLWidth, maxHaloUWidth, name, iospec, rc) @\
@\
    ! return value @\
    type(ESMF_Field) :: ESMF_FieldCreateAssmdShape##mrank##D##mtypekind @\
@\
    ! input arguments @\
    type(ESMF_Grid) :: grid                  @\
    mname (ESMF_KIND_##mtypekind), dimension(mdim), target :: farray @\
    type(ESMF_IndexFlag),  intent(in)           :: indexflag @\
    type(ESMF_CopyFlag), intent(in), optional   :: copyflag @\
    type(ESMF_StaggerLoc), intent(in), optional ::staggerloc  @\
    integer, intent(in), optional :: gridToFieldMap(:)     @\
    integer, intent(in), optional :: ungriddedLBound(:) @\
    integer, intent(in), optional :: ungriddedUBound(:) @\
    integer, intent(in), optional :: maxHaloLWidth(:) @\
    integer, intent(in), optional :: maxHaloUWidth(:) @\
    character (len=*), intent(in), optional :: name  @\
    type(ESMF_IOSpec), intent(in), optional :: iospec @\
    integer, intent(out), optional :: rc                @\
@\
    ! local variables @\
    integer          :: localrc @\
@\
    if (present(rc)) rc = ESMF_RC_NOT_IMPL @\
    localrc = ESMF_RC_NOT_IMPL @\
@\
    ESMF_FieldCreateAssmdShape##mrank##D##mtypekind = & @\
        ESMF_FieldCreateEmpty(name, iospec, rc=localrc) @\
@\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    call ESMF_FieldSetCommit( & @\
        ESMF_FieldCreateAssmdShape##mrank##D##mtypekind, & @\
        grid, farray, indexflag, copyflag, & @\
        staggerloc, gridToFieldMap, & @\
        ungriddedLBound, ungriddedUBound, maxHaloLWidth, maxHaloUWidth, & @\
        rc=localrc) @\
@\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    call ESMF_FieldValidate(ESMF_FieldCreateAssmdShape##mrank##D##mtypekind, & @\
        rc=localrc) @\
@\
    if (ESMF_LogMsgFoundError(localrc, & @\
        ESMF_ERR_PASSTHRU, & @\
        ESMF_CONTEXT, rc)) return @\
@\
    if (present(rc)) rc = ESMF_SUCCESS @\
  end function ESMF_FieldCreateAssmdShape##mrank##D##mtypekind  @\
!------------------------------------------------------------------------------ @\

TypeKindRankDeclarationMacro(FieldCreateAssmdShape)


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldCreateFromArraySpec"
!BOP
! !IROUTINE:   ESMF_FieldCreate - Create a Field from Grid and ArraySpec

! !INTERFACE:
  ! Private name; call using ESMF_FieldCreate()
  function ESMF_FieldCreateFromArraySpec(grid, arrayspec, indexflag, &
    staggerloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
    maxHaloLWidth, maxHaloUWidth, name, iospec, rc)
!
! !RETURN VALUE:
    type(ESMF_Field) :: ESMF_FieldCreateFromArraySpec
!
! !ARGUMENTS:
    type(ESMF_Grid) :: grid               
    type(ESMF_ArraySpec), intent(inout) :: arrayspec     
    type(ESMF_IndexFlag),  intent(in), optional :: indexflag
    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
    integer, intent(in), optional :: gridToFieldMap(:)    
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)
    integer, intent(in), optional :: maxHaloLWidth(:)
    integer, intent(in), optional :: maxHaloUWidth(:)
    character (len=*), intent(in), optional :: name 
    type(ESMF_IOSpec), intent(in), optional :: iospec 
    integer, intent(out), optional :: rc              
!
! !DESCRIPTION:
! Create an {\tt ESMF\_Field} and allocate space internally for an
! {\tt ESMF\_Array}.  Return a new {\tt ESMF\_Field}. For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:create_grid_arrayspec}.
! 
! The arguments are:
! \begin{description}
! \item [grid] 
!       {\tt ESMF\_Grid} object. 
! \item [arrayspec]
!       Data type and kind specification. 
! \item[{[indexflag]}]
!      Indicate how DE-local indices are defined. By default each DE's
!      exclusive region is placed to start at the local index space origin,
!      i.e. (1, 1, ..., 1). Alternatively the DE-local index space can be
!      aligned with the global index space, if a global index space is well
!      defined by the associated Grid. See section \ref{opt:indexflag}
!      for a list of valid indexflag options.
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is ESMF\_STAGGERLOC\_CENTER.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the Field by
!       specifying the appropriate Field dimension index. The
!       default is to map all of the {\tt grid}|s dimensions against the
!       lowest dimensions of the Field in sequence, i.e.
!       {\tt gridToFieldMap} = (/1,2,3,.../).
!       Unmapped Field dimensions are undistributed Field dimensions.
!       All {\tt gridToFieldMap} entries must be greater than or equal
!       to zero and smaller than or equal to the Field dimCount. It is erroneous
!       to specify the same entry multiple times unless it is zero.
!       If the Field dimCount is less than the Grid dimCount then the default
!       gridToFieldMap will contain zeros for the rightmost entries. A zero
!       entry in the {\tt gridToFieldMap} indicates that the particular
!       Grid dimension will be replicating the Field across the DEs along
!       this direction.
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[maxHaloLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[maxHaloUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[name]}] 
!       Field name. 
! \item [{[iospec]}] 
!       I/O specification. ! NOT IMPLEMENTED
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOP
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype      ! Pointer to new field
    integer :: localrc                          !  Local error code
    logical :: rcpresent                        ! Return code present
    integer :: fieldDimCount, fieldUngriddedDimCount 
    integer :: gridDimCount, gridDimCount_norep
    integer :: grid_repdimcount
    integer :: fieldUndistDimCount 
    integer :: i
    integer :: localGridToFieldMap(ESMF_MAXDIM)
    integer :: localMaxHaloLWidth (ESMF_MAXDIM)
    integer :: localMaxHaloUWidth (ESMF_MAXDIM)
    logical :: flipflop(ESMF_MAXDIM)
    type(ESMF_StaggerLoc)  :: localStaggerLoc
    type(ESMF_IndexFlag)   :: g_indexflag

    ! Initialize pointers
    localrc = ESMF_RC_NOT_IMPL
    rcpresent = .FALSE.
    nullify(ftype)
    nullify(ESMF_FieldCreateFromArraySpec%ftypep)

    ! Initialize return code   
    if(present(rc)) then
      rcpresent=.TRUE.
      rc = ESMF_RC_NOT_IMPL
    endif

    ! check init status of input parameters
    ESMF_INIT_CHECK_DEEP(ESMF_GridGetInit,grid,rc)
    ESMF_INIT_CHECK_SHALLOW(ESMF_ArraySpecGetInit, ESMF_ArraySpecInit, arrayspec)

    ! Get rank of proposed Field.  
    call ESMF_ArraySpecGet(arrayspec, rank=fieldDimCount, rc=localrc) 
    if (ESMF_LogMsgFoundError(localrc, &  
         ESMF_ERR_PASSTHRU, &  
         ESMF_CONTEXT, rc)) return   

    ! Get number of grid dimensions, number  
    ! of distributed grid dimensions, distgrid,  
    ! number of ungridded Field dimensions,  
    ! and number of undistributed Field Dimensions  
    call ESMF_GridGet(grid, dimCount=gridDimCount, indexFlag=g_indexflag, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &  
        ESMF_ERR_PASSTHRU, &  
        ESMF_CONTEXT, rc)) return  

    if (present(indexflag)) then
      if(.not. (g_indexflag .eq. indexflag)) then
        call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
             "- user specified indexflag must be identical with Grid indexflag", &  
               ESMF_CONTEXT, rc)   
        return
      endif
    endif
 
    ! Set default gridToFieldMap
    grid_repdimcount = 0
    if (present(gridToFieldMap)) then  
       localGridToFieldMap(1:gridDimCount) = &  
         gridToFieldMap (1:gridDimCount)  
       do i = 1, size(gridToFieldMap)
           if(gridToFieldMap(i) == 0) grid_repdimcount = grid_repdimcount + 1
       enddo
    else  
      do i = 1, gridDimCount  
        localGridToFieldMap(i) = i  
      enddo  
    endif  
    gridDimCount_norep = gridDimCount - grid_repdimcount

    if(fieldDimCount .lt. gridDimCount_norep) then  
        call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
             "- farray rank must be greater than or equal to grid rank", &  
               ESMF_CONTEXT, rc)   
        return
    endif  

    if(fieldDimCount .gt. gridDimCount_norep) then
      if( (.not. present(ungriddedLBound)) .or. &
          (.not. present(ungriddedUBound)) ) then
        call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
         "- ungridded bounds must be present when Field has ungridded dimension(s)", &
           ESMF_CONTEXT, rc)
        return
      endif
    endif

     ! gridToFieldMap elements must be in range 0...fieldRank and unique  
     ! algorithm to check element uniqueness:  
     !   run time: O(ESMF_MAXDIM)  
     !   memory:   O(2*ESMF_MAXDIM)  
     !          or O(ESMF_MAXDIM+ESMF_MAXDIM/sizeof(integer)) with bitvector  
     flipflop = .false.  
     do i = 1, gridDimCount  
        if(localGridToFieldMap(i) .lt. 0 .and. &  
          localGridToFieldMap(i) .gt. fieldDimCount) then  
            call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &   
                  "- gridToFieldMap element must be within range 0...array rank", &  
                    ESMF_CONTEXT, rc)   
            return  
        endif  
        if(localGridToFieldMap(i) /= 0) then
            if(flipflop(localGridToFieldMap(i))) then  
                call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &   
                      "- gridToFieldMap element must be unique", &  
                        ESMF_CONTEXT, rc)   
                return  
            endif  
            flipflop(localGridToFieldMap(i)) = .true.  
        endif
     enddo  
 
    fieldUngriddedDimCount = fieldDimCount-gridDimCount + grid_repdimcount 
    fieldUndistDimCount = fieldDimCount-gridDimCount + grid_repdimcount 
 
    ! Error Check Input  
    if (present(gridToFieldMap)) then   
        if (size(gridToFieldMap) .ne. gridDimCount) then  
            call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
              "- gridToFieldMap size must equal to grid_rank", &  
                ESMF_CONTEXT, rc)   
            return  
        endif  
    endif  
 
    if (present(ungriddedLBound)) then   
       if (size(ungriddedLBound) .ne. fieldUngriddedDimCount) then  
          call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
               "- ungriddedLBound size must equal to array_rank-grid_rank", &  
               ESMF_CONTEXT, rc)   
          return  
       endif  
    endif  
 
    if (present(ungriddedUBound)) then   
       if (size(ungriddedUBound) .ne. fieldUngriddedDimCount) then  
          call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
                 "- ungriddedUBound size must equal to array_rank-grid_rank", &  
                 ESMF_CONTEXT, rc)   
          return  
       endif  
    endif  
 
    if (present(maxHaloLWidth)) then   
        if (size(maxHaloLWidth) .ne. gridDimCount_norep) then  
            call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
              "- maxHaloLWidth must equal to gridded dimCount", &  
                ESMF_CONTEXT, rc)   
            return  
        endif  
    endif  
 
    if (present(maxHaloUWidth)) then   
       if (size(maxHaloUWidth) .ne. gridDimCount_norep) then  
           call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
              "- maxHaloUWidth must equal to gridded dimCount", &  
                ESMF_CONTEXT, rc)   
           return  
       endif  
    endif  
 
    ! Set default values.  
    if (present(staggerloc)) then  
       localStaggerloc = staggerloc  
    else  
       localStaggerLoc = ESMF_STAGGERLOC_CENTER  
    endif  
 
     if(present(maxHaloLWidth)) then  
       localMaxHaloLWidth(1:gridDimCount_norep) = &  
          maxHaloLWidth (1:gridDimCount_norep)  
     else  
          localMaxHaloLWidth = 0  
     endif  
 
     if(present(maxHaloUWidth)) then  
       localMaxHaloUWidth(1:gridDimCount_norep) = &  
          maxHaloUWidth (1:gridDimCount_norep)  
     else  
          localMaxHaloUWidth = 0  
     endif  

    ! allocate Fieldtype
    allocate(ftype, stat=localrc)
    if (ESMF_LogMsgFoundAllocError(localrc, &
                                "Allocating Field Type", &
                                ESMF_CONTEXT, rc)) return

    call ESMF_FieldInitialize(ftype, rc=localrc) 
    if (ESMF_LogMsgFoundError(localrc, ESMF_ERR_PASSTHRU, &
                                     ESMF_CONTEXT, rc)) return

    ! Call construction method to allocate and initialize field internals.
    call ESMF_FieldConstructIANew(ftype, grid, arrayspec, &
                                localStaggerloc, localGridToFieldMap(1:gridDimCount), ungriddedLBound, &
                                ungriddedUBound, localMaxHaloLWidth(1:gridDimCount_norep), &
                                localMaxHaloUWidth(1:gridDimCount_norep), name, &
                                iospec, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
   
    ! Set return values.
    ESMF_FieldCreateFromArraySpec%ftypep => ftype
    ESMF_INIT_SET_CREATED(ESMF_FieldCreateFromArraySpec)

    call ESMF_FieldValidate(ESMF_FieldCreateFromArraySpec, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) then
        ESMF_FieldCreateFromArraySpec%ftypep%fieldstatus = ESMF_STATUS_INVALID
        return
    endif

    if(rcpresent) rc = ESMF_SUCCESS

  end function ESMF_FieldCreateFromArraySpec
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldCreateFromArray"
!BOP
! !IROUTINE: ESMF_FieldCreate - Create a Field from Grid and Array

! !INTERFACE:
  ! Private name; call using ESMF_FieldCreate()
  function ESMF_FieldCreateFromArray(grid, array, copyflag, staggerloc, &
    gridToFieldMap, ungriddedLBound, ungriddedUBound, maxHaloLWidth, &
    maxHaloUWidth, name, iospec, rc)
!
! !RETURN VALUE:
    type(ESMF_Field) :: ESMF_FieldCreateFromArray    
!
! !ARGUMENTS:
    type(ESMF_Grid), intent(in) :: grid                
    type(ESMF_Array), intent(in) :: array              
    type(ESMF_CopyFlag), intent(in), optional :: copyflag       
    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
    integer, intent(in), optional :: gridToFieldMap(:)    
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)
    integer, intent(in), optional :: maxHaloLWidth(:)
    integer, intent(in), optional :: maxHaloUWidth(:)
    character (len = *), intent(in), optional :: name   
    type(ESMF_IOSpec), intent(in), optional :: iospec   
    integer, intent(out), optional :: rc                
!
! !DESCRIPTION:
! Create an {\tt ESMF\_Field}.  This version of creation
! assumes the data exists already and is being
! passed in through an {\tt ESMF\_Array}.  For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:create_grid_array}.
! 
! The arguments are:
! \begin{description}
! \item [grid] 
!       {\tt ESMF\_Grid} object. 
! \item [array]
!       {\tt ESMF\_Array} object.
! \item [{[copyflag]}]
!       Indicates whether to copy the {\tt array} or reference it directly.
!       For valid values see \ref{opt:copyflag}.  The default is
!       {\tt ESMF\_DATA\_REF}.
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is ESMF\_STAGGERLOC\_CENTER.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the {\tt array} by
!       specifying the appropriate {\tt array} dimension index. The
!       default is to map all of the {\tt grid}|s dimensions against the
!       lowest dimensions of the {\tt array} in sequence, i.e.
!       {\tt gridToFieldMap} = (/1,2,3,.../).
!       Unmapped {\tt array} dimensions are undistributed Field dimensions.
!       All {\tt gridToFieldMap} entries must be greater than or equal
!       to zero and smaller than or equal to the Field dimCount. It is erroneous
!       to specify the same entry multiple times unless it is zero.
!       If the Field dimCount is less than the Grid dimCount then the default
!       gridToFieldMap will contain zeros for the rightmost entries. A zero
!       entry in the {\tt gridToFieldMap} indicates that the particular
!       Grid dimension will be replicating the Field across the DEs along
!       this direction.
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[maxHaloLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[maxHaloUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[name]}] 
!       Field name. 
! \item [{[iospec]}] 
!       I/O specification. NOT IMPLEMENTED
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOP
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype  ! Pointer to new field
    integer :: localrc                       !  Local error code
    logical :: rcpresent                    ! Return code present

    integer :: fieldDimCount, fieldUngriddedDimCount 
    integer :: gridDimCount, gridDimCount_norep
    integer :: grid_repdimcount
    integer :: fieldUndistDimCount 
    integer :: i
    integer :: localGridToFieldMap(ESMF_MAXDIM)
    integer :: localMaxHaloLWidth (ESMF_MAXDIM)
    integer :: localMaxHaloUWidth (ESMF_MAXDIM)
    logical :: flipflop(ESMF_MAXDIM)
    type(ESMF_StaggerLoc)  :: localStaggerLoc
    type(ESMF_CopyFlag)    :: l_copyflag
    integer :: l_uglb(ESMF_MAXDIM), l_ugub(ESMF_MAXDIM)
    type (ESMF_IndexFlag) :: arrayIndexFlag, gridIndexFlag    

    ! Initialize pointers
    localrc = ESMF_RC_NOT_IMPL
    rcpresent = .FALSE.
    nullify(ftype)
    nullify(ESMF_FieldCreateFromArray%ftypep)

    ! Initialize return code   
    if(present(rc)) then
      rcpresent = .TRUE. 
      rc = ESMF_RC_NOT_IMPL
    endif     

    ! check init status of input parameters
    ESMF_INIT_CHECK_DEEP(ESMF_GridGetInit,grid,rc)
    ESMF_INIT_CHECK_DEEP(ESMF_ArrayGetInit,array,rc)

    ! Get rank of proposed Field.  
    call ESMF_ArrayGet(array, rank=fieldDimCount, & 
                       indexflag=arrayIndexFlag, rc=localrc) 
    if (ESMF_LogMsgFoundError(localrc, &  
         ESMF_ERR_PASSTHRU, &  
         ESMF_CONTEXT, rc)) return   

    ! Get number of grid dimensions, number  
    ! of distributed grid dimensions, distgrid,  
    ! number of ungridded Field dimensions,  
    ! and number of undistributed Field Dimensions  
    call ESMF_GridGet(grid, dimCount=gridDimCount, &
                      indexflag=gridIndexFlag, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &  
        ESMF_ERR_PASSTHRU, &  
        ESMF_CONTEXT, rc)) return  
 
    ! Set default values.  
    if (present(staggerloc)) then  
       localStaggerloc = staggerloc  
    else  
       localStaggerLoc = ESMF_STAGGERLOC_CENTER  
    endif  
    
    if (present(copyflag)) then
        l_copyflag = copyflag
    else
        l_copyflag = ESMF_DATA_REF
    endif
 
    ! Set default gridToFieldMap
    grid_repdimcount = 0
    if (present(gridToFieldMap)) then  
       localGridToFieldMap(1:gridDimCount) = &  
         gridToFieldMap (1:gridDimCount)  
       do i = 1, size(gridToFieldMap)
           if(gridToFieldMap(i) == 0) grid_repdimcount = grid_repdimcount + 1
       enddo
    else  
      do i = 1, gridDimCount  
        localGridToFieldMap(i) = i  
      enddo  
    endif  
    gridDimCount_norep = gridDimCount - grid_repdimcount

    if(fieldDimCount .lt. gridDimCount_norep) then  
        call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
             "- farray rank must be greater than or equal to grid rank", &  
               ESMF_CONTEXT, rc)   
        return
    endif  

    if(fieldDimCount .gt. gridDimCount_norep) then
      if( (.not. present(ungriddedLBound)) .or. &
          (.not. present(ungriddedUBound)) ) then
        call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
         "- ungridded bounds must be present when Field has ungridded dimension(s)", &
           ESMF_CONTEXT, rc)
        return
      endif
    endif
 
     ! gridToFieldMap elements must be in range 0...fieldRank and unique  
     ! algorithm to check element uniqueness:  
     !   run time: O(ESMF_MAXDIM)  
     !   memory:   O(2*ESMF_MAXDIM)  
     !          or O(ESMF_MAXDIM+ESMF_MAXDIM/sizeof(integer)) with bitvector  
     flipflop = .false.  
     do i = 1, gridDimCount  
        if(localGridToFieldMap(i) .lt. 0 .and. &  
          localGridToFieldMap(i) .gt. fieldDimCount) then  
            call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &   
                  "- gridToFieldMap element must be within range 0...array rank", &  
                    ESMF_CONTEXT, rc)   
            return  
        endif  
        if(localGridToFieldMap(i) /= 0) then
            if(flipflop(localGridToFieldMap(i))) then  
                call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &   
                      "- gridToFieldMap element must be unique", &  
                        ESMF_CONTEXT, rc)   
                return  
            endif  
            flipflop(localGridToFieldMap(i)) = .true.  
        endif
     enddo  
 
    fieldUngriddedDimCount = fieldDimCount-gridDimCount + grid_repdimcount 
    fieldUndistDimCount = fieldDimCount-gridDimCount + grid_repdimcount 
 
    ! Error Check Input  
    if (present(gridToFieldMap)) then   
        if (size(gridToFieldMap) .ne. gridDimCount) then  
            call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
              "- gridToFieldMap size must equal to grid_rank", &  
                ESMF_CONTEXT, rc)   
            return  
        endif  
    endif  
 
    if (present(ungriddedLBound)) then   
       if (size(ungriddedLBound) .ne. fieldUngriddedDimCount) then  
          call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
               "- ungriddedLBound size must equal to array_rank-grid_rank", &  
               ESMF_CONTEXT, rc)   
          return  
       endif  
    endif  
 
    if (present(ungriddedUBound)) then   
       if (size(ungriddedUBound) .ne. fieldUngriddedDimCount) then  
          call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
                 "- ungriddedUBound size must equal to array_rank-grid_rank", &  
                 ESMF_CONTEXT, rc)   
          return  
       endif  
    endif  
 
    if (present(maxHaloLWidth)) then   
        if (size(maxHaloLWidth) .ne. gridDimCount_norep) then  
            call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
              "- maxHaloLWidth must equal to gridded dimCount", &  
                ESMF_CONTEXT, rc)   
            return  
        endif  
    endif  
 
    if (present(maxHaloUWidth)) then   
       if (size(maxHaloUWidth) .ne. gridDimCount_norep) then  
           call ESMF_LogMsgSetError(ESMF_RC_ARG_SIZE, &   
              "- maxHaloUWidth must equal to gridded dimCount", &  
                ESMF_CONTEXT, rc)   
           return  
       endif  
    endif  
 
    if (.not.(arrayIndexFlag .eq. gridIndexFlag)) then
        call ESMF_LogMsgSetError(ESMF_RC_ARG_VALUE, &
         "- Array indexflag must be the same as the Grid indexflag", &
           ESMF_CONTEXT, rc)
        return
    endif

     if(present(maxHaloLWidth)) then  
       localMaxHaloLWidth(1:gridDimCount_norep) = &  
          maxHaloLWidth (1:gridDimCount_norep)  
     else  
          localMaxHaloLWidth = 0  
     endif  
 
     if(present(maxHaloUWidth)) then  
       localMaxHaloUWidth(1:gridDimCount_norep) = &  
          maxHaloUWidth (1:gridDimCount_norep)  
     else  
          localMaxHaloUWidth = 0  
     endif  

    if(present(ungriddedLBound)) then
        l_uglb(1:size(ungriddedLBound)) = ungriddedLBound
    else
        l_uglb = -1
    endif
    if(present(ungriddedUBound)) then
        l_ugub(1:size(ungriddedUBound)) = ungriddedUBound
    else
        l_ugub = -1
    endif

    allocate(ftype, stat=localrc)
    if (ESMF_LogMsgFoundAllocError(localrc, "Allocating Field information", &
                                     ESMF_CONTEXT, rc)) return
    call ESMF_FieldInitialize(ftype, rc=localrc) 
    if (ESMF_LogMsgFoundAllocError(localrc, "Default initialize Field", &
                                     ESMF_CONTEXT, rc)) return

    ! Call construction method to allocate and initialize field internals.
    call ESMF_FieldConstructIANewArray(ftype, grid, array, l_copyflag, localstaggerloc, &
                                     localgridToFieldMap, l_uglb, l_ugub, &
                                     localmaxHaloLWidth, localmaxHaloUWidth, name, &
                                     iospec, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
   

    ! Set return values.
    ESMF_FieldCreateFromArray%ftypep => ftype
    ESMF_INIT_SET_CREATED(ESMF_FieldCreateFromArray)

    call ESMF_FieldValidate(ESMF_FieldCreateFromArray, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) then
        ESMF_FieldCreateFromArray%ftypep%fieldstatus = ESMF_STATUS_INVALID
        return
    endif

    if(rcpresent) rc = ESMF_SUCCESS

  end function ESMF_FieldCreateFromArray
!------------------------------------------------------------------------------



!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldCreateEmpty"
!BOP
! !IROUTINE: ESMF_FieldCreateEmpty - Create an empty Field (no Grid)

! !INTERFACE:
  function ESMF_FieldCreateEmpty(name, iospec, rc)
!
! !RETURN VALUE:
    type(ESMF_Field) :: ESMF_FieldCreateEmpty 
!
! !ARGUMENTS:
    character (len = *), intent(in), optional :: name  
    type(ESMF_IOSpec), intent(in), optional :: iospec  
    integer, intent(out), optional :: rc               
!
! !DESCRIPTION:
! This version of {\tt ESMF\_FieldCreate} builds an empty {\tt ESMF\_Field} 
! and depends on later calls to add an {\tt ESMF\_Grid} and {\tt ESMF\_Array} to 
! it. Attributes can be added to an empty Field object. For an example and
! associated documentation using this method see Section 
! \ref{sec:field:usage:create_empty_setcommit}.
!
!
! The arguments are:
! \begin{description}
! \item [{[name]}] 
!       Field name. 
! \item [{[iospec]}] 
!       I/O specification. ! NOT IMPLEMENTED 
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!
!EOP
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype  ! Pointer to new field
    integer :: localrc                     
    
    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL
    nullify(ftype)
    nullify(ESMF_FieldCreateEmpty%ftypep)

    allocate(ftype, stat=localrc)
    if (ESMF_LogMsgFoundAllocError(localrc, "Allocating Field information", &
                                     ESMF_CONTEXT, rc)) return
    call ESMF_FieldInitialize(ftype, rc=localrc) 
    if (ESMF_LogMsgFoundAllocError(localrc, "Default initialize Field", &
                                     ESMF_CONTEXT, rc)) return

    ! Call field construction method
    call ESMF_FieldConstructEmpty(ftype, name, iospec, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    ! Set return values.
    ESMF_FieldCreateEmpty%ftypep => ftype

    ESMF_INIT_SET_CREATED(ESMF_FieldCreateEmpty)

    call ESMF_FieldValidate(ESMF_FieldCreateEmpty, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    if (present(rc)) rc = ESMF_SUCCESS

  end function ESMF_FieldCreateEmpty
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
! TODO:FIELDINTEGRATION Decide if FieldCreateNoArray is still needed
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldCreateNoDataPtr"
!BOPI
! !IROUTINE: ESMF_FieldCreateNoData - Create a Field with no associated data buffer
! !INTERFACE:
  ! Private name; call using ESMF_FieldCreateNoData()
  function ESMF_FieldCreateNoDataPtr(grid, arrayspec, staggerloc, &
    gridToFieldMap, ungriddedLBound, ungriddedUBound, maxHaloLWidth, &
    maxHaloUWidth, name, iospec, rc)
!
! !RETURN VALUE:
    type(ESMF_Field) :: ESMF_FieldCreateNoDataPtr   
!
! !ARGUMENTS:
   type(ESMF_Grid) :: grid                 
   type(ESMF_ArraySpec), intent(inout) :: arrayspec    
   type(ESMF_StaggerLoc), intent(in), optional ::staggerloc 
   integer, intent(in), optional :: gridToFieldMap(:)    
   integer, intent(in), optional :: ungriddedLBound(:)
   integer, intent(in), optional :: ungriddedUBound(:)
   integer, intent(in), optional :: maxHaloLWidth(:)
   integer, intent(in), optional :: maxHaloUWidth(:)
   character (len=*), intent(in), optional :: name    
   type(ESMF_IOSpec), intent(in), optional :: iospec  
   integer, intent(out), optional :: rc               
!
! !DESCRIPTION:
! An interface function to {\tt ESMF\_FieldCreateNoData()}.
! Creates an {\tt ESMF\_Field} in its entirety except for the assignment
! or allocation of an associated raw data buffer.
!
! The arguments are:
! \begin{description}
! \item [grid] 
!       Pointer to an {\tt ESMF\_Grid} object. 
! \item [arrayspec]
!       Data specification. 
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid 
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}.The default
!       value is ESMF\_STAGGERLOC\_CENTER.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the Field by
!       specifying the appropriate Field dimension index. The
!       default is to map all of the {\tt grid}|s dimensions against the
!       lowest dimensions of the Field in sequence, i.e.
!       {\tt gridToFieldMap} = (/1,2,3,.../).
!       Unmapped Field dimensions are undistributed Field dimensions.
!       All {\tt gridToFieldMap} entries must be greater than or equal
!       to zero and smaller than or equal to the Field dimCount. It is erroneous
!       to specify the same entry multiple times unless it is zero.
!       If the Field dimCount is less than the Grid dimCount then the default
!       gridToFieldMap will contain zeros for the rightmost entries. A zero
!       entry in the {\tt gridToFieldMap} indicates that the particular
!       Grid dimension will be replicating the Field across the DEs along
!       this direction.
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[maxHaloLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[maxHaloUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[name]}] 
!       Field name. 
! \item [{[iospec]}] 
!       I/O specification. ! NOT IMPLEMENTED
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!
!EOPI
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype      ! Pointer to new field
    integer :: localrc                         
   
    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL
    nullify(ftype)
    nullify(ESMF_FieldCreateNoDataPtr%ftypep)

#if 0 
    allocate(ftype, stat=localrc)
    if (ESMF_LogMsgFoundAllocError(localrc, "Allocating Field information", &
                                     ESMF_CONTEXT, rc)) return

    call ESMF_FieldInitialize(ftype, rc=localrc) 
    if (ESMF_LogMsgFoundAllocError(localrc, "Default initialize Field", &
                                     ESMF_CONTEXT, rc)) return

    ! Call construction method to build field internals.
    call ESMF_FieldConstructNoDataPtr(ftype, grid, arrayspec, staggerloc, &
                                     gridToFieldMap, ungriddedLBound, &
                                     ungriddedUBound, maxHaloLWidth, &
                                     maxHaloUWidth, name, iospec, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    ! Set return values.
    ESMF_FieldCreateNoDataPtr%ftypep => ftype

    ESMF_INIT_SET_CREATED(ESMF_FieldCreateNoDataPtr)
      
    call ESMF_FieldValidate(ESMF_FieldCreateNoDataPtr, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    if (present(rc)) rc = ESMF_SUCCESS
#endif

  end function ESMF_FieldCreateNoDataPtr
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
! TODO:FIELDINTEGRATION Decide if FieldCreateNoDataArray is still needed
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldCreateNoDataArray"
!BOPI
! !IROUTINE: ESMF_FieldCreateNoData - Create a Field with no associated Array object
! !INTERFACE:
  ! Private name; call using ESMF_FieldCreateNoData()
  function ESMF_FieldCreateNoDataArray(grid, staggerloc, name, iospec, rc)
!
! !RETURN VALUE:
    type(ESMF_Field) :: ESMF_FieldCreateNoDataArray 
!
! !ARGUMENTS:
    type(ESMF_Grid) :: grid                 
    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
    character (len=*), intent(in), optional :: name    
    type(ESMF_IOSpec), intent(in), optional :: iospec  
    integer, intent(out), optional :: rc               
!
! !DESCRIPTION:
! An interface function to {\tt ESMF\_FieldCreateNoData()}.
! This version of {\tt ESMF\_FieldCreate} builds an {\tt ESMF\_Field} 
! and depends on a later call to add an {\tt ESMF\_Array} to it.  
!
! The arguments are:
! \begin{description}
! \item [grid] 
!       Pointer to an {\tt ESMF\_Grid} object. 
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid 
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is ESMF\_STAGGERLOC\_CENTER.
! \item [{[name]}] 
!       Field name. 
! \item [{[iospec]}] 
!       I/O specification. ! NOT IMPLEMENTED 
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!
!EOPI
!------------------------------------------------------------------------------
    type(ESMF_FieldType), pointer :: ftype  ! Pointer to new field
    integer :: localrc                    
    
    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL
    nullify(ftype)
    nullify(ESMF_FieldCreateNoDataArray%ftypep)

#if 0
    allocate(ftype, stat=localrc)
    if (ESMF_LogMsgFoundAllocError(localrc, "Allocating Field information", &
                                     ESMF_CONTEXT, rc)) return
    call ESMF_FieldInitialize(ftype, rc=localrc) 
    if (ESMF_LogMsgFoundAllocError(localrc, "Default initialize Field", &
                                     ESMF_CONTEXT, rc)) return

    ! Call field construction method
    call ESMF_FieldConstructNoArray(ftype, grid, staggerloc, &
                                    name, &
                                    iospec, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    ! Set return values.
    ESMF_FieldCreateNoDataArray%ftypep => ftype

    ESMF_INIT_SET_CREATED(ESMF_FieldCreateNoDataArray)

    call ESMF_FieldValidate(ESMF_FieldCreateNoDataArray, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    if (present(rc)) rc = ESMF_SUCCESS
#endif

  end function ESMF_FieldCreateNoDataArray
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldDestroy"
!BOP
! !IROUTINE: ESMF_FieldDestroy - Free all resources associated with a Field
! !INTERFACE:
  subroutine ESMF_FieldDestroy(field, rc)
!
! !ARGUMENTS:
    type(ESMF_Field) :: field       
    integer, intent(out), optional :: rc     
!
! !DESCRIPTION:
! Releases all resources associated with the {\tt ESMF\_Field}.
! 
! The arguments are:
! \begin{description}
! \item [field]
!       {\tt ESMF\_Field} object.
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!
!EOP
!------------------------------------------------------------------------------
    ! Local variables
    integer :: localrc                         

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! check input variables
    ESMF_INIT_CHECK_DEEP(ESMF_FieldGetInit,field,rc)

    ! TODO: If already destroyed or never created, return ok?
    ! (should it be ok to destroy the same object twice without complaint?)
    ! for now, no, you can't delete an object twice 
    call ESMF_FieldValidate(field, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                               ESMF_ERR_PASSTHRU, &
                               ESMF_CONTEXT, rc)) return

    ! Destruct all field internals and then free field memory.
    call ESMF_FieldDestruct(field%ftypep, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
         
    if (associated(field%ftypep)) then
       deallocate(field%ftypep, stat=localrc)
       if (ESMF_LogMsgFoundAllocError(localrc, "Deallocating Field", &
                                     ESMF_CONTEXT, rc)) return
    endif 
    ESMF_INIT_SET_DELETED(field)

    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldDestroy
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldConstructIANew"
!BOPI
! !IROUTINE: ESMF_FieldConstructIANew - Construct the internals of a Field

! !INTERFACE:
  subroutine ESMF_FieldConstructIANew(ftype, grid, arrayspec, &
    staggerloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
    maxHaloLWidth, maxHaloUWidth, name, iospec, rc)
!
! !ARGUMENTS:
    type(ESMF_FieldType), pointer :: ftype 
    type(ESMF_Grid) :: grid               
    type(ESMF_ArraySpec), intent(inout)         :: arrayspec
    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
    integer, intent(in), optional :: gridToFieldMap(:)
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)      
    integer, intent(in), optional :: maxHaloLWidth(:)
    integer, intent(in), optional :: maxHaloUWidth(:)
    character (len=*), intent(in), optional :: name
    type(ESMF_IOSpec), intent(in), optional :: iospec 
    integer, intent(out), optional :: rc              
!
! !DESCRIPTION:
! Constructs all {\tt ESMF\_Field} internals, including the allocation
! of a data {\tt ESMF\_Array}.  TODO: this is missing a counts argument,
! which is required if the arrayspec rank is greater than the {\tt grid} rank.
! Either that, or we must enforce that a datamap comes in, and it
! contains the counts for non-grid dims.
!
! The arguments are:
! \begin{description}
! \item [ftype]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [grid] 
!       {\tt ESMF\_Grid} object. 
! \item [arrayspec]
!       Data specification.
! \item [{[staggerloc]}]
!       Stagger location of data in grid cells.  For valid 
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}.The default
!       value is ESMF\_STAGGERLOC\_CENTER.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the Field by
!       specifying the appropriate Field dimension index. The
!       default is to map all of the {\tt grid}|s dimensions against the
!       lowest dimensions of the Field in sequence, i.e.
!       {\tt gridToFieldMap} = (/1,2,3,.../).
!       Unmapped Field dimensions are undistributed Field dimensions.
!       All {\tt gridToFieldMap} entries must be greater than or equal
!       to zero and smaller than or equal to the Field dimCount. It is erroneous
!       to specify the same entry multiple times unless it is zero.
!       If the Field dimCount is less than the Grid dimCount then the default
!       gridToFieldMap will contain zeros for the rightmost entries. A zero
!       entry in the {\tt gridToFieldMap} indicates that the particular
!       Grid dimension will be replicating the Field across the DEs along
!       this direction.
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[maxHaloLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[maxHaloUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[name]}] 
!       {\tt ESMF\_Field} name. 
! \item [{[iospec]}] 
!       I/O specification. ! NOT IMPLEMENTED 
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
!       
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc
    type(ESMF_Array) :: array                  
    type(ESMF_TypeKind) :: typekind
    integer :: i, arrayRank, gridRank, gridRank_norep

    ! Initialize return code   
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    call ESMF_BaseCreate(ftype%base, "Field", name, 0, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    call ESMF_ArraySpecGet(arrayspec, rank=arrayRank, typekind=typekind, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    call ESMF_GridGet(grid, dimCount=gridRank, &
                      rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    gridRank_norep = gridRank
    if(present(gridToFieldMap)) then
        do i = 1, gridRank
            if(gridToFieldMap(i) == 0) gridRank_norep = gridRank_norep - 1
        enddo
    endif

    if (arrayRank .lt. gridRank_norep) then
       call ESMF_LogMsgSetError(ESMF_RC_ARG_RANK, &
                               "Array rank must be equal to or greater than Grid rank", &
                                ESMF_CONTEXT, rc) 
       return
    endif

    ! Make sure localStaggerloc has a value before Array create call
    if (present(staggerloc)) then
        ftype%staggerloc = staggerloc
    else
        ftype%staggerloc = ESMF_STAGGERLOC_CENTER
    endif

! TODO:FIELDINTEGRATION Check that Field halo is same rank as distgrid dim count

    array = ESMF_ArrayCreateFromGrid(grid, staggerloc=staggerloc, name=name, &
      typekind=typekind, gridToArrayMap=gridToFieldMap, ungriddedLBound=ungriddedLBound, &
      ungriddedUBound=ungriddedUBound, totalLWidth=maxHaloLWidth, totalUWidth=maxHaloUWidth, &
      rc=localrc) 

    if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return

    ! Default of gridToFieldMap should be {1,2,3...}
    if (.not. present(gridToFieldMap)) then
        do i = 1, ESMF_MAXDIM
          ftype%gridToFieldMap(i) = i
        enddo
    else
       ftype%gridToFieldMap(1:size(gridToFieldMap)) = gridToFieldMap
    endif

    if(present(ungriddedLBound)) &
       ftype%ungriddedLBound(1:size(ungriddedLBound)) = ungriddedLBound
    if(present(ungriddedUBound)) &
       ftype%ungriddedUBound(1:size(ungriddedUBound)) = ungriddedUBound
    if(present(maxHaloLWidth)) &
       ftype%maxHaloLWidth(1:size(maxHaloLWidth)) = maxHaloLWidth
    if(present(maxHaloUWidth)) &
       ftype%maxHaloUWidth(1:size(maxHaloUWidth)) = maxHaloUWidth

    ftype%array = array
    ftype%array_internal = .true.
    ftype%datastatus = ESMF_STATUS_READY
    ftype%grid  = grid
    ftype%gridstatus = ESMF_STATUS_READY
    ftype%fieldstatus = ESMF_STATUS_READY 

    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldConstructIANew
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldConstructIANewArray"
!BOPI
! !IROUTINE: ESMF_FieldConstructIANewArray - Construct the internals of a Field

! !INTERFACE:
  subroutine ESMF_FieldConstructIANewArray(ftype, grid, array, copyflag, &
    staggerloc, gridToFieldMap, ungriddedLBound, ungriddedUBound, &
    maxHaloLWidth, maxHaloUWidth, name, iospec, rc)
!
! !ARGUMENTS:
    type(ESMF_FieldType), pointer :: ftype 
    type(ESMF_Grid) :: grid               
    type(ESMF_Array), intent(in) :: array     
    type(ESMF_CopyFlag), intent(in) :: copyflag
    type(ESMF_StaggerLoc), intent(in) :: staggerloc 
    integer, intent(in) :: gridToFieldMap(:)
    integer, intent(in) :: ungriddedLBound(:)
    integer, intent(in) :: ungriddedUBound(:)      
    integer, intent(in) :: maxHaloLWidth(:)
    integer, intent(in) :: maxHaloUWidth(:)
    character (len=*), intent(in), optional :: name
    type(ESMF_IOSpec), intent(in), optional :: iospec 
    integer, intent(out), optional :: rc              
!
! !DESCRIPTION:
! Constructs all {\tt ESMF\_Field} internals, including the allocation
! of a data {\tt ESMF\_Array}.  
!
! The arguments are:
! \begin{description}
! \item [ftype]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [grid] 
!       {\tt ESMF\_Grid} object. 
! \item [array]
!       Data. 
! \item [copyflag]
!       Whether to copy the existing data space or reference directly. Valid
!       values are {\tt ESMF\_DATA\_COPY} or {\tt ESMF\_DATA\_REF} (default).
! \item [staggerloc] 
!       Stagger location of data in grid cells.  For valid 
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is ESMF\_STAGGERLOC\_CENTER.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the Field by
!       specifying the appropriate Field dimension index. The
!       default is to map all of the {\tt grid}|s dimensions against the
!       lowest dimensions of the Field in sequence, i.e.
!       {\tt gridToFieldMap} = (/1,2,3,.../).
!       Unmapped Field dimensions are undistributed Field dimensions.
!       All {\tt gridToFieldMap} entries must be greater than or equal
!       to zero and smaller than or equal to the Field dimCount. It is erroneous
!       to specify the same entry multiple times unless it is zero.
!       If the Field dimCount is less than the Grid dimCount then the default
!       gridToFieldMap will contain zeros for the rightmost entries. A zero
!       entry in the {\tt gridToFieldMap} indicates that the particular
!       Grid dimension will be replicating the Field across the DEs along
!       this direction.
! \item [ungriddedLBound]
!       Lower bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [ungriddedUBound]
!       Upper bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [maxHaloLWidth]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [maxHaloUWidth]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[name]}] 
!       {\tt ESMF\_Field} name. 
! \item [{[iospec]}] 
!       I/O specification. ! NOT IMPLEMENTED 
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc 
    type(ESMF_ArraySpec) :: arrayspec
    type(ESMF_Array)     :: newarray
    type(ESMF_TypeKind)  :: typekind
    integer              :: arrayrank, i

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! this validates the grid already, no need to validate it first.
    call ESMF_FieldConstructNoArray(ftype, grid, staggerloc, &
                                    name=name, &
                                    iospec=iospec, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    ! make sure the array is a valid object first.
    call ESMF_ArrayValidate(array, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
    call ESMF_ArrayGet(array, typekind=typekind, &
        rank=arrayrank, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
    call ESMF_ArraySpecSet(arrayspec, typekind=typekind, &
        rank=arrayrank, rc=localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    ftype%staggerloc = staggerloc

    ftype%gridToFieldMap(1:size(gridToFieldMap)) = gridToFieldMap
 
    ftype%ungriddedLBound(1:size(ungriddedLBound)) = ungriddedLBound
    ftype%ungriddedUBound(1:size(ungriddedUBound)) = ungriddedUBound
    ftype%maxHaloLWidth(1:size(maxHaloLWidth)) = maxHaloLWidth
    ftype%maxHaloUWidth(1:size(maxHaloUWidth)) = maxHaloUWidth

    ! default copyflag value is ESMF_DATA_REF
    ftype%array_internal = .false.
    if(copyflag == ESMF_DATA_REF) then
        ftype%array = array
    else
        newarray = ESMF_ArrayCreate(array, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
        ftype%array = newarray
        ftype%array_internal = .true.
    endif
        
    ftype%datastatus = ESMF_STATUS_READY
    ftype%grid  = grid
    ftype%gridstatus = ESMF_STATUS_READY
    ftype%fieldstatus = ESMF_STATUS_READY 

    if (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldConstructIANewArray
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldConstructNoDataPtr"
!BOPI
! !IROUTINE: ESMF_FieldConstructNoDataPtr - Construct a Field with no associated buffer

! !INTERFACE:
  subroutine ESMF_FieldConstructNoDataPtr(ftype, grid, arrayspec, staggerloc, &
    gridToFieldMap, ungriddedLBound, ungriddedUBound, maxHaloLWidth, &
    maxHaloUWidth, name, iospec, rc)
!
! !ARGUMENTS:     
    type(ESMF_FieldType), pointer :: ftype                
    type(ESMF_Grid), intent(inout) :: grid               
    type(ESMF_ArraySpec), intent(inout) :: arrayspec     
    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
    integer, intent(in), optional :: gridToFieldMap(:)    
    integer, intent(in), optional :: ungriddedLBound(:)
    integer, intent(in), optional :: ungriddedUBound(:)
    integer, intent(in), optional :: maxHaloLWidth(:)
    integer, intent(in), optional :: maxHaloUWidth(:)
    character (len=*), intent(in), optional :: name
    type(ESMF_IOSpec), intent(in), optional :: iospec 
    integer, intent(out), optional :: rc              
!
! !DESCRIPTION:
! Constructs all {\tt ESMF\_Field} internals except for the assignment of 
! an associated data buffer.
!
! The arguments are:
! \begin{description}
! \item [ftype]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [grid] 
!       {\tt ESMF\_Grid} object. 
! \item [arrayspec]
!       Data specification. 
! \item [{[staggerloc]}] 
!       Stagger location of data in grid cells.  For valid 
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}. The default
!       value is ESMF\_STAGGERLOC\_CENTER.
! \item [{[gridToFieldMap]}]
!       List with number of elements equal to the
!       {\tt grid}|s dimCount.  The list elements map each dimension
!       of the {\tt grid} to a dimension in the Field by
!       specifying the appropriate Field dimension index. The
!       default is to map all of the {\tt grid}|s dimensions against the
!       lowest dimensions of the Field in sequence, i.e.
!       {\tt gridToFieldMap} = (/1,2,3,.../).
!       Unmapped Field dimensions are undistributed Field dimensions.
!       All {\tt gridToFieldMap} entries must be greater than or equal
!       to zero and smaller than or equal to the Field dimCount. It is erroneous
!       to specify the same entry multiple times unless it is zero.
!       If the Field dimCount is less than the Grid dimCount then the default
!       gridToFieldMap will contain zeros for the rightmost entries. A zero
!       entry in the {\tt gridToFieldMap} indicates that the particular
!       Grid dimension will be replicating the Field across the DEs along
!       this direction.
! \item [{[ungriddedLBound]}]
!       Lower bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedLBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[ungriddedUBound]}]
!       Upper bounds of the ungridded dimensions of the Field.
!       The number of elements in the {\tt ungriddedUBound} is equal to the number of ungridded
!       dimensions in the Field.  All ungridded dimensions of the
!       Field are also undistributed. When field dimension count is
!       greater than grid dimension count, both ungriddedLBound and ungriddedUBound
!       must be specified. When both are specified the values are checked
!       for consistency.  Note that the the ordering of
!       these ungridded dimensions is the same as their order in the Field.
! \item [{[maxHaloLWidth]}]
!       Lower bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloLWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should be max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ). Although the halo operation is not
!       implemented, the {\tt minHaloLWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method.
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[maxHaloUWidth]}]
!       Upper bound of halo region.  The size of this array is the number
!       of gridded dimensions in the Field.  However, ordering of the elements
!       needs to be the same as they appear in the Field.  Values default
!       to 0.  If values for maxHaloUWidth are specified they must be reflected in
!       the size of the Field.  That is, for each gridded dimension the
!       Field size should max( {\tt maxHaloLWidth} + {\tt maxHaloUWidth}
!       + {\tt computationalCount}, {\tt exclusiveCount} ).  Although the halo operation is not
!       implemented, the {\tt maxHaloUWidth} is checked for validity and stored
!       in preparation for the implementation of the halo method. 
!       HALO OPERATION NOT IMPLEMENTED
! \item [{[name]}] 
!       {\tt ESMF\_Field} name. 
! \item [{[iospec]}] 
!       I/O specification.  ! NOT IMPLEMENTED
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
  integer :: localrc
  integer :: gridRank, arrayRank

  ! Initialize
  localrc = ESMF_RC_NOT_IMPL
  if (present(rc)) rc = ESMF_RC_NOT_IMPL

  !TODO:FIELDINTEGRATION Complete implementation of FieldConstructNoDataPtr
#if 0
  if (present(staggerloc)) then
      ftype%staggerloc = staggerloc
  else
      ftype%staggerloc = ESMF_STAGGERLOC_CENTER
  endif

  ! Default of gridToFieldMap should be {1,2,3...}
  if (.not. present(gridToFieldMap)) then
      do i = 1, ESMF_MAXDIM
        ftype%gridToFieldMap(i) = i
      enddo
  else
     ftype%gridToFieldMap = gridToFieldMap
  end if

  if(present(ungriddedLBound)) &
     ftype%ungriddedLBound = ungriddedLBound
  if(present(ungriddedUBound)) &
     ftype%ungriddedUBound = ungriddedUBound
  if(present(maxHaloLWidth)) &
     ftype%maxHaloLWidth = maxHaloLWidth
  if(present(maxHaloUWidth)) &
     ftype%maxHaloUWidth = maxHaloUWidth

  ! Construct a default name if one is not given
  call ESMF_BaseCreate(ftype%base, "Field", name, 0, localrc)
  if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return

  ! Check to see grid is valid first.

  call ESMF_GridValidate(grid, localrc)
  if (ESMF_LogMsgFoundError(localrc, &
                              ESMF_ERR_PASSTHRU, &
                              ESMF_CONTEXT, rc)) return
  ftype%grid = grid
  ftype%gridstatus = ESMF_STATUS_READY

  call ESMF_GridGet(grid, dimCount=gridRank, rc=localrc)

  ! construct the array here - but TODO: we are missing the counts
  ! in case there are non-grid axes.  there has to be an additional
  ! counts array which contains counts for any data axes which is
  ! not associated with the grid.  e.g. for a 3d data array on a 2d grid,
  ! there would be counts(1).  for 4d data, counts(2).
  

  ! If I/O spec is present, copy it into the field object; otherwise just 
  ! initialize the I/O spec in the field object.
  if(present(iospec)) then
    !ESMF_IOSpecCopyInit(ftype%iospec, iospec, localrc)
    !if (ESMF_LogMsgFoundError(localrc, &
    !                          ESMF_ERR_PASSTHRU, &
    !                          ESMF_CONTEXT, rc)) return
  else 
    !ESMF_IOSpecInit(ftype%iospec, localrc)
    !if (ESMF_LogMsgFoundError(localrc, &
    !                          ESMF_ERR_PASSTHRU, &
    !                          ESMF_CONTEXT, rc)) return
  endif

  ftype%fieldstatus = ESMF_STATUS_READY

  if (present(rc)) rc = ESMF_SUCCESS
#endif
end subroutine ESMF_FieldConstructNoDataPtr
!------------------------------------------------------------------------------


! TODO:FIELDINTEGRATION Restore FieldConstructNoArray method
!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldConstructNoArray"
!BOPI
! !IROUTINE: ESMF_FieldConstructNoArray - Construct a Field with no associated Array

! !INTERFACE:
  subroutine ESMF_FieldConstructNoArray(ftype, grid, staggerloc, &
                                            name, iospec, rc)
!
! !ARGUMENTS:     
    type(ESMF_FieldType), pointer :: ftype   
    type(ESMF_Grid), intent(inout) :: grid                 
    type(ESMF_StaggerLoc), intent(in), optional :: staggerloc 
    character (len=*), intent(in), optional :: name    
    type(ESMF_IOSpec), intent(in), optional :: iospec  
    integer, intent(out), optional :: rc               
!
! !DESCRIPTION:
! Constructs an {\tt ESMF\_Field} except for its internal data {\tt ESMF\_Array}.
!
! The arguments are:
! \begin{description}
! \item [ftype]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [grid] 
!       {\tt ESMF\_Grid} object. 
! \item [{[staggerloc]}] 
!       Stagger location of data in grid cells.  For valid 
!       predefined values see Section \ref{sec:opt:staggerloc}.
!       To create a custom stagger location see Section
!       \ref{sec:usage:staggerloc:adv}.
!       If a stagger location is specified both as an argument
!       here as well as set in the {\tt datamap}, this takes priority.
! \item [{[datamap]}]
!       An {\tt ESMF\_FieldDataMap} which describes the mapping of 
!       data to the {\tt ESMF\_Grid}.
! \item [{[name]}] 
!       {\tt ESMF\_Field} name. 
! \item [{[iospec]}] 
!       I/O specification. ! NOT IMPLEMENTED 
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc
    integer :: gridRank

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    if (present(staggerloc)) then
        ftype%staggerloc = staggerloc
    else
        ftype%staggerloc = ESMF_STAGGERLOC_CENTER
    endif

    ! Construct a default name if one is not given
    call ESMF_BaseCreate(ftype%base, "Field", name, 0, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    ! Attach Grid
    call ESMF_GridValidate(grid, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
    ftype%grid = grid
    ftype%gridstatus = ESMF_STATUS_READY

    call ESMF_GridGet(ftype%grid, dimCount=gridRank, rc=localrc)
    
    ftype%fieldstatus = ESMF_STATUS_READY

    if  (present(rc)) rc = ESMF_SUCCESS
    
  end subroutine ESMF_FieldConstructNoArray
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldConstructEmpty"
!BOPI
! !IROUTINE: ESMF_FieldConstructEmpty - Construct a Field with no Grid or Array
!
! !INTERFACE:
  subroutine ESMF_FieldConstructEmpty(ftypep, name, iospec, rc)
!
! !ARGUMENTS:     
    type(ESMF_FieldType), pointer :: ftypep
    character (len = *), intent(in), optional :: name  
    type(ESMF_IOSpec), intent(in), optional :: iospec  
    integer, intent(out), optional :: rc               
!
! !DESCRIPTION:
! Constructs an empty {\tt ESMF\_Field}.
!
! The arguments are:
! \begin{description}
! \item [ftypep]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [{[name]}]
!       {\tt ESMF\_Field} name.
! \item [{[iospec]}]
!       {\tt ESMF\_Field} I/O specification. ! NOT IMPLEMENTED
! \item [{[rc]}]
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    ! Local variables
    integer :: localrc

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL

    ! Construct a default name if one is not given
    call ESMF_BaseCreate(ftypep%base, "Field", name, 0, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return

    ! Initialize field contents
    ftypep%gridstatus = ESMF_STATUS_UNINIT
    ftypep%datastatus = ESMF_STATUS_UNINIT

    ftypep%fieldstatus = ESMF_STATUS_READY

    if (present(rc)) rc = ESMF_SUCCESS
    
  end subroutine ESMF_FieldConstructEmpty
!------------------------------------------------------------------------------


!------------------------------------------------------------------------------
^undef  ESMF_METHOD
^define ESMF_METHOD "ESMF_FieldDestruct"
!BOPI
! !IROUTINE:   ESMF_FieldDestruct - Free any Field memory allocated internally
!
! !INTERFACE:
  subroutine ESMF_FieldDestruct(ftype, rc)
!
! !ARGUMENTS:
    type(ESMF_FieldType), pointer :: ftype        
    integer, intent(out), optional :: rc         
!
! !DESCRIPTION:
! Releases all resources except the {\tt ESMF\_Field} itself.
!
! The arguments are:
! \begin{description}
! \item [ftype]
!       Pointer to an {\tt ESMF\_Field} object.
! \item [{[rc]}] 
!       Return code; equals {\tt ESMF\_SUCCESS} if there are no errors.
! \end{description}
!EOPI
!------------------------------------------------------------------------------
    integer :: localrc

    ! Initialize
    localrc = ESMF_RC_NOT_IMPL
    if (present(rc)) rc = ESMF_RC_NOT_IMPL


    ! release the base class resources
    call ESMF_BaseDestroy(ftype%base, localrc)
    if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
!
! TODO: more code goes here
!
    if((ftype%is_proxy .or. ftype%array_internal) .and. &
      ftype%datastatus .eq. ESMF_STATUS_READY) then
        call ESMF_ArrayDestroy(ftype%array, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
    endif

    if(ftype%is_proxy .and. &
      ftype%gridstatus .eq. ESMF_STATUS_READY) then
        call ESMF_GridDestroy(ftype%grid, rc=localrc)
        if (ESMF_LogMsgFoundError(localrc, &
                                ESMF_ERR_PASSTHRU, &
                                ESMF_CONTEXT, rc)) return
    endif

    if  (present(rc)) rc = ESMF_SUCCESS

  end subroutine ESMF_FieldDestruct
!------------------------------------------------------------------------------

end module ESMF_FieldCreateMod
