      SUBROUTINE CP8TO6(NOUT,IBUFF,IDIM,IFREC,ILREC,NOBUFS,NOWDS,
     X                  CIFID,IERR)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    CP8TO6      COMPRESS 8-BIT RIGHT-ADJUSTED NMC DATA.
C   PRGMMR: KRISHNA KUMAR         ORG: W/NP12    DATE: 1999-07-01
C
C ABSTRACT:  COMPRESS 8-BIT RIGHT-ADJUSTED NMC PACKED DATA TO 6-BIT
C   DATA. IBUFF(IDIM) IS THE INPUT CONTAINING 8-BIT RIGHT-ADJUSTED
C   PACKED DATA.  THE LEFTMOST 2 BITS ARE REDUNDANT.
C
C PROGRAM HISTORY LOG:
C   95-05-17  LUKE LIN
C 1999-07-01  KRISHNA KUMAR  CONVERTED THIS CODE TO IBM RS/6000 FROM
C                            CRAY 
C
C USAGE:  CALL CP8TO6(NOUT,IBUFF,IDIM,IFREC,ILREC,NOBUFS,NOWDS,CIFID,IERR
C   INPUT ARGUMENT LIST:
C     NOUT     - WHERE 6-BIT PACKED ARRAYS ARE GOING TO
C     IBUFF    - INPUT BUFFER CONTAINS 8-BIT RIGHT ADJUSTED PACKED DATA
C     IDIM     - DIMENSION OF IBUFF
C     IFREC    - A FLAG TO INDICATE IBUFF IS THE FIRST RECORD OF A MAP.
C                IF IT IS THE FIRST RECORD, SET IFREC TO 1.
C     ILREC    - A FLAG TO INDECATE IBUFF IS THE LAST RECORD OF A MAP.
C                IF IT IS THE LAST RECORD, SET ILREC TO 1.
C     NOBUFS   - THE CURRENT INDEX OF THE OUTPUT RECORDS
C     NOWDS    - THE CURRENT WORD POSITION OF THE RECORD
C     CIFID    - 48-CHAR MAP ID TO BE PLACED INTO FFFFFF RECORD
C
C   OUTPUT ARGUMENT LIST:      (INCLUDING WORK ARRAYS)
C     IERR     - 0 IF NO ERR; 1 IF SUBR EB2ISP'S ERROR
C
C   OUTPUT FILES:
C     FT01F001 - CONTAINS NMC 6-BIT PACKED DATA
C
C REMARKS:
C     *NOTE: FOR VECTOR CONTOUR GRAPHICS
C
C ATTRIBUTES:
C   LANGUAGES: F90
C   MACHINE:   IBM
C
C$$$
C
      INTEGER     IBUFF(IDIM)
      CHARACTER*1 CIFID(48)
      INTEGER     JFID(12)
      CHARACTER*1 CHJFID(48)
      INTEGER     NBUFF(360)
      INTEGER     OBUFF(180)
      INTEGER     MASK(4)
      INTEGER     IWORD(4)
      INTEGER     IDCFID(12)
      CHARACTER*1 CDCFID(48)
      INTEGER     ICDCFID(6)
      EQUIVALENCE  (CDCFID(1),ICDCFID(1))
C
C     INTEGER     CRAY2CDC
C
      INTEGER     ISTART
      INTEGER     IMASK 
C
      SAVE
C
      DATA        MASK /Z'000000003F000000',
     &                  Z'00000000003F0000',
     &                  Z'0000000000003F00',
     &                  Z'000000000000003F'/
      DATA        ISTART   /Z'00000000FFFFFF00'/
      DATA        IMASK    /Z'00000000000000FF'/
C
C----------------------------------------------------------------------
C
      NBG = 0
      IF (IFREC .EQ. 1) THEN
C         ...HERE THE FIRST FFFFFF RECORD OF THE MAP;
C         ...PUT FFFFFF+12-WORD MAP ID INTO FIRST 12 WORDS OF 1ST REC.
          DO   30  I = 1, 360
              NBUFF(I) = 0
   30     CONTINUE
          DO  40  I = 1,48
              CHJFID(I) = CIFID(I)
   40     CONTINUE
          IERR=0
          print *,' jfid=',chjfid
          ITYPE = 6
          NMIFID = 48
C???      CALL EB2ISP(48,CHJFID,CDCFID,IERR)
          CALL ASC2ISP(48,CHJFID,CDCFID,IERR)
          write(6,38)(icdcfid(m),m=1,6)
  38      format(2x,'cdc ifid=', 6(1x,z16))
C
C         IERR=CRAY2CDC(ITYPE,NUIFID,CDCFID,0,CHJFID)
C         ....CONVERT ASCII  CHARACTERS INTO CDC6600 DISPLAY CODE
          IF (IERR .LT. 0) THEN
              PRINT *,' CONVERN FROM CRAY TO CDC ABEND.'
              RETURN
          ENDIF
C
          CALL GBYTES(CDCFID,IDCFID,0,32,0,12)
C         .... UNPACK 48-CHAR TO 12 INTEGER*4
          IDCFID(1)=IOR(ISTART,IAND(IMASK,IDCFID(1)))
C         ....PUT FFFFFF INTO THE FIRST WORD
          DO  50  I = 1,12
              NBUFF(I) = IDCFID(I)
   50     CONTINUE
                  write(6, 124)(nbuff(i),i=1,12)
          NBG=12
          NOWDS = 13
          NOBUFS = 0
          IEND=IDIM-1
      ENDIF
C
      DO  200  K = NBG, IEND, 4
          DO 100 I=1,4
             IWORD(I)=0
             IWORD(I)=IOR(IWORD(I),ISHFT(IAND(IBUFF(K+I),MASK(1)),2))
             IWORD(I)=IOR(IWORD(I),ISHFT(IAND(IBUFF(K+I),MASK(2)),4))
             IWORD(I)=IOR(IWORD(I),ISHFT(IAND(IBUFF(K+I),MASK(3)),6))
             IWORD(I)=IOR(IWORD(I),ISHFT(IAND(IBUFF(K+I),MASK(4)),8))
  100     CONTINUE
C         ....COMPRESS 4 8-BIT RIGHT-ADJUSTED DATA INTO 24 BIT LEFT-
C              ADJUSTED DATA
          NBUFF(NOWDS) = IWORD(1)
          NBUFF(NOWDS) = IOR(NBUFF(NOWDS),ISHFT(IWORD(2),-24))
          NBUFF(NOWDS+1)=ISHFT(IWORD(2),8)
          NBUFF(NOWDS+1)=IOR(NBUFF(NOWDS+1),ISHFT(IWORD(3),-16))
          NBUFF(NOWDS+2)=ISHFT(IWORD(3),16)
          NBUFF(NOWDS+2)=IOR(NBUFF(NOWDS+2),ISHFT(IWORD(4),-8))
C         ....PLACE 4 24-BIT LEFT-AJUSTED DATA INTO 3 32-BIT WORDS
          NOWDS = NOWDS + 3
          IF (NOWDS .GE. 361) THEN
C         ....GET A FULL RECORD
              CALL SBYTES(OBUFF,NBUFF,0,32,0,360)
C              .... PACK INTEGER*4 TO INTEGER*8
C???          CALL FFPUT(NBUFF,NOUT,1440)
              WRITE(NOUT)OBUFF
              NOBUFS=NOBUFS+1
              if (nobufs .eq. 1) then
                  write(6, 124)(obuff(i),i=1,12)
 124              format( 12(2x,Z16))
              endif
C
              NOWDS=1
              DO 140 J=1,360
                 NBUFF(J)=0
  140         CONTINUE
          ENDIF
  200 CONTINUE
C
      IF (ILREC .EQ. 1) THEN
C     ....REACH THE LAST RECORD, WRITE THE BUFFER OUT
          ITEST = 0
          DO 205 N=1,4
             ITEST=ITEST+NBUFF(N)
  205     CONTINUE
C         ....TEST IF THE BUFFER CONTAINS ANY INFORMATION
          IF (ITEST.NE.0) THEN
              NOBUFS=NOBUFS+1
              CALL SBYTES(OBUFF,NBUFF,0,32,0,360)
C              .... PACK INTEGER*4 TO INTEGER*8
C???          CALL FFPUT(NBUFF,NOUT,1440)
              WRITE(NOUT)OBUFF
          ENDIF
          PRINT 210,NOBUFS
  210     FORMAT(1H0,'TOTAL COMPRESS RECORDS FOR VARIAN: NOBUFS=',I6)
      ENDIF
      RETURN
      END
