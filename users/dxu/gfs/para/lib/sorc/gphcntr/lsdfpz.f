       SUBROUTINE LSDFPZ(GGROUP,LEVEL,SPECS,VERTIC,NODES,STATUS,
     &                   ATTRIS,LINEVU)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    LSDFPZ      ATTACH A LINE STRING INTO A DESIGN FILE.
C   PRGMMR: KRISHNA KUMAR       ORG: W/NP12    DATE: 1999-07-01
C
C ABSTRACT: INSERT A LINE STRING AT THE END OF A DESIGN FILE
C   (WITH CONTOUR VALUE).
C
C PROGRAM HISTORY LOG:
C   94-04-05  ORIGINAL AUTHOR LIN
C   94-12-23  LUKE LIN       CONVERT IT TO CFT-77
C 1999-07-01  KRISHNA KUMAR  CONVERTED THIS CODE FROM CRAY   
C                            TO IBM RS/6000
C
C USAGE:   CALL LSDFPZ(GGROUP,LEVEL,SPECS,VERTIC,NODES,
C                      STATUS,ATTRIS,LINEVU)
C   INPUT ARGUMENT LIST:
C     GGROUP   - INTEGER*4 TWO WORD ARRAY WHERE:
C              - WORD 1 IS FOR GRAPHIC GROUP CODE
C              - 0 = NO OPERATION MEANS GRAPHIC GROUP =0
C              - 1 = SET  GRAPHIC GROUP FROM (2)
C              - WORD 2 IS THE GRAPHIC GROUP NUMBER -
C     LEVEL    - INTEGER*4 FLAG THAT HAS THE VALUE RANGE FROM 1 TO 63.
C              - IF IT IS SET LESS THAN 0 OR GREATER THAT 63 IT IS
C              - THEN SET TO 1.
C     SPECS(5) - INTEGER*4 FIVE WORD ARRAY WHERE:
C              - WORD ONE RANGES FROM 0 TO 6
C              - 0 = PRIMARY
C              - 1 = PATTERN COMPONENT
C              - 2 = CONSTRUCTION ELEMENT
C              - 3 = DEMENTSIONING ELEMENT
C              - 4 = PRIMARY RULE ELMENT
C              - 5 = LINEAR PATTERNED ELEMENT
C              - 6 = CONSTRUCTION RULE ELEMENT
C              - WORD(2) IS NOT USED
C              - WORD(3) IS STYLE : FROM 0 TO 7 SPECIFYING THE LINE
C              - WORD(4) WEIGHT: FROM 0 TO 31 FOR LINE WEIGHT.
C              - WORD(5) COLOR:  FROM 0 TO 127 FOR THE LINE COLOR
C     VERTIC   - INTEGER*4 TWO DEM ARRAY THAT CONTAINS THE VERTICIES.
C     NODES    - INTEGER*4 THE SECOND DEM OF VERTIC ARRAY.
C     ATTRIS   - INTEGER*4 .. NOT USED.
C     LINEVU   - INTEGER*4 .. THE LINE VALUE.
C
C   OUTPUT ARGUMENT LIST:
C     STATUS   - INTEGER*4 RETURN CONDITION
C              -  =  0, NORMAL
C              -  =933, ATTEMP TO ADD BAD ELEMENT TO DGN FILE.
C              -    =5, NOT ENOUGH BIN SPACE.
C
C   OUTPUT FILES:
C     FT06F001 - PRINT FILE.
C
C REMARKS:
C   THIS VERSION IS FOR THE BATCH JOB NOT FOR INTERACTIVE MICROSTATION
C   ENVIRONMENT.  AND ALSO ITS FORMAT IS THE EXTERNAL VAX FORMAT NOT
C   INTERNAL DGN FORMAT.
C
C ATTRIBUTES:
C   LANGUAGE: CFT-77
C   MACHINE:  CRAY
C
C$$$
C
       INTEGER    GGROUP(2)
       INTEGER    LEVEL, STATUS, SPECS(5), ATTRIS
       INTEGER    NODES,LINEVU
       INTEGER    VERTIC(*)
C
       COMMON     / DGNBIN / VECBIN,MAXBIN,IMDEX,ITOTWD
       INTEGER    VECBIN(409800)
C      ... WHERE 409800 HALFWORDS = 400 VAX BLOCKS
C
C      -----------------------------------------------------------------
C
       INTEGER       BUFELM(768)
       INTEGER       MAXBUF
       INTEGER       WORD1, GG
       INTEGER       TMPLOW,TMPHGH
       INTEGER       MK00FF
       INTEGER       PPERTY
       INTEGER       SBLOGY
       INTEGER       MSK7F
       INTEGER       MSK80
       CHARACTER*1   NULL
       INTEGER       I2MAX
       INTEGER       I2MIN
       INTEGER       MKFFF0
       INTEGER       MK000F
C
       DATA          MAXBUF    / 768 /
       DATA          MK00FF    / Z'000000000000FFFF' /
       DATA          WORD1    / Z'00000400' /
       DATA          MSK7F    / Z'0000000000007FFF'/
       DATA          MSK80    / Z'00008000' /
       DATA          PPERTY / Z'00000000' /
       DATA          I2MAX    /32767/
       DATA          I2MIN    /-32768/
       DATA          MKFFF0   /Z'FFFFFFFFFFFF0000'/
       DATA          MK000F   /Z'000000000000FFFF'/
C
C      * * * * * * * * * * * * * * *  S T A R T  * * * * * * * * * * * *
C
       NULL = CHAR(00)
       ITOT = 19 + 2 * 2 * NODES
       IF (ITOT .GT. MAXBUF) THEN
          PRINT *, ' ATTEMP TO ADD BAD ELEMENT TO DGN FILE'
          STATUS = 933
          GO TO 999
       ENDIF
       STATUS = 0
C      ... FOR WORD 1
       IF (LEVEL .LT. 1 .OR. LEVEL .GT. 63) LEVEL = 1
       WORD1 = IOR(WORD1,LEVEL)
       BUFELM(1) = WORD1
       BUFELM(2) = ITOT - 2
C
       TMPLOW = VERTIC(1)
       DO I=2,NODES
          TMPLOW = MIN(TMPLOW,VERTIC(2*I-1))
       ENDDO
       ITEMP = ISHFT(TMPLOW,-16)
       IF (TMPLOW .LT. 0) THEN
C          BUFELM(3) = IAND(ITEMP,MSK7F)
           BUFELM(3) = I2MAX-ITEMP
       ELSE
C          BUFELM(3) = IOR(ITEMP,MSK80)
           BUFELM(3) = I2MIN+ITEMP
       ENDIF
       BUFELM(4) = IAND(TMPLOW,MK00FF)
       IF (TMPLOW .GE. I2MAX) THEN
           BUFELM(4)=IOR(BUFELM(4),MKFFF0)
       ELSE IF (TMPLOW .LT. I2MIN) THEN
           BUFELM(4)=IAND(BUFELM(4),MK000F)
       ELSE IF (TMPLOW .LT. 0) THEN
           BUFELM(4)=IOR(BUFELM(4),MKFFF0)
       ENDIF
C      PRINT *,' XLOW=',TMPLOW,BUFELM(3),BUFELM(4)
C      print 111,tmplow,itemp,i2max,i2min,bufelm(3),bufelm(4)
C111   format(6(2x,z16))
C      ... FOR XLOW
       TMPLOW = VERTIC(2)
       DO I=2,NODES
          TMPLOW = MIN(TMPLOW,VERTIC(2*I))
       ENDDO
       ITEMP = ISHFT(TMPLOW,-16)
       IF (TMPLOW .LT. 0) THEN
C          BUFELM(5) = IAND(ITEMP,MSK7F)
           BUFELM(5) = I2MAX-ITEMP
       ELSE
C          BUFELM(5) = IOR(ITEMP,MSK80)
           BUFELM(5) = I2MIN+ITEMP
       ENDIF
       BUFELM(6) = IAND(TMPLOW,MK00FF)
       IF (TMPLOW .GE. I2MAX) THEN
           BUFELM(6)=IOR(BUFELM(6),MKFFF0)
       ELSE IF (TMPLOW .LT. I2MIN) THEN
           BUFELM(6)=IAND(BUFELM(6),MK000F)
       ELSE IF (TMPLOW .LT. 0) THEN
           BUFELM(6)=IOR(BUFELM(6),MKFFF0)
       ENDIF
C      PRINT *,' YLOW=',TMPLOW,BUFELM(5),BUFELM(6)
C      print 111,tmplow,itemp,i2max,i2min,bufelm(5),bufelm(6)
C          FOR YLOW
       ITEMP = ISHFT(LINEVU,-16)
       IF (LINEVU .LT. 0) THEN
           BUFELM(7) = IAND(ITEMP,MSK7F)
       ELSE
           BUFELM(7) = IOR(ITEMP,MSK80)
       ENDIF
       BUFELM(8) = IAND(LINEVU,MK00FF)
C      ... FOR ZLOW
       TMPHGH = VERTIC(1)
       DO I=2,NODES
          TMPHGH = MAX(TMPHGH,VERTIC(2*I-1))
       ENDDO
       ITEMP = ISHFT(TMPHGH,-16)
       IF (TMPHGH .LT. 0) THEN
C          BUFELM(9) = IAND(ITEMP,MSK7F)
           BUFELM(9) = I2MAX-ITEMP
       ELSE
C          BUFELM(9) = IOR(ITEMP,MSK80)
           BUFELM(9) = I2MIN+ITEMP
       ENDIF
       BUFELM(10) =IAND(TMPHGH,MK00FF)
       IF (TMPHGH .GE. I2MAX) THEN
          BUFELM(10)=IOR(BUFELM(10),MKFFF0)
       ELSE IF (TMPHGH .LT. I2MIN) THEN
          BUFELM(10)=IAND(BUFELM(10),MK000F)
       ELSE IF (TMPHGH .LT. 0) THEN
           BUFELM(10)=IOR(BUFELM(10),MKFFF0)
       ENDIF
C      PRINT *,' XHGH=',TMPHGH,BUFELM(9),BUFELM(10)
C      print 111,tmphgh,itemp,i2max,i2min,bufelm(9),bufelm(10)
C      ... FOR XHGH
       TMPHGH = VERTIC(2)
       DO I=2,NODES
          TMPHGH = MAX(TMPHGH,VERTIC(2*I))
       ENDDO
       ITEMP = ISHFT(TMPHGH,-16)
       IF (TMPHGH .LT. 0) THEN
C          BUFELM(11) = IAND(ITEMP,MSK7F)
           BUFELM(11) = I2MAX-ITEMP
       ELSE
C          BUFELM(11) = IOR(ITEMP,MSK80)
           BUFELM(11) = I2MIN+ITEMP
       ENDIF
       BUFELM(12) = IAND(TMPHGH,MK00FF)
       IF (TMPHGH .GE. I2MAX) THEN
          BUFELM(12)=IOR(BUFELM(12),MKFFF0)
       ELSE IF (TMPHGH .LT. I2MIN) THEN
          BUFELM(12)=IAND(BUFELM(12),MK000F)
       ELSE IF (TMPHGH .LT. 0) THEN
           BUFELM(12)=IOR(BUFELM(12),MKFFF0)
       ENDIF
C      PRINT *,' YHGH=',TMPHGH,BUFELM(11),BUFELM(12)
C      print 111,tmphgh,itemp,i2max,i2min,bufelm(11),bufelm(12)
C      ... FOR YHGH
       BUFELM(13) = BUFELM(7)
       BUFELM(14) = BUFELM(8)
C      ... FOR ZHGH
       GG = 0
       IF (GGROUP(1) .EQ. 1) GG = GGROUP(2)
       BUFELM(15) = GG
C      ... FOR GRAPHIC GROUP NO
       BUFELM(16) = ITOT - 16
C      ... FOR INDEX TO ATTRIBUTES
       IF (SPECS(1).LT.0 .OR. SPECS(1).GT. 6) SPECS(1) = 0
       PPERTY = IOR(PPERTY,SPECS(1))
       BUFELM(17) = PPERTY
C      ... FOR PROPERTIES INDICATOR
       IF (SPECS(3).LT.0 .OR. SPECS(3).GT. 7) SPECS(3)=MOD(SPECS(3),8)
       IF (SPECS(4).LT.0 .OR. SPECS(4).GT. 31)
     &              SPECS(4)=MOD(SPECS(4),32)
       IF (SPECS(5).LT.0 .OR. SPECS(5).GT. 127)
     &               SPECS(5)=MOD(SPECS(5),128)
C      PRINT *,' in ls, SPEC3/5= ', SPECS(3), ' ', SPECS(5)
       SBLOGY = ISHFT(SPECS(5),8)
       SBLOGY = IOR(SBLOGY,ISHFT(SPECS(4),3))
       SBLOGY = IOR(SBLOGY,SPECS(3))
       BUFELM(18) = SBLOGY
C      ... FOR DISPLAY SYMBOLOGY
       BUFELM(19) = NODES
C
       ITOT = 19
       DO I=1, 2*NODES
          BUFELM(ITOT +1) = ISHFT(VERTIC(I),-16)
          BUFELM(ITOT +2) = IAND(VERTIC(I),MK00FF)
          ITOT = ITOT + 2
       ENDDO
C      ... INSERT X/Y VERTICES
       ISAVE = ITOT + IMDEX
C      PRINT *,' BEFORE INSERT A LINE STRING:',NODES,ITOT,IMDEX
       IF (ISAVE .GT. MAXBIN) THEN
          PRINT *,' NOT ENOUGH BIN SPACE '
          STATUS = 5
          GO TO 999
       ENDIF
       DO I= 1, ITOT
          VECBIN(IMDEX + I) = BUFELM(I)
       ENDDO
       IMDEX = ISAVE
C      PRINT *,' AFTER  INSERT A LINE STRING:',IMDEX
C      ...STORE LINE STRING ELEMENT INTO BIN
C
  999  CONTINUE
       END
