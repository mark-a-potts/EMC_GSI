#!/bin/ksh
################################################################################
# This script submits parallel jobs.
# Usage: psub config cdate cdump cstep
# Imported variables:
#   CONFIG
#   CDATE
#   CDUMP
#   CSTEP
# Configuration variables:
#   PSLOT
#   USER
#   CUE2RUN
#   CUE2RUN1
#   CUE2RUN2
#   CUE2RUNO
#   CUE2RUNL
#   CUE_POST
#   CUE_AVRG
#   NUMPROCPREP
#   NUMPROCANAL
#   NUMPROCANGU
#   MANALhhddd (hh=00,06,12,18;ddd=gdas,gfs)
#   MFCSThhddd (hh=00,06,12,18;ddd=gdas,gfs)
#   CYINC
#   LEVSFCSThhddd
#   NUMPROCFCSThhddd
#   NUMPROCPOSThhddd
#   ckshSH (cksh=dump,etc)
#   RLIST
#   COMDMP
#   COMROT
#   NDATE
#   SUB
#   RUNLOG
#   PLOG
#   PCNE
#
#
# 2006-08-08  S. Bender - changed start time for gdas 00z from 0610Z to 0550Z and
#                         for gdas 12z from 2010Z to 1750Z to bring start times
#                         in line with current gdas dump times.
################################################################################
set -ux

APRUN=""
APRUNC=""
APRUNCY=""
APRNPREP=""
APRNRELOC=""

################################################################################
# Validate arguments

export CDATE=${2:-${CDATE:?}}
export CDUMP=${3:-${CDUMP:?}}
export CONFIG=${1:-${CONFIG:?}}
export CSTEP=${4:-${CSTEP:?}}
export CKSH=$(echo $CSTEP|cut -c-4)
export CKND=$(echo $CSTEP|cut -c5-)
export ACCOUNT=${ACCOUNT:-GFS-MTN}
[[ $(dirname $CONFIG) = . ]]&&CONFIG=$(pwd)/$CONFIG
if [[ ! -r $CONFIG ]];then
  echo $0: inaccessible configuration file $CONFIG >&2
  exit 4
fi

echo $CONFIG
set -a;. $CONFIG;set +a

export machine=${machine:-WCOSS}
machine=$(echo $machine|tr '[a-z]' '[A-Z]')
node=`hostname | cut -d. -f1,1`
export mac=`echo $node | cut -c1-1`
export mac2=`echo $node | cut -c1-2`
if [ $mac = g -o $mac2 = c1  -o $mac2 = c2 ] ; then
  partition=${partition:-$mac2}
elif [ $mac = c -o $mac = s -o $mac = t ] ; then
  partition=N
else
  partition=${partition:-N}
fi

NDATE=${NDATE:-$NWPROD/util/exec/ndate}
if [[ $($NDATE 0 $CDATE) != $CDATE ]];then
  echo $0: invalid current date $CDATE >&2
  exit 4
fi

if [[ $CDUMP != gdas && $CDUMP != gdas && $CDUMP != gfs ]];then
  echo $0: invalid current dump $CDUMP >&2
  exit 4
fi

if [ $machine = WCOSS ]; then
  export launcher=${launcher:-mpirun.lsf}
  export omplace=${omplace:-""}
  export MP_SHARED_MEMORY=${MP_SHARED_MEMORY:-yes}
  export MP_EAGER_LIMIT=${MP_EAGER_LIMIT:-32768}
  export MP_USE_BULK_XFER=${MP_USE_BULK_XFER:-yes}
  export MP_LABELIO=${MP_LABELIO:-yes}
  export XLFRTEOPTS="nlwidth=80"
elif [ $machine = ZEUS ]; then
  export launcher=${launcher:-mpiexec_mpt}
  export omplace=${omplace:-omplace}
fi

################################################################################
# Set other variables

if [ $machine = WCOSS ]; then
  export LLQU=${LLQU:-bjobs}
  export SUB=${SUB:-$SHDIR/sub_wcoss}
elif [ $machine = ZEUS ]; then
  export LLQU=${LLQU:-$SHDIR/llqu}
  export SUB=${SUB:-$SHDIR/sub_zeus}
fi
export JOBSDIR=${JOBSDIR:-$SHDIR}
export CCPOST=${CCPOST:-NO}
export USER=${USER:-$LOGNAME}
export GROUP=${GROUP:-"devonprod"}
export CUE2RUN=${CUE2RUN:-"dev"}
export CUE2RUN1=${CUE2RUN1:-"1/R"}
export CUE2RUN2=${CUE2RUN2:-$CUE2RUN}
export CUE2RUNA=${CUE2RUNA:-$CUE2RUN1}
export CUE2RUNO=${CUE2RUNO:-$CUE2RUN}
export CUE2RUNL=${CUE2RUNL:-$CUE2RUN2}
export CYINC=${CYINC:-06}
export PLOG=${PLOG:-$SHDIR/plog}
export PCNE=${PCNE:-$SHDIR/pcne}
export PMKR=${PMKR:-$SHDIR/pmkr}
export GDATE=$($NDATE -$CYINC $CDATE)
export CDFNL=${CDFNL:-gdas}
export GDUMP=${GDUMP:-$CDFNL}
COMDMPTMP=${COMDMPTMP:-${COMDMP:-""}}
COMCOPTMP=${COMCOPTMP:-${COMCOP:-$COMDMPTMP}}
COMROTTMP=${COMROTTMP:-${COMROT:-""}}
COMDAYTMP=${COMDAYTMP:-${COMDAY:-$COMROTTMP}}
eval export COMDMP=$COMDMPTMP
eval export COMCOP=$COMCOPTMP
eval export COMROT=$COMROTTMP
eval export COMDAY=$COMDAYTMP
export ECHKTYPE=${ECHKTYPE:-"ensstat"}
export RUNLIMECHK=${RUNLIMECHK:-25}

cycle=$(echo $CDATE|cut -c9-10)
cdump=$(echo $CDUMP|tr '[a-z]' '[A-Z]')
eval manal=\${MANAL$cycle$cdump:-1}
eval mfcst=\${MFCST$cycle$cdump:-1}
eval moanl=\${MOANL$cycle$cdump:-1}
eval mlanl=\${MLANL$cycle$cdump:-0}
eval mavrg=\${MAVRG$cycle$cdump:-0}

memory_node=${memory_node:-105000}

################################################################################
# Set prerequisites and submit parameters based on script name

# [[ -s $RLIST ]]||$PMKR >$RLIST
#if [[ ! -s $RLIST ]] ; then
# $PMKR >$RLIST
##if [[ $ARCHIVE = YES ]] ; then cat $SHDIR/append.rlist >> $RLIST ; fi
# if [[ $ARCHIVE = YES ]] ; then cat $SHDIR/append.rlist_new >> $RLIST ; fi
#fi

#string="#"

case $CKSH in

copy)
  [[ -s $RLIST ]]||$PMKR >$RLIST
  if [[ -z $CKND ]];then CKND=fcst1;CSTEP=$CKSH$CKND;fi
  prereqs="true"
  cue2run=$CUE2RUN
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    timelim=01:00
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=1:00:00
  fi
  re="1600/12"
  np="1/1/$partition"
  whenrun=+0000
;;

dump)
  npe_node=${npe_node_dump:-1}
  pe_node=${pe_node_dump:-$npe_node}
  prereqs="true"
  cue2run=$CUE2RUN1
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
  fi
  re="3000/1"
  np="1/1/$partition"
  timelim=${TIMELIMDUMP:-04:00}
  case $CDUMP in
  gfs)
    case $(echo $CDATE|cut -c9-10) in
      00) whenrun=$(echo $CDATE|cut -c1-8)0250;;
      06) whenrun=$(echo $CDATE|cut -c1-8)0850;;
      12) whenrun=$(echo $CDATE|cut -c1-8)1450;;
      18) whenrun=$(echo $CDATE|cut -c1-8)2050;;
    esac
  ;;
  $CDFNL)
    case $(echo $CDATE|cut -c9-10) in
      00)whenrun=$(echo $CDATE|cut -c1-8)0550;;
      06)whenrun=$(echo $CDATE|cut -c1-8)1150;;
      12)whenrun=$(echo $CDATE|cut -c1-8)1750;;
      18)whenrun=$(echo $CDATE|cut -c1-8)2350;;
    esac
  ;;
  esac
;;

dcop)
  npe_node=${npe_node_dcop:-1}
  pe_node=${pe_node_dcop:-$npe_node}
  prereqs="[[ $CDATE = ????????00 ]]"
  cue2run=$CUE2RUN1
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    timelim=04:00
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=4:00:00
  fi
  re="1600/1"
  np="1/1/$partition"
  whenrun=+0000
;;

prep)
  npe_node=${npe_node_pr:-16}
  pe_node=${pe_node_pr:-$npe_node}
  prereqs="[[ $manal -gt 0  ]]"
  cue2run=$CUE2RUN
  nthreads=${NTHRPREP:-1}
  numproc=${NUMPROCPREP:-$((npe_node/nthreads))}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  timelim=${TIMELIMPREP:-1:30:00}
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    APRNPREP="$launcher"
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    if [ $nthreads -eq 1 ] ; then
      APRNPREP="'$launcher -n $numproc'"
      APRNRELOC="'$launcher -n $numproc'"
    else
      APRNPREP="'$launcher -np $numproc $omplace -nt $nthreads'"
      APRNRELOC="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

anal)
  npe_node=${npe_node_a:-16}
  pe_node=${pe_node_a:-$npe_node}
  prereqs="[[ $manal -gt 0 ]]"
  cue2run=$CUE2RUN
  numproc=$(eval echo \${NUMPROCANAL$cdump:-${NUMPROCANAL:-"$(($JCAP/2+3))"}})
  nthreads=${NTHREADS_GSI:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  timelim=${TIMELIMANAL:-2:00:00}
# string="#@ parallel_threads = $nthreads"
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    APRUN="$launcher"
    export MPICH_ALLTOALL_THROTTLE=0
    export MP_SINGLE_THREAD=yes
    export MP_EAGER_LIMIT=65536
    export MP_COLLECTIVE_OFFLOAD=yes
    export KMP_STACKSIZE=2048m
    export MP_USE_BULK_XFER=yes
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  CYCLETHREAD=${CYCLETHREAD:-1}
  whenrun=+0000
;;

angu)
  npe_node=${npe_node_ang:-16}
  pe_node=${pe_node_ang:-$npe_node}
  prereqs="[[ $manal -gt 0 ]]"
  cue2run=$CUE2RUN
  numproc=$(eval echo \${NUMPROCANGU$cdump:-${NUMPROCANGU:-72}})
  nthreads=${NTHREADS_ANG:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  timelim=${TIMELIMANGU:-1:00:00}
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    APRUN="$launcher"
    export MPICH_ALLTOALL_THROTTLE=0
    export MP_SINGLE_THREAD=yes
    export MP_COLLECTIVE_OFFLOAD=no
    export KMP_STACKSIZE=10248m
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

oanl)
  npe_node=${npe_node_o:-16}
  pe_node=${pe_node_o:-$npe_node}
  prereqs="[[ $moanl -gt 0 ]]"
  cue2run=$CUE2RUNO
  numproc=$(eval echo \${NUMPROCOANL$cdump:-${NUMPROCOANL:-$npe_node}})
  nthreads=${NTHROANL:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  timelim=${TIMELIMANAL:-1:00:00}
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    APRUN="$launcher"
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

lanl)
  npe_node=${npe_node_l:-16}
  pe_node=${pe_node_l:-$npe_node}
  prereqs="[[ $mlanl -gt 0 ]]"
  cue2run=$CUE2RUNL
  numproc=$(eval echo \${NUMPROCLANL$cdump:-${NUMPROCLANL:-8}})
  nthreads=${NTHRLANL:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  timelim=${TIMELIMANAL:-1:30:00}
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    APRUN="$launcher"
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

fcst)
  npe_node=${npe_node_f:-16}
  pe_node=${pe_node_f:-$npe_node}
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=$(eval echo \${Q2RUNFCST$cycle$cdump:-$CUE2RUN}|cut -f$nknd -d,)
  numproc=$(eval echo \${NUMPROCFCST$cycle$cdump:-$((JCAP/2))}|cut -f$nknd -d,)
  numproc=${numproc:-$((JCAP/2))}
  nthreads=$(eval echo \${NTHRFCST$cycle$cdump:-$nth_f1}|cut -f$nknd -d,)
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  timelim=$(eval echo \${TIMELIMFCST$cycle$cdump:-3:00:00}|cut -f$nknd -d,)
  timelim=${timelim:-3:00:00}
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    APRUN="$launcher"
    numproco=$(eval echo \${NUMPROCOFCST$cycle$cdump:-62}|cut -f$nknd -d,)
    numproca=$((numproc-numproco-1))
    numproct=$((numproca*nthreads+numproco+1))
    nodes=$((numproct/npe_node))
    if [ $numproct -gt $((nodes*npe_node)) ] ; then
      export nodes=$((nodes+1))
    fi
    NPROCS_a=$numproca
    NPROCS_o=$numproco
    NPROCS_c=1
    AM_TASKS="'-n $numproc'"
    export MPICH_ALLTOALL_THROTTLE=0
    export MP_SINGLE_THREAD=yes
    export MP_COLLECTIVE_OFFLOAD=no
    export KMP_STACKSIZE=2048m
    export MP_USE_BULK_XFER=no
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  CHGRESTHREAD=${CHGRESTHREAD:-$npe_node}
  whenrun=+$(eval echo \${fcst_delay_$nknd:-0000})
;;

post)
  npe_node=${npe_node_po:-16}
  pe_node=${pe_node_po:-$npe_node}
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=${CUE_POST:-${CUE2RUN2:-1}}
  numproc=$(eval echo \${NUMPROCPOST$cycle$cdump:-12}|cut -f$nknd -d,)
  numproc=${numproc:-12}
  nthreads=${NTHRPOST:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-105000}
  OMP_NUM_THREADS=$nthreads
  timelim=$(eval echo \${TIMELIMPOST$cycle$cdump:-02:30}|cut -f$nknd -d,)
  timelim=${timelim:-04:00}
  if [ $machine = WCOSS ]; then
    if [ ${POST_SHARED:-NO} = YES ] ; then
      np="$numproc/1"
      re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads/$pe_node"
    else
      np="$numproc/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    fi
    APRUN="$launcher"
  elif [ $machine = ZEUS ]; then
    if [ ${POST_SHARED:-NO} = YES ] ; then
      np="$numproc/1"
      re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads"
    else
      np="$npe_node/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads"
    fi
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  CHGRESTHREAD=${CHGRESTHREAD:-$npe_node}
  whenrun=+$(eval echo \${post_delay_$nknd:-0000})
;;

chkp)
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=$CUE2RUN1
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    timelim=48:00
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=48:00:00
  fi
  re="1000/1"
  np="1/1/$partition"
  whenrun=+0000
;;

vrfy)
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=$CUE2RUN1
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    npe_node=${npe_node_vrfy:-1}
    pe_node=${pe_node_vrfy:-$npe_node}
    nthreads=${NTHREADSVRFY:-1}
    numproc=${NUMPROCVRFY:-$((npe_node/nthreads))}
    numproc=$(eval echo \${NUMPROCVRFY$cdump:-${NUMPROCVRFY:-$((npe_node/nthreads))}})
    nodes=$((numproc/pe_node))
    re="${VRFY_MEMORY:-20000}/1/$pe_node"
    np="$numproc/$nodes/$partition"
    timelim=${TIMELIMVRFY:-03:00}
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    pe_node=${npe_node:-12}
    re="${VRFY_MEMORY:-20000}/1"
    np="1/1/$partition"
    timelim=${TIMELIMVRFY:-3:00:00}
  fi
  whenrun=+$(eval echo \${vrfy_delay_$nknd:-0000})
;;

arch)
  prereqs="true"
  cue2run=${CUE2RUNA:-$CUE2RUN1}
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    npe_node=${npe_node_arch:-1}
    pe_node=${pe_node_arch:-$npe_node}
    timelim=${TIMELIMARCH:-04:00}
    re="${ARCH_MEMORY:-2000}/1"
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=${TIMELIMARCH:-4:00:00}
    re="${ARCH_MEMORY:-1000}/1"
  fi
  np="1/1/$partition"
  whenrun=+0000
;;

avrg)
  npe_node=${npe_node_av:-16}
  pe_node=${pe_node_av:-$npe_node}
  prereqs="[[ $mavrg -gt 0 ]]"
  cue2run=${CUE_AVRG:-${CUE2RUN:-1}}
  numproc=$(eval echo \${NUMPROCAVRG$cdump:-${NUMPROCAVRG:-12}})
  nthreads=${NTHRAVRG:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-105000}
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    if [ ${AVRG_SHARED:-NO} = YES ] ; then
      np="$numproc/1"
      re="${AVRG_MEMORY:-$((memory_node/npe_node))}/$nthreads/$pe_node"
    else
      np="$numproc/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    fi
    timelim=${TIMELIMAVRG:-03:00}
    APRUN="$launcher"
  elif [ $machine = ZEUS ]; then
    if [ ${AVRG_SHARED:-NO} = YES ] ; then
      np="$numproc/1"
      re="${AVRG_MEMORY:-$((memory_node/npe_node))}/$nthreads"
    else
      np="$pe_node/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads"
    fi
    timelim=${TIMELIMAVRG:-3:00:00}
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

d3dp)
  npe_node=${npe_node_po:-16}
  pe_node=${pe_node_po:-$npe_node}
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=${CUE_POST:-${CUE2RUN2:-1}}
  numproc=$(eval echo \${NUMPROCPOST$cycle$cdump:-12}|cut -f$nknd -d,)
  numproc=${numproc:-12}
  nthreads=${NTHRPOST:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-105000}
  timelim=$(eval echo \${TIMELIMPOST$cycle$cdump:-3:00:00}|cut -f$nknd -d,)
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    if [ ${POST_SHARED:-NO} = YES ] ; then
      np="$numproc/1"
      re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads/$pe_node"
    else
      np="$numproc/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    fi
    timelim=${timelim:-03:00}
    APRUN="$launcher"
  elif [ $machine = ZEUS ]; then
    if [ ${POST_SHARED:-NO} = YES ] ; then
      np="$numproc/1"
      re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads"
    else
      np="$pe_node/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads"
    fi
    timelim=${timelim:-3:00:00}
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

##GOCART#####################################
g3dp)
  npe_node=${npe_node_po:-16}
  pe_node=${pe_node_po:-$npe_node}
  nknd=${CKND:-1}
  prereqs="[[ $nknd -le $mfcst ]]"
  cue2run=${CUE_POST:-${CUE2RUN2:-1}}
  numproc=$(eval echo \${NUMPROCPOST$cycle$cdump:-12}|cut -f$nknd -d,)
  numproc=${numproc:-12}
  nthreads=${NTHRPOST:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-105000}
  timelim=$(eval echo \${TIMELIMPOST$cycle$cdump:-3:00:00}|cut -f$nknd -d,)
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    if [ ${POST_SHARED:-YES} = YES ] ; then
      np="$numproc/1"
      re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads/$pe_node"
    else
      np="$numproc/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    fi
    timelim=${timelim:-03:00}
    APRUN="$launcher"
  elif [ $machine = ZEUS ]; then
    if [ ${POST_SHARED:-YES} = YES ] ; then
      np="$numproc/1"
      re="${POST_MEMORY:-$((memory_node/npe_node))}/$nthreads"
    else
      np="$pe_node/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads"
    fi
    timelim=${timelim:-3:00:00}
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

#######################################
ocnp)
  npe_node=${npe_node_ocnp:-16}
  pe_node=${pe_node_ocnp:-$npe_node}
  prereqs="true"
  nknd=${CKND:-1}
  cue2run=$CUE2RUN1
  numproc=$(eval echo \${NUMPROCOCNP$cdump:-${NUMPROCOCNP:-$npe_node}})
  nthreads=${NTHROCNP:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  memory_node=${memory_node:-10500}
  timelim=$(eval echo \${TIMELIMPOST$cycle$cdump:-3:00:00}|cut -f$nknd -d,)
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    if [ ${OCNP_SHARED:-YES} = YES ] ; then
      np="$numproc/1"
      re="${OCNP_MEMORY:-$((memory_node/npe_node))}/$nthreads/$pe_node"
    else
      np="$numproc/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    fi
    timelim=${timelim:-03:00}
    APRUN="$launcher"
  elif [ $machine = ZEUS ]; then
    if [ ${OCNP_SHARED:-YES} = YES ] ; then
      np="$numproc/1"
      re="${OCNP_MEMORY:-$((memory_node/npe_node))}/$nthreads"
    else
      np="$pe_node/$nodes/$partition"
      re="$((memory_node*nthreads/npe_node))/$nthreads"
    fi
    timelim=${timelim:-3:00:00}
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  if [[ $CCPOST = YES ]];then
    whenrun=+$(eval echo \${ocnp_delay_$nknd:-0000})
  else
    whenrun=+0000
  fi
;;

eobs)
  npe_node=${npe_node_eobs:-16}
  pe_node=${pe_node_eobs:-$npe_node}
  prereqs="true"
  cue2run=$CUE2RUN
  numproc=$(eval echo \${NUMPROCEOBS$cdump:-${NUMPROCEOBS:-"$(($JCAP/2+3))"}})
  nthreads=${NTHREADS_EOBS:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
# string="#@ parallel_threads = $nthreads"
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    echo "numproc="$numproc
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    timelim=${TIMELIMEOBS:-01:00}
    APRUN="$launcher"
    export MPICH_ALLTOALL_THROTTLE=0
    export MP_SINGLE_THREAD=yes
    export MP_EAGER_LIMIT=65536
    export MP_COLLECTIVE_OFFLOAD=yes
    export KMP_STACKSIZE=2048m
    export MP_USE_BULK_XFER=yes
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    timelim=${TIMELIMEOBS:-1:00:00}
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+$(eval echo \${eobs_delay:-0000})
;;

eomn)
  npe_node=${npe_node_eomn:-1}
  pe_node=${pe_node_eomn:-$npe_node}
  prereqs="true"
  cue2run=$CUE2RUN1
  re="1000/1"
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    timelim=${TIMELIMEOMN:-01:00}
    export MPICH_ALLTOALL_THROTTLE=0
    export MP_SINGLE_THREAD=yes
    export MP_EAGER_LIMIT=65536
    export MP_COLLECTIVE_OFFLOAD=yes
    export KMP_STACKSIZE=2048m
    export MP_USE_BULK_XFER=yes
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=${TIMELIMEOMG:-1:00:00}
  fi
  np="1/1/$partition"
  whenrun=+0000
;;

eupd)
  npe_node=${npe_node_eupd:-16}
  pe_node=${pe_node_eupd:-$npe_node}
  prereqs="true"
  cue2run=$CUE2RUN
  numproc=$(eval echo \${NUMPROCEUPD$cdump:-${NUMPROCEUPD:-"$(($JCAP/2+3))"}})
  nthreads=${NTHREADS_EUPD:-1}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    timelim=${TIMELIMEUPD:-01:00}
    APRUN="$launcher"
    export MP_COLLECTIVE_OFFLOAD=no
    export MP_EAGER_LIMIT=65536
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    timelim=${TIMELIMEUPD:-1:00:00}
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

ecen)
  npe_node=${npe_node_ecen:-16}
  pe_node=${pe_node_ecen:-$npe_node}
  prereqs="true"
  cue2run=$CUE2RUN
  nthreads=${NTHRECEN:-1}
  numproc=${NUMPROCECEN:-$((npe_node/nthreads))}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    timelim=${TIMELIMECEN:-01:00}
    APRUN="$launcher"
    export MPICH_ALLTOALL_THROTTLE=0
    export MP_USE_BULK_XFER=yes
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/$partition"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    timelim=${TIMELIMECEN:-1:00:00}
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+$(eval echo \${ecen_delay:-0000})
;;

efmn)
  npe_node=${npe_node_efmn:-1}
  pe_node=${pe_node_efmn:-$npe_node}
  prereqs="true"
  cue2run=$CUE2RUN1
  re="1000/1"
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    timelim=${TIMELIMEFMN:-01:00}
    export MPICH_ALLTOALL_THROTTLE=0
    export MP_SINGLE_THREAD=yes
    export MP_COLLECTIVE_OFFLOAD=no
    export KMP_STACKSIZE=2048m
    export MP_USE_BULK_XFER=no
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=${TIMELIMEFMN:-1:00:00}
  fi
  np="1/1/$partition"
  whenrun=+0000
;;

epos)
  npe_node=${npe_node_pr:-16}
  pe_node=${pe_node_ecen:-$npe_node}
  prereqs="true"
  cue2run=$CUE2RUN
  nthreads=${NTHREPOS:-1}
  numproc=${NUMPROCEPOS:-$((npe_node/nthreads))}
  if [ $pe_node -eq $npe_node -a $nthreads -gt 1 ] ; then
    pe_node=$((npe_node/nthreads))
  fi
  nodes=$((numproc/pe_node))
  if [ $numproc -gt $((nodes*pe_node)) ] ; then
   export nodes=$((nodes+1))
  fi
  OMP_NUM_THREADS=$nthreads
  if [ $machine = WCOSS ]; then
    np="$numproc/$nodes/N"
    re="$((memory_node*nthreads/npe_node))/$nthreads/$pe_node"
    timelim=${TIMELIMEPOS:-01:00}
    APRUN="$launcher"
    export MPICH_ALLTOALL_THROTTLE=0
    export MP_USE_BULK_XFER=yes
  elif [ $machine = ZEUS ]; then
    np="$pe_node/$nodes/N"
    re="$((memory_node*nthreads/npe_node))/$nthreads"
    timelim=${TIMELIMEPOS:-1:00:00}
    if [ $nthreads -eq 1 ] ; then
      APRUN="'$launcher -n $numproc'"
    else
      APRUN="'$launcher -np $numproc $omplace -nt $nthreads'"
    fi
  fi
  whenrun=+0000
;;

earc)
  npe_node=${npe_node_earc:-1}
  pe_node=${pe_node_earc:-$npe_node}
  prereqs="true"
  cue2run=${CUE2RUNA:-$CUE2RUN1}
  re="${EARC_MEMORY:-1000}/1"
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    re="1000/1"
    timelim=${TIMELIMEARC:-04:00}
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=${TIMELIMEARC:-4:00:00}
  fi
  np="1/1/$partition"
  whenrun=+0000
;;

echk)
  prereqs="true"
  cue2run=$CUE2RUN1
  numproc="1/1"
  re="1000/1"
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    pe_node=1
    timelim=${TIMELIMECHK:-01:00}
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=${TIMELIMECHK:-1:00:00}
  fi
  np="1/1/$partition"
  whenrun=+0000
;;

eget)
  npe_node=${npe_node_eget:-1}
  pe_node=${pe_node_eget:-$npe_node}
  prereqs="true"
  cue2run=${CUE2RUNA:-$CUE2RUN1}
  re="${EGET_MEMORY:-1000}/1"
  if [ $machine = WCOSS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=S ; fi
    timelim=${TIMELIMEGET:-04:00}
  elif [ $machine = ZEUS ]; then
    if [ $mac2 != c1 -a $mac2 != c2 ] ; then partition=SH ; fi
    timelim=${TIMELIMEGET:-4:00:00}
  fi
  np="1/1/$partition"
  whenrun=+0000
;;

esac

################################################################################
# Check prerequisites
#
# Note about prerequisites check for the CSTEP/CKSH=dump step (10/26/06 SMB):
#
#   Although prereqs is set to true above for the dump step, the dump
#   step actually requires no prerequisites.  It is the first step to run in
#   the system.  The reason that prereqs="true" for the dump step is to avoid
#   exiting this psub script with the following lines:
#
#       else
#         echo $0: IN prerequisites not satisfied for step $CSTEP >&2
#         exit 1
#       fi
#
#    which appear several lines past this long-winded comment.
#
#    In more detail, the $PCNE script will run for the dump step and check for
#    "prerequisite files."  In other words, the $PCNE script will check for
#    files listed on the RHS of each line in the dump*.rlist files where the
#    LHS includes "DMRI" or "ROTI."  However, since there are no DMRI or ROTI
#    occurrences in the dump*.rlist files, there are no files that are really
#    considered prerquisites for the dump step, despite the fact that prereqs
#    is set to true for the dump step.  The $PCNE script will actually not
#    perform any "test -r" commands on any files that are considered
#    "prerequisites" because it only runs "test -r" on files that are
#    referenced by "DMRI" or "ROTI" on the LHS of the line in dump*.rlist.  The
#    $PCNE script will still send back a return code of zero after checking for
#    "prerequisite" files for the dump step because no "test -r" commands are
#    executed.  A non-zero return code will be returned by $PCNE only if any
#    files that DO have "DMRI" or "ROTI" listed on the LHS are not readable
#    ("test -r" fails on those files).  Alternatively, $PCNE will send back a
#    non-zero return code if actual, true prerequisite files are missing for a
#    step other than CSTEP/CKSH-dump.
# -----------------------------------------------------------------------------

if [[ $CDATE -gt $EDATE || $CDATE$CDUMP$CSTEP = $EDATE$EDUMP$ESTEP ]];then
  echo $0: end of experiment reached >&2
  exit 1
elif eval $prereqs;then
  $PCNE $CDATE/$CDUMP/$CSTEP/DMRI $COMDMP <$RLIST
  rc=$?
  ((rc+=$?))
  if [[ $rc -eq 0 ]];then
    echo $0: all prerequisites satisfied for step $CSTEP >&2
  else
    echo $0: RS prerequisites not satisfied for step $CSTEP >&2
    exit 1
  fi
else
  echo $0: IN prerequisites not satisfied for step $CSTEP >&2
  exit 1
fi

################################################################################
# Submit job

#en=CONFIG,CDATE,CDUMP,CSTEP,RUN_ENVIR,CLDASSH
#en="CONFIG=$CONFIG,CDATE=$CDATE,CDUMP=$CDUMP,CSTEP=$CSTEP,RUN_ENVIR=$RUN_ENVIR,APRUN=$APRUN,OMP_NUM_THREADS=$OMP_NUM_THREADS,CLDASSH=$CLDASSH"

RUN_ENVIR=${RUN_ENVIR:-para}
APRUN=${APRUN:-""}
APRUNC=${APRUNC:-""}
APRUNCY=${APRUNCY:-""}
OMP_NUM_THREADS=${OMP_NUM_THREADS:-1}
CYCLETHREAD=${CYCLETHREAD:-1}
CLDASSH=${CLDASSH:-""}

config_local=$COMROT/config_${CDATE}${CDUMP}${CSTEP}
> $config_local
echo "export CONFIG=$CONFIG"                   >> $config_local
echo "export CDATE=$CDATE"                     >> $config_local
echo "export CDUMP=$CDUMP"                     >> $config_local
echo "export CSTEP=$CSTEP"                     >> $config_local
echo "export CKSH=$CKSH"                       >> $config_local
echo "export CKND=$CKND"                       >> $config_local
echo "export RUN_ENVIR=$RUN_ENVIR"             >> $config_local
echo "export APRUN=$APRUN"                     >> $config_local
echo "export APRUNC=$APRUNC"                   >> $config_local
echo "export APRUNCY=$APRUNCY"                 >> $config_local
echo "export APRNPREP=$APRNPREP"               >> $config_local
echo "export APRNRELOC=$APRNRELOC"             >> $config_local
echo "export OMP_NUM_THREADS=$OMP_NUM_THREADS" >> $config_local
echo "export CLDASSH=$CLDASSH"                 >> $config_local
echo "export CYCLETHREAD=$CYCLETHREAD"         >> $config_local
if [ $CKSH = anal ] ; then
 echo "export CYCLETHREAD=$CYCLETHREAD"        >> $config_local
fi
if [ "${TASK_GEOMETRY:-NULL}" != NULL ] ; then
  echo "export TASK_GEOMETRY=\"$TASK_GEOMETRY\"" >> $config_local
fi
echo "export pe_node=$pe_node"                 >> $config_local
echo "export ECHKTYPE=$ECHKTYPE"               >> $config_local
cat $CONFIG                                    >> $config_local
chmod 755 $config_local

export en=CONFIG="$config_local"

jn=$PSLOT$CDATE$CDUMP$CSTEP
df=$COMDAY/$jn.dayfile

NEW_DAYFILE=${NEW_DAYFILE:-NO}
if [ $NEW_DAYFILE = YES ] ; then
 if [ $CKSH = fcst -o $CKSH = post -o $CKSH = anal -o $CKSH = prep -o $CKSH = ocnp -o  $CKSH = d3dp -o $CKSH = g3dp ] ; then
  ls -l $COMDAY/${jn}*.dayfile > $COMDAY/tem
  nn=`cat $COMDAY/tem | wc -l`
  ((nn+=0))
  while [ -s $COMDAY/${jn}_$nn.dayfile ] ; do nn=$((nn+1)) ; done
  echo $nn
  rm $COMDAY/tem
  df=$COMDAY/${jn}_$nn.dayfile
 fi
fi
if [ $CKSH = echk ] ; then
  count=`ls $COMDAY/${jn}.dayfile* | wc -l`
  if [ $count -gt 0 ] ; then
    suffix=`expr $count + 1`
    df=$COMROT/${jn}.dayfile${suffix}
  fi
fi
qn=$cue2run
gr=$GROUP
tl=$timelim
us=$USER
wr=$whenrun
ac=$ACCOUNT

#if [ $qn = res ] ; then
# string="$string \n#@ preferences = (Feature == \"prodnode\")"
#fi

#node=`hostname | cut -d. -f1,1`
#export mac=`echo $node | cut -c1-1`
#if [ $mac = g ] ; then           #           For gaea
# string=""
#fi
eval job=\${$(echo $CKSH|tr '[a-z]' '[A-Z]')SH:-$JOBSDIR/$CKSH.sh}

#if $LLQU $us|grep $jn;then
#if $LLQU $us|grep -v RP|grep $jn;then
if $LLQU | grep $jn | grep -v  \ C$'\t' ; then 
  $PLOG "$RUNLOG" NOTE "$jn already queued or running"
else
# echo $string | $SUB -i -a $ac -e $en -g $gr -j $jn -o $df -p $np -q $qn -r $re -t $tl -u $us -w $wr $job
  if [ $machine = WCOSS ]; then
    $SUB -a $ac -e $en -j $jn -o $df -p $np -q $qn -r $re -t $tl -w $wr $job
  elif [ $machine = ZEUS ]; then
    $SUB -a $ac -e $en -j $jn -o $df -p $np -q $qn -r $re -t $tl $job
  fi
  if [[ $? -ne 0 ]];then
    $PLOG "$RUNLOG"  NOTE "$jn submit failure"
    sleep 60
    if $LLQU $us | grep $jn ; then 
      $PLOG "$RUNLOG" NOTE "$jn already queued"
    else
#     echo $string | $SUB -i -a $ac -e $en -g $gr -j $jn -o $df -p $np -q $qn -r $re -t $tl -u $us -w $wr $job
      $SUB -a $ac -e $en -j $jn -o $df -p $np -q $qn -r $re -t $tl -w $wr $job
      if [[ $? -ne 0 ]];then
        $PLOG "$RUNLOG" ERROR "$jn submit failure"
        exit 8
      fi
      $PLOG "$RUNLOG" OK "$jn submitted"
    fi
  else
    $PLOG "$RUNLOG" OK "$jn submitted"
  fi
fi
exit
