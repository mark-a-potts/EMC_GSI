#!/bin/ksh
################################################################################
####  UNIX Script Documentation Block
#                      .                                             .
# Script name:         exglobal_enkf_recenter_fv3gfs.sh.ecf
# Script description:  recenter ensemble around hi-res deterministic analysis
#
# Author:        Rahul Mahajan      Org: NCEP/EMC     Date: 2017-03-02
#
# Abstract: This script recenters ensemble around hi-res deterministic analysis
#
# $Id$
#
# Attributes:
#   Language: POSIX shell
#   Machine: WCOSS-Cray/Theia
#
################################################################################

# Set environment.
VERBOSE=${VERBOSE:-"YES"}
if [ $VERBOSE = "YES" ]; then
   echo $(date) EXECUTING $0 $* >&2
   set -x
fi

# Directories.
pwd=$(pwd)
export NWPROD=${NWPROD:-$pwd}
export BASE_GSM=${BASE_GSM:-$NWPROD}
BASE_GSI=${BASE_GSI:-$NWPROD}
export DATA=${DATA:-$pwd}
COMIN=${COMIN:-$pwd}
COMIN_ENS=${COMIN_ENS:-$pwd}
COMIN_GES_ENS=${COMIN_GES_ENS:-${COMIN_ENS:-$pwd}}
COMOUT=${COMOUT:-$COMIN}
DMPDIR=${DMPDIR:-$NWPROD}

CDATE=${CDATE:-"2010010100"}
DONST=${DONST:-"NO"}

export CASE=${CASE:-384}
ntiles=${ntiles:-6}

# Utilities
ERRSCRIPT=${ERRSCRIPT:-'eval [[ $err = 0 ]]'}
NCP=${NCP:-"/bin/cp -p"}
NLN=${NLN:-"/bin/ln -sf"}
NEMSIOGET=${NEMSIOGET:-${NWPROD}/exec/nemsio_get}

# Scripts

# Executables.
GETATMENSMEANEXEC=${GETATMENSMEANEXEC:-$BASE_GSI/exec/getsigensmeanp_smooth.x}
GETSFCENSMEANEXEC=${GETSFCENSMEANEXEC:-$BASE_GSI/exec/getsfcensmeanp.x}
RECENATMEXEC=${RECENATMEXEC:-$BASE_GSI/exec/recentersigp.x}
CALCINCEXEC=${CALCINCEXEC:-$BASE_GSI/exec/calc_increment_ens.x}

# Files.
OPREFIX=${OPREFIX:-""}
OSUFFIX=${OSUFFIX:-""}
APREFIX=${APREFIX:-""}
ASUFFIX=${ASUFFIX:-""}
GPREFIX=${GPREFIX:-""}
GSUFFIX=${GSUFFIX:-""}

# Variables
NMEM_ENKF=${NMEM_ENKF:-80}
imp_physics=${imp_physics:-99}
INCREMENTS_TO_ZERO=${INCREMENTS_TO_ZERO:-"'NONE'"}

# global_chgres stuff
CHGRESEXEC=${CHGRESEXEC:-$BASE_GSM/exec/chgres_recenter.exe}
NTHREADS_CHGRES=${NTHREADS_CHGRES:-24}
APRUN_CHGRES=${APRUN_CHGRES:-""}

# global_cycle stuff
CYCLESH=${CYCLESH:-$BASE_GSM/ush/global_cycle.sh}
export CYCLEXEC=${CYCLEXEC:-$BASE_GSM/exec/global_cycle}
export FIXfv3=${FIXfv3:-$BASE_GSM/fix/fix_fv3_gmted2010}
export FIXgsm=${FIXgsm:-$BASE_GSM/fix/fix_am}
export CYCLVARS=${CYCLVARS:-"FSNOL=-2.,FSNOS=99999.,"}
export FHOUR=${FHOUR:-0}
export DELTSFC=${DELTSFC:-6}

RECENTER_ENKF=${RECENTER_ENKF:-"YES"}
SMOOTH_ENKF=${SMOOTH_ENKF:-"YES"}

APRUN_ECEN=${APRUN_ECEN:-${APRUN:-""}}
NTHREADS_ECEN=${NTHREADS_ECEN:-${NTHREADS:-1}}

DOIAU=${DOIAU_ENKF:-"NO"}
IAUFHRS=${IAUFHRS_ENKF:-6}

################################################################################
# Preprocessing
if [ ! -d $DATA ]; then mkdir -p $DATA; fi
cd $DATA || exit 99

ENKF_SUFFIX="s"
[[ $SMOOTH_ENKF = "NO" ]] && ENKF_SUFFIX=""

################################################################################
# Link ensemble member guess, analysis and increment files
fhrs=$(echo $IAUFHRS | sed -e "s/,/ /g")
for fhr in $fhrs; do

   fhrchar=$(printf %03i $fhr)

   fsuff="f$fhrchar"
   if [ $fhr -eq 6 ]; then
      asuff="anl"
      isuff="inc"
   else
      asuff="a${fhrchar}"
      isuff="i${fhrchar}"
   fi

   for imem in $(seq 1 $NMEM_ENKF); do
      memchar="mem"$(printf %03i $imem)
      $NLN $COMIN_GES_ENS/$memchar/${GPREFIX}atm${fsuff}${ENKF_SUFFIX}$GSUFFIX ./atm${fsuff}_$memchar
      $NLN $COMIN_ENS/$memchar/${APREFIX}atm${asuff}$ASUFFIX                   ./atm${asuff}_$memchar
      $NLN $COMIN_ENS/$memchar/${APREFIX}atm${isuff}.nc                        ./atm${isuff}_$memchar

      if [ $RECENTER_ENKF = "YES" ]; then
         $NLN $COMIN_ENS/$memchar/${APREFIX}ratm${asuff}$ASUFFIX ./ratm${asuff}_$memchar
      fi
   done

   $NLN $COMIN_ENS/${APREFIX}atm${asuff}.ensmean$ASUFFIX ./atm${asuff}_ensmean

done

# Compute ensemble mean analysis
export OMP_NUM_THREADS=$NTHREADS_ECEN
$NCP $GETATMENSMEANEXEC $DATA

for fhr in $fhrs; do

   echo "Computing ensemble mean analysis for fhr = $fhr"

   fhrchar=$(printf %03i $fhr)

   if [ $fhr -eq 6 ]; then
      asuff="anl"
   else
      asuff="a${fhrchar}"
   fi

   DATAPATH="./"
   ATMANLNAME="atm${asuff}"
   ATMANLMEANNAME="atm${asuff}_ensmean"

   $APRUN_ECEN ${DATA}/$(basename $GETATMENSMEANEXEC) $DATAPATH $ATMANLMEANNAME $ATMANLNAME $NMEM_ENKF
   rc=$?

   export ERR=$rc
   export err=$ERR
   $ERRSCRIPT || exit 2

done

LONB_ENKF=${LONB_ENKF:-$($NEMSIOGET atmanl_ensmean dimx | awk '{print $2}')}
LATB_ENKF=${LATB_ENKF:-$($NEMSIOGET atmanl_ensmean dimy | awk '{print $2}')}
LEVS_ENKF=${LEVS_ENKF:-$($NEMSIOGET atmanl_ensmean dimz | awk '{print $2}')}
if [ $QUILTING = ".false." -o $OUTPUT_GRID = "cubed_sphere_grid" ]; then
   JCAP_ENKF=${JCAP_ENKF:-$($NEMSIOGET atmanl_ensmean jcap | awk '{print $2}')}
else
   JCAP_ENKF=$((LATB_ENKF-2))
fi

################################################################################
# This is to give the user the option to recenter, default is YES
if [ $RECENTER_ENKF = "YES" ]; then

   # Copy recenter executable to DATA directory
   $NCP $RECENATMEXEC $DATA

   # GSI EnVar analysis
   ATMANL_GSI=${ATMANL_GSI:-$COMIN/${APREFIX}atmanl$ASUFFIX}

   LONB=${LONB:-$($NEMSIOGET $ATMANL_GSI dimx | awk '{print $2}')}
   LATB=${LATB:-$($NEMSIOGET $ATMANL_GSI dimy | awk '{print $2}')}
   if [ $QUILTING = ".false." -o $OUTPUT_GRID = "cubed_sphere_grid" ]; then
      JCAP=${JCAP:-$($NEMSIOGET $ATMANL_GSI jcap | awk '{print $2}')}
   else
      JCAP=$((LATB-2))
   fi

   # Decide if chgres is required for GSI EnVar analysis to ensemble resolution
   if [ $JCAP = $JCAP_ENKF -a $LATB = $LATB_ENKF -a $LONB = $LONB_ENKF ]; then

      DO_CHGRES="NO"

   else

      DO_CHGRES="YES"

      SIGLEVEL=${SIGLEVEL:-${FIXgsm}/global_hyblev.l${LEVS}.txt}
      TERRAIN=$COMIN/${APREFIX}atmanl.ensmean$ASUFFIX

      # Copy chgres executable to DATA directory
      $NCP $CHGRESEXEC $DATA

   fi

   for fhr in $fhrs; do

      fhrchar=$(printf %03i $fhr)

      if [ $fhr -eq 6 ]; then
         asuff="anl"
      else
         asuff="a$fhrchar"
      fi

      ATMANL_GSI=$COMIN/${APREFIX}atm$asuff$ASUFFIX
      ATMANL_GSI_ENSRES=$COMIN/${APREFIX}atm${asuff}.ensres$ASUFFIX

      if [ $DO_CHGRES = "NO" ]; then

         eval $NLN $ATMANL_GSI atm${asuff}_ensres

      else

         eval $NLN $ATMANL_GSI        atm${asuff}_gsi
         eval $NLN $ATMANL_GSI_ENSRES atm${asuff}_ensres

         rm -f fort.43
         cat > fort.43 << EOF
&nam_setup
  i_output=$LONB_ENKF
  j_output=$LATB_ENKF
  input_file="atm${asuff}_gsi"
  output_file="atm${asuff}_ensres"
  terrain_file="$TERRAIN"
  vcoord_file="$SIGLEVEL"
/
EOF

         export OMP_NUM_THREADS=$NTHREADS_CHGRES
         $APRUN_CHGRES ${DATA}/$(basename $CHGRESEXEC)
         rc=$?

         export ERR=$rc
         export err=$ERR
         $ERRSCRIPT || exit 3

      fi

      ################################################################################
      # Recenter ensemble member atmospheric analyses about hires analysis

      FILENAMEIN="atm$asuff"
      FILENAME_MEANIN="atm${asuff}_ensmean"  # EnKF ensemble mean analysis
      FILENAME_MEANOUT="atm${asuff}_ensres"  # recenter around GSI analysis at ensemble resolution
      FILENAMEOUT="ratmanl"

      export OMP_NUM_THREADS=$NTHREADS_ECEN
      $APRUN_ECEN ${DATA}/$(basename $RECENATMEXEC) $FILENAMEIN $FILENAME_MEANIN $FILENAME_MEANOUT $FILENAMEOUT $NMEM_ENKF
      rc=$?

      export ERR=$rc
      export err=$ERR
      $ERRSCRIPT || exit 4

  done # for fhr in $fhrs; do

fi # if [ $RECENTER_ENKF = "YES" ]; then

################################################################################
# Calculate ensemble analysis increment

export OMP_NUM_THREADS=1
$NCP $CALCINCEXEC $DATA

for fhr in $fhrs; do

   fhrchar=$(printf %03i $fhr)

   fsuff="f$fhrchar"
   if [ $fhr -eq 6 ]; then
      asuff="anl"
      isuff="inc"
   else
      asuff="a$fhrchar"
      isuff="i$fhrchar"
   fi

   if [ $RECENTER_ENKF = "YES" ]; then
      ATMANLNAME="ratm$asuff"
   else
      ATMANLNAME="atm$asuff"
   fi

   rm calc_increment.nml
   cat > calc_increment.nml << EOF
&setup
  datapath = './'
  analysis_filename = '$ATMANLNAME'
  firstguess_filename = 'atm$fsuff'
  increment_filename = 'atm$isuff'
  debug = .false.
  nens = $NMEM_ENKF
  imp_physics = $imp_physics
/
&zeroinc
  incvars_to_zero = $INCREMENTS_TO_ZERO
/
EOF
   cat calc_increment.nml

   $APRUN_ECEN ${DATA}/$(basename $CALCINCEXEC)
   rc=$?

   export ERR=$rc
   export err=$rc
   $ERRSCRIPT || exit 4

done # for fhr in $fhrs; do

################################################################################
# Update surface fields in the FV3 restart's using global_cycle

PDY=$(echo $CDATE | cut -c1-8)
cyc=$(echo $CDATE | cut -c9-10)

gPDY=$(echo $GDATE | cut -c1-8)
gcyc=$(echo $GDATE | cut -c9-10)
GDUMP=${GDUMP:-"gdas"}

if [ $DOIAU = "YES" ]; then
   SDATE=$($NDATE -3 $CDATE)
   sPDY=$(echo $SDATE | cut -c1-8)
   scyc=$(echo $SDATE | cut -c9-10)
else
   sPDY=$PDY
   scyc=$cyc
fi

# Get dimension information based on CASE
res=$(echo $CASE | cut -c2-)
JCAP_CASE=$((res*2-2))
LATB_CASE=$((res*2))
LONB_CASE=$((res*4))

# Global cycle requires these files
export FNTSFA=${FNTSFA:-$DMPDIR/$CDATE/$CDUMP/${OPREFIX}rtgssthr.grb}
export FNACNA=${FNACNA:-$DMPDIR/$CDATE/$CDUMP/${OPREFIX}seaice.5min.blend.grb}
export FNSNOA=${FNSNOA:-$DMPDIR/$CDATE/$CDUMP/${OPREFIX}snogrb_t${JCAP_CASE}.${LONB_CASE}.${LATB_CASE}}
[[ ! -f $FNSNOA ]] && export FNSNOA="$DMPDIR/$CDATE/$CDUMP/${OPREFIX}snogrb_t1534.3072.1536"
FNSNOG=${FNSNOG:-$DMPDIR/$GDATE/$GDUMP/${GDUMP}.t${gcyc}z.snogrb_t${JCAP_CASE}.${LONB_CASE}.${LATB_CASE}}
[[ ! -f $FNSNOG ]] && FNSNOG="$DMPDIR/$GDATE/$GDUMP/${GDUMP}.t${gcyc}z.snogrb_t1534.3072.1536"

# Set CYCLVARS by checking grib date of current snogrb vs that of prev cycle
if [ ${RUN_GETGES:-"NO"} = "YES" ]; then
    snoprv=$($GETGESSH -q -t snogrb_$JCAP_CASE -e $gesenvir -n $GDUMP -v $GDATE)
else
    snoprv=${snoprv:-$FNSNOG}
fi

if [ $($WGRIB -4yr $FNSNOA 2>/dev/null | grep -i snowc | awk -F: '{print $3}' | awk -F= '{print $2}') -le \
     $($WGRIB -4yr $snoprv 2>/dev/null | grep -i snowc | awk -F: '{print $3}' | awk -F= '{print $2}') ] ; then
    export FNSNOA=" "
    export CYCLVARS="FSNOL=99999.,FSNOS=99999.,"
else
    export SNOW_NUDGE_COEFF=${SNOW_NUDGE_COEFF:-0.}
    export CYCLVARS="FSNOL=${SNOW_NUDGE_COEFF},$CYCLVARS"
fi

if [ $DONST = "YES" ]; then
    export NST_ANL=".true."
    export GSI_FILE=${GSI_FILE:-$COMIN/${APREFIX}dtfanl.nc}
else
    export NST_ANL=".false."
    export GSI_FILE="NULL"
fi

export APRUNCY=$APRUN_ECEN
export OMP_NUM_THREADS_CY=$NTHREADS_ECEN
export MAX_TASKS_CY=$NMEM_ENKF

for n in $(seq 1 $ntiles); do

    export TILE_NUM=$n

    for imem in $(seq 1 $NMEM_ENKF); do

        cmem=$(printf %03i $imem)
        memchar="mem$cmem"

        [[ $TILE_NUM -eq 1 ]] && mkdir -p $COMIN_ENS/$memchar/RESTART

        $NLN $COMIN_GES_ENS/$memchar/RESTART/$sPDY.${scyc}0000.sfc_data.tile${n}.nc $DATA/fnbgsi.$cmem
        $NLN $COMIN_ENS/$memchar/RESTART/$sPDY.${scyc}0000.sfcanl_data.tile${n}.nc  $DATA/fnbgso.$cmem
        $NLN $FIXfv3/$CASE/${CASE}_grid.tile${n}.nc                                 $DATA/fngrid.$cmem
        $NLN $FIXfv3/$CASE/${CASE}_oro_data.tile${n}.nc                             $DATA/fnorog.$cmem

    done

    $CYCLESH
    rc=$?
    export ERR=$rc
    export err=$ERR
    $ERRSCRIPT || exit 11

done
################################################################################

################################################################################
# Postprocessing
cd $pwd
[[ ${KEEPDATA:-"NO"} = "NO" ]] && rm -rf $DATA
set +x
if [ $VERBOSE = "YES" ]; then
   echo $(date) EXITING $0 with return code $err >&2
fi
exit $err
