# disable in source builds to protect against overwriting other Makefiles
#set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
if( NOT DEFINED ENV{CC} )
  find_path( crayComp "ftn" )
  find_path( wcossIntel "mpfort" )
  find_path( intelComp "ifort" )
  find_path( pgiComp "pgf90" )
  if( crayComp )
    set(CMAKE_SYSTEM_NAME "CrayLinuxEnvironment")
    set(CMAKE_C_COMPILER "${crayComp}/cc")
    set(CMAKE_CXX_COMPILER "${crayComp}/CC")
    set(CMAKE_Fortran_COMPILER "${crayComp}/ftn")
  endif()
  if( intelComp )
    set(ENV{CC} "icc")
    set(ENV{CXX} "icpc")
    set(ENV{FC} "ifort")
  endif()
  if( wcossIntel )
    message("Setting env for wcoss intel")
    set(ENV{CC} "mpcc")
    set(ENV{CXX} "mpCC")
    set(ENV{FC} "mpfort")
  endif()
  if( pgiComp )
    set(ENV{CC} "pgcc")
    set(ENV{CXX} "pgCC")
    set(ENV{FC} "pgf90")
  endif()
endif()

project(GSI)
  enable_language (Fortran)
  option(USE_WRF "Find WRF object files and build regional GSI model" ON)
  option(BUILD_GLOBAL "Build GSI without WRF (regional) module " OFF)
  option(BUILD_GSI "Build the GSI model" ON)
  option(BUILD_ENKF "Build the Enkf executable " ON)
  option(BUILD_GFS "Build the Enkf with GFS module " ON)
  option(BUILD_NMMB "Build the Enkf with NMMB module " OFF)
  option(BUILD_WRF "Build the Enkf with WRF module " OFF)
  option(BUILD_CORELIBS "Build the Core libraries " OFF)
  option(BUILD_UTIL "Build the Enkf utilities " OFF)
  option(BUILD_REG_TESTING "Build the Regression Testing Suite" ON)
  option(BUILD_UNIT_TESTING "Build the Unit Testing Suite" OFF)
  cmake_minimum_required(VERSION 2.8)
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
  SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
  SET(ARCHIVE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_INCLUDE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/include")
  set(Fortran_MODULE_DIRECTORY "${PROJECT_BINARY_DIR}/include")
  set(CMAKE_Fortran_MODULE_DIRECTORY "${PROJECT_BINARY_DIR}/include")
  file(MAKE_DIRECTORY ${CMAKE_INCLUDE_OUTPUT_DIRECTORY})
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/setPlatformVariables.cmake)
  include(${CMAKE_SOURCE_DIR}/cmake/Modules/setCompilerFlags.cmake)
  if(BUILD_REG_TESTING)
    set(CTEST_TEST_TIMEOUT 86400 )
    find_package(GSICONTROL)
    include( CTest )
  endif(BUILD_REG_TESTING)

  cmake_policy(SET CMP0009 NEW)
  site_name(HOSTNAME)
  string(REGEX MATCH "s4-" HOST-S4 ${HOSTNAME} )
  string(REGEX MATCH "tfe[0-9]" HOST-Theia ${HOSTNAME} )
  string(REGEX MATCH "g[0-9][0-9]a" HOST-Gyre ${HOSTNAME} )
  string(REGEX MATCH "t[0-9][0-9]a" HOST-Tide ${HOSTNAME} )
  string(REGEX MATCH "llogin" HOST-Luna ${HOSTNAME} )
  string(REGEX MATCH "slogin" HOST-Surge ${HOSTNAME} )
  if( HOST-S4 ) 
    set( host "S4" )
    setS4()
  elseif(( HOST-Tide ) OR ( HOST-Gyre ) ) 
    set( host "WCOSS" )
    setWCOSS()
  elseif( HOST-Theia )
    set( host "THEIA" )
    setTHEIA()
  elseif( ( crayComp ) OR ( HOST-Luna) OR ( HOST-Surge ) )
    find_path( crayComp "ftn" )
    set( host "LUNA" )
    setCRAY()
  else(  )
    set( host "GENERIC" )
    setGeneric()
  endif()

  MESSAGE(${CMAKE_CURRENT_SOURCE_DIR})
  # make sure that the default is a RELEASE
  if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE RELEASE CACHE STRING
        "Choose the type of build, options are: None Debug Release."
        FORCE)
  endif (NOT CMAKE_BUILD_TYPE)
  set(CMAKE_Fortran_FLAGS_RELEASE "")  
  if (CMAKE_CXX_COMPILER_ID MATCHES "GNU*")
    message("Setting GNU flags")
    setGNU()
  elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
    message("Setting Intel flags")
    setIntel()
  elseif(CMAKE_C_COMPILER MATCHES "pgc*")
    message("Setting PGI flags")
    setPGI()
  endif()

  set(intsize 4) 
  set(doublesize 4) 
  set(libsuffix "_i${intsize}r${doublesize}")
  
  if( NOT(HOST-Luna) AND NOT(HOST-Surge) ) 
    find_package(MPI REQUIRED)
  endif()
  add_definitions(${MPI_Fortran_COMPILE_FLAGS})
  include_directories(${MPI_Fortran_INCLUDE_DIRS} ${MPI_INCLUDE_PATH} "./" ${CMAKE_INCLUDE_OUTPUT_DIRECTORY})
  link_directories(${MPI_Fortran_LIBRARIES} ${ARCHIVE_OUTPUT_PATH} )
  
  
  find_package( NetCDF REQUIRED)
  if(NETCDF4)
    set(HDF5_USE_STATIC_LIBRARIES "OFF")
    if(CMAKE_MAJOR_VERSION GREATER 2)
      find_package( HDF5 COMPONENTS C HL Fortran_HL REQUIRED )
    else()
      find_package( HDF5 )
    endif()
    find_package( CURL )
  endif()
  if( NOT crayComp )
    message(" trying to find lapack")
    find_package( LAPACK )
  endif()
  if(USE_WRF)
    find_package( WRF )
  endif()
  # default installation
  get_filename_component (default_prefix ".." ABSOLUTE)
  set (CMAKE_INSTALL_PREFIX ${default_prefix} CACHE STRING "set prefix"
        FORCE)
  
  
  # FFLAGS depend on the compiler
  get_filename_component (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)
  set(CFLAGS "-I. -DFortranByte=char -DFortranInt=int -DFortranLlong='long long' -O3  -Dfunder")
  set (CMAKE_Fortran_INC_FLAGS "-I ./ -I ${CORE_INCS} -I ${NETCDF_INCLUDES} ")
  set (CFLAGS_N "-I. -DFortranByte=char -DFortranInt=int -DFortranLlong='long long'  -O3  -Dfunder")


  if(BUILD_CORELIBS )
    message("setting values for corelibs")
    set(BUILD_CRTM "ON" CACHE STRING "Build the CRTM library" )
    set(BUILD_BACIO "ON" CACHE STRING "Build the BACIO library" )
    set(BUILD_BUFR "ON" CACHE STRING "Build the BUFR library" )
    set(BUILD_SFCIO "ON" CACHE STRING "Build the SFCIO library" )
    set(BUILD_SIGIO "ON" CACHE STRING "Build the SIGIO library" )
    set(BUILD_NEMSIO "ON" CACHE STRING "Build the NEMSIO library" )
    set(BUILD_SP "ON" CACHE STRING "Build the SP library" )
    set(BUILD_EMC "ON" CACHE STRING "Build the EMC library" )
    set(BUILD_NCO "ON" CACHE STRING "Build the NCO library" )
    set(FIND_SRC ON )
  else()
    set(FIND_SRC OFF)
  endif()
  find_package( CORELIBS )
  if(BUILD_CORELIBS) 
    add_subdirectory(core-libs)
  endif()

  add_subdirectory(src)
  add_subdirectory(src/enkf)

  set(GSILIB gsilib)

  if(BUILD_UNIT_TESTING)
    set(CTEST_TEST_TIMEOUT 400 )
    find_package(GSICONTROL)
    include( CTest )
    add_subdirectory(unit-tests)
  endif(BUILD_UNIT_TESTING)
  if(BUILD_REG_TESTING)
    if(USE_WRF)
      file(WRITE "${PROJECT_BINARY_DIR}/regression_var.out" "${CMAKE_SOURCE_DIR}/scripts/regression_var.sh ${host} ${CMAKE_SOURCE_DIR}/.. ${PROJECT_BINARY_DIR} ${CMAKE_SOURCE_DIR} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/gsi.x${debug_suffix} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/enkf_gfs.x${debug_suffix} ${GSICONTROL} ${ENKFCONTROL} ")
      set( REG_TEST_NAMES "global_T62;global_T62_ozonly;global_4dvar_T62;global_4denvar_T126;global_lanczos_T62;arw_netcdf;
          arw_binary;nmm_binary;nmm_netcdf;nmmb_nems_4denvar;hwrf_nmm_d2;hwrf_nmm_d3;rtma;global_enkf_T62")
    else()
      file(WRITE "${PROJECT_BINARY_DIR}/regression_var.out" "${CMAKE_SOURCE_DIR}/scripts/regression_var.sh ${host} ${CMAKE_SOURCE_DIR}/.. ${PROJECT_BINARY_DIR} ${CMAKE_SOURCE_DIR} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/gsi_global.x${debug_suffix} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/enkf.x${debug_suffix} ${GSICONTROL} ${ENKFCONTROL} ")
      set( REG_TEST_NAMES "global_T62;global_T62_ozonly;global_4dvar_T62;global_lanczos_T62;global_nemsio_T62")
    endif()
    foreach( REG_TEST ${REG_TEST_NAMES} )
      add_test(NAME ${REG_TEST} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/scripts COMMAND regression_driver.sh ${REG_TEST} ${PROJECT_BINARY_DIR})
    endforeach( REG_TEST )
    set_tests_properties( ${REG_TEST_NAMES} PROPERTIES TIMEOUT 86400 )
  endif()
  if(BUILD_UTIL)
    add_subdirectory(util/EnKF/gfs/src)
  endif(BUILD_UTIL) 
