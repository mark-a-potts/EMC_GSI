#/bin/sh
################################################################################
####  UNIX Script Documentation Block
#                      .                                             .
# Script name:         exgdas_vrfyconv.sh.sms
# Script description:  Runs data extract/validation for global conventional diag data
#
# Author:        Ed Safford       Org: NP23         Date: 2015-09
#
# Abstract: This script runs the data extract/validation portion of the 
#           CMon package.  
#
# Script history log:
# 2015-09     Ed Safford
#
#   Input script positional parameters:
#     1             Current analysis date in yyyymmddhh format
#                   defaults to PDY; required
#     2             cycle time in cc format
#                   defaults to CYC; required
#
#   Imported Shell Variables:
#     RAD_AREA      flag for global or regional
#     C_TANKDIR     repository for cmon data files
#     DATA          data working space
#     FIXgdascmon   fixed file directory, gdas specific
#     FIXcmon       fixed file directory
#     USHcmon       scripts directory
#     PDY           processing day; 
#                   overridden by 1
#     CYC	    processing cycle; 
#                   overridden by 2
#     INISCRIPT     Preprocessing script
#                   defaults to none
#     LOGSCRIPT     Log posting script
#                   defaults to none
#     ERRSCRIPT     Error processing script
#                   defaults to 'eval [[ $err = 0 ]]'
#     ENDSCRIPT     Postprocessing script
#                   defaults to none
#     LITTLE_ENDIAN Flag to indicate LE machine
#                   defaults to 0 (big endian)
#
#   Exported Shell Variables:
#     RAD_AREA      flag for global or regional
#     PDATE	    Processing date
#     MAKE_CTL      Signal to make ctl files, set to 1 (on)
#     MAKE_DATA     Signal to make data files, set to 1 (on)
#     USE_ANL       Signal to use analysis input files 
#                     in addition to ges files, set to 0 (off)
#     USE_MAIL      Signal to send error reports by mail, set to 0 (off)
#     SATYPE        list of satellite/instrument sources to process
#     err           last return code
#     DO_DIAG_RPT   Signal to build the diag report, set to 1 (on)
#     DO_DATA_RPT   Signal to build the data report, set to 1 (on)
#     MAIL_TO       Mail recipients list, set to "" (no recipients)
#     MAIL_CC       Mail cc recipients list, set to "" (no recipients)
#
#   Modules and files referenced:
#     scripts    : $INISCRIPT
#                  $LOGSCRIPT
#                  $ERRSCRIPT 
#                  $ENDSCRIPT
#                 x ${USHcmon}/radmon_verf_angle.sh
#                 x ${USHcmon}/radmon_verf_bcoef.sh
#                 x ${USHcmon}/radmon_verf_bcor.sh
#                 x ${USHcmon}/radmon_verf_time.sh
#
#     programs   : $NDATE
#
#     fixed data : $SATANGL
#
#     input data : $biascr
#                  $radstat
#                  $biascr
#
#     output data:  
#
#  Remarks:
#
#    Condition codes
#       0 - no problem encountered
#      >0 - some problem encountered
#
#    Control variable resolution priority
#       1 Command line argument.
#       2 Environment variable.
#       3 Inline default.
#
#  Attributes:
#    Language:  POSIX shell
#    Machine:   IBM SP
#
################################################################################
#  Set environment
export VERBOSE=${VERBOSE:-"NO"} 
if [[ "$VERBOSE" = "YES" ]]
then
   echo start exgdas_vrfyconv.sh.sms
   set -x
fi
export RUN_ENVIR=${RUN_ENVIR:-prod}
export NET=${NET:-gfs}
export RUN=${RUN:-gdas}
export envir=${envir:-prod}

#  Command line arguments
export PDY=${1:-${PDY:?}} 
export CYC=${2:-${CYC:?}}

#  Directories
export DATA=${DATA:-$(pwd)}			# work directory
export C_COM_IN=${C_COM_IN:-/com/${NET}/${envir}}
export C_COMIN=${C_COMIN:-$C_COM_IN/${RUN}.${PDY}}

export HOMEgdascmon=${HOMEgdascmon:-/nw${envir}/gdas_cmon.v${gdas_cmon_ver}}
export FIXgdascmon=${FIXgdascmon:-$HOMEgdascmon/fix}
export FIXcmon=${FIXcmon:-${FIXgdascmon}}

export HOMEcmon=${HOMEcmon:-/nw${envir}/cmon_shared.v${cmon_shared_ver}}
export EXECcmon=${EXECcmon:-$HOMEcmon/exec}
export USHcmon=${USHcmon:-$HOMEcmon/ush}

export C_TANKDIR=${C_TANKDIR:-/com/verf/prod}
export TANKDIR_cmon=${C_TANKDIR}/cmon.${PDY}

export GDATE=`$NDATE -06 $PDY$CYC`
export PDYm6h=`echo $GDATE|cut -c1-8`
export GCYC=`echo $GDATE|cut -c9-10`
export C_COMINm6h=${C_COMINm6h:-${C_COM_IN}/${RUN}.${PDYm6h}}

#  Filenames
export cnvstat=${cnvstat:-${C_COMIN}/cnvstat.gdas.${PDATE}}
export pgrbanl=${pgrbanl:-${C_COMIN}/gdas1.t${CYC}z.pgrbanl}
export pgrbf06=${pgrbf06:-${C_COMINm6h}/gdas1.t${GCYC}z.pgrbf06}
							
echo "cnvstat = $cnvstat"
echo "pgrbanl = $pgrbanl"
echo "pgrbf06 = $pgrbf06"

export INISCRIPT=${INISCRIPT}
export ERRSCRIPT=${ERRSCRIPT:-'eval [[ $err = 0 ]]'}
export LOGSCRIPT=${LOGSCRIPT}
export ENDSCRIPT=${ENDSCRIPT}

#  Other variables
export CMON_AREA=${CMON_AREA:-glb}
#export USE_ANL=${USE_ANL:-1}
export NCP=${NCP:-/bin/cp}
export NDATE=${NDATE:-/nwprod/util/exec/ndate}
export pgm=exgdas_vrfyconv.sh.sms

$LOGSCRIPT

#####################################################################
# Preprocessing
$INISCRIPT

if [[ ! -d ${DATA} ]]; then
   mkdir $DATA
fi
cd $DATA
export workdir=$DATA


if [[ ! -d ${TANKDIR_cmon} ]]; then
   mkdir -p $TANKDIR_cmon
fi

if [[ "$VERBOSE" = "YES" ]]; then
   if [[ -s ${cnvstat} ]]; then
      echo "$cnvstat is available"
   fi
   if [[ -s ${pgrbanl} ]]; then
      echo "$pgrbanl is available"
   fi
   if [[ -s ${pgrbf06} ]]; then
      echo "$pgrbf06 is available"
   fi
fi
#####################################################################

data_available=0
if [[ -s ${cnvstat} && -s ${pgrbanl} && -s ${pgrbf06} ]]; then
   data_available=1                                         

   #------------------------------------------------------------------
   #  Copy data files file to local data directory.  
   #  Untar cnvstat file.  
   #------------------------------------------------------------------

   export grib2=${grib2:-0}   
   $NCP $cnvstat ./cnvstat.$PDATE
   $NCP $pgrbanl ./pgbanl.$PDATE
   $NCP $pgrbf06 ./pgbf06.$GDATE

   tar -xvf ./cnvstat.$PDATE
   $UNCOMPRESS ./*.${Z}

   rm ./cnvstat.$PDATE

   #------------------------------------------------------------------
   #  Generate the anal.ctl and guess.ctl files for later plotting
   #------------------------------------------------------------------
   echo "grib2 = $grib2"
   if [[ $grib2 -eq 0 ]]; then
      echo "using ${USHcmon}/grib2ctl.pl"
      ${USHcmon}/grib2ctl.pl pgbanl.$PDATE > anal_${PDATE}.ctl
#      gribmap -i anal.ctl -0
      ${USHcmon}/grib2ctl.pl -verf pgbf06.$GDATE > guess_${GDATE}.ctl
#      gribmap -i guess.ctl
   else
      echo "using g2ctl.pl"
      ${USHcmon}/g2ctl.pl -0 pgbanl.$PDATE > anal_${PDATE}.ctl
#      gribmap -0 -i anal.ctl
      ${USHcmon}/g2ctl.pl pgbf06.$GDATE > guess_${GDATE}.ctl
#      gribmap -i guess.ctl
   fi

   #------------------------------------------------------------------
   #   Run the child sccripts.
   #    -->  get unique rc values for each child, use in error reporting below
   #------------------------------------------------------------------

   #  run the horz-hist extraction script
   ${USHcmon}/horz_hist.sh # ${PDATE}
   rc_horz_hist=$?

 
#   jobname=cmon_horz_hist_${SUFFIX}
#run_script=${SCRIPTS}/horz_hist.sh
#log_file=${LOGDIR}/horz_hist_${SUFFIX}.log
#rm -f $log_file
#
#if [[ $MY_MACHINE = "wcoss" ]]; then
#   $SUB -P $PROJECT -q $JOB_QUEUE -o ${log_file} -R affinity[core] -M 50 -W 0:30 -J ${jobname} ${run_script}
#fi
#
   #  run the time-vert extraction script
#
#jobname=cmon_time_vert_${SUFFIX}
#run_script=${SCRIPTS}/time_vert.sh
#log_file=${LOGDIR}/time_vert_${SUFFIX}.log
#rm -f $log_file
#
#if [[ $MY_MACHINE = "wcoss" ]]; then
#   $SUB -P $PROJECT -q $JOB_QUEUE -o ${log_file} -R affinity[core] -M 50 -W 0:10 -J ${jobname} ${run_script}
#fi



fi

#####################################################################
# Postprocessing
#$ENDSCRIPT

err=0
if [[ ${data_available} -ne 1 ]]; then
   err=1
elif [[ $rc_horz_hist -ne 0 ]]; then
   err=$rc_horz_hist
#elif [[ $rc_bcoef -ne 0 ]]; then
#   err=$rc_bcoef
#elif [[ $rc_bcor -ne 0 ]]; then
#   err=$rc_bcor
#elif [[ $rc_time -ne 0 ]]; then
#   err=$rc_time
fi

if [[ "$VERBOSE" = "YES" ]]; then
   echo "end exgdas_vrfyconv.sh.sms, exit value = ${err}"
fi

#if [[ ${err} -ne 0 ]]; then
#   export err
#   $ERRSCRIPT||exit ${err} 
#fi

set +x
exit ${err}

