
function (findSrc varName version varDir )
      if(EXISTS ${CMAKE_SOURCE_DIR}/libsrc/${varName})
          message("setting source for ${varName} to be in libsrc")
          set( ${varDir} "${CMAKE_SOURCE_DIR}/libsrc/${varName}" PARENT_SCOPE)
          set( ${varCacheName} "${CMAKE_SOURCE_DIR}/libsrc/${varName}" CACHE STRING "" FORCE )
      else()
        message("ProdGSI/libsrc directory not pulled from repo. Either clone with recursive or specify location of library sources")
      endif()
endfunction()

function (findInc incName version incFile )
  cmake_policy(SET CMP0011 NEW)
  cmake_policy(SET CMP0009 NEW)
  STRING(COMPARE EQUAL ${incFile} "CRTMINC" USECRTMBASE )
  if(( USECRTMBASE ) AND ( CRTM_BASE ))
    execute_process(COMMAND find ${CRTM_BASE} -iname ${incName}_module.mod RESULT_VARIABLE res OUTPUT_VARIABLE INCFILES)
  else()
    if(crayComp)
      if(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
        execute_process(COMMAND find ${COREPATH}/${incName}/v${${version}}/intel -iname ${incName}_module.mod RESULT_VARIABLE res OUTPUT_VARIABLE INCFILES)
      else()
        execute_process(COMMAND find ${COREPATH}/${incName}/v${${version}}/cray -iname ${incName}_module.mod RESULT_VARIABLE res OUTPUT_VARIABLE INCFILES)
      endif()
    else()
      execute_process(COMMAND find ${COREPATH}/${incName} -iname ${incName}_module.mod RESULT_VARIABLE res OUTPUT_VARIABLE INCFILES)
    endif()
    if( NOT (INCFILES) )
      execute_process(COMMAND find ${COREPATH}/sorc -iname ${incName}_module.mod RESULT_VARIABLE res OUTPUT_VARIABLE INCFILES)
    endif()
  endif()
  if( INCFILES )
     string(REGEX REPLACE "\n" ";" INCFILES ${INCFILES} )
  endif()
  foreach( INC_FILE in ${INCFILES} )
      message("found ${INC_FILE}")
      string(REGEX REPLACE "${incName}_module.mod" "" INCPATH ${INC_FILE} )
      set( ${incFile} ${INCPATH} PARENT_SCOPE )
      return()
  endforeach()
  file(GLOB_RECURSE INCFILES ${COREPATH}/${incName}_module.mod )
  list(LENGTH INCFILES numFiles)
  if(numFiles EQUAL 1) 
      get_filename_component( INCPATH ${INCFILES} DIRECTORY )
  else()  
    foreach( INC_FILE in ${INCFILES} )
      get_filename_component( INCPATH ${INC_FILE} DIRECTORY )
    endforeach()
  endif()
  set( ${incFile} ${INCPATH} PARENT_SCOPE )
endfunction()

function (findOtherVersion rootPath srcName srcPath newVer )
  file(GLOB SRCDIRS ${${rootPath}}/${srcName}* )
  foreach( SRC_DIR in ${SRCDIRS} )
    string(REGEX MATCH ${srcName} MATCHFOUND ${SRC_DIR} )
    if( MATCHFOUND ) 
      set( ${srcPath} ${SRC_DIR} PARENT_SCOPE )
      string(REGEX MATCH "[0-9].[0-9].[0-9]" ALTVER ${SRC_DIR}  )
      message("Found ${ALTVER} of ${srcName}. Proceeding with Alternative")
      set( ${newVer} ${ALTVER} PARENT_SCOPE )
      return()
    endif()
  endforeach()
endfunction()
